========================================================================
Example Number: 1
Parent Code is: 
name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Child code is: 
! name.inExterns && name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (38 (207{val=!}) (40{val=name.inExterns})) (249{val=&&}) (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/130/parent/src_com_google_javascript_jscomp_CollapseProperties.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 24
Wrong
========================================================================
False

0
Tree	- NUMBER_CONSTANT && name.localSets == null && extends
Code	- NUMBER_CONSTANT && name.localSets == null && extends
Distance : 9

1
Tree	- NUMBER_CONSTANT && name.localSets == null && -
Code	- NUMBER_CONSTANT && name.localSets == null && -
Distance : 9

2
Tree	- NUMBER_CONSTANT && name.localSets == null && extends
Code	- NUMBER_CONSTANT && name.localSets == null && extends
Distance : 9

3
Tree	- NUMBER_CONSTANT && name.localSets == null && -
Code	- NUMBER_CONSTANT && name.localSets == null && -
Distance : 9

4
Tree	! name.globalSets && name.globalSets == null && {}
Code	! name.globalSets && name.globalSets == null && {}
Distance : 9

5
Tree	! name.globalSets && name.globalSets == null && parts.length
Code	! name.globalSets && name.globalSets == null && parts.length
Distance : 9

6
Tree	! name.globalSets && name.globalSets == null && extends
Code	! name.globalSets && name.globalSets == null && extends
Distance : 9

7
Tree	! name.globalSets && name.globalSets == null && {}
Code	! name.globalSets && name.globalSets == null && {}
Distance : 9

8
Tree	! name.globalSets && name.globalSets == null && -
Code	! name.globalSets && name.globalSets == null && -
Distance : 9

9
Tree	! name.globalSets && name.globalSets == null && parts.length
Code	! name.globalSets && name.globalSets == null && parts.length
Distance : 9

10
Tree	! name.globalSets && name.globalSets == null && -
Code	! name.globalSets && name.globalSets == null && -
Distance : 9

11
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT
Distance : 4

12
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT super
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT super
Distance : 5

13
Tree	! name.globalSets && name.globalSets == null && extends
Code	! name.globalSets && name.globalSets == null && extends
Distance : 9

14
Tree	name.globalSets == NUMBER_CONSTANT && name.globalSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT TypeInferenceMode.NEITHER
Code	name.globalSets == NUMBER_CONSTANT && name.globalSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT TypeInferenceMode.NEITHER
Distance : 6

15
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.globalSets > NUMBER_CONSTANT :
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.globalSets > NUMBER_CONSTANT :
Distance : 5

16
Tree	- NUMBER_CONSTANT && name.localSets == null && ^
Code	- NUMBER_CONSTANT && name.localSets == null && ^
Distance : 9

17
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * scope
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * scope
Distance : 8

18
Tree	- NUMBER_CONSTANT && name.localSets == null && ^
Code	- NUMBER_CONSTANT && name.localSets == null && ^
Distance : 9

19
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * jsdoc
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * jsdoc
Distance : 8

20
Tree	- NUMBER_CONSTANT && name.localSets == null && ]
Code	- NUMBER_CONSTANT && name.localSets == null && ]
Distance : 9

21
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * result
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * result
Distance : 8

22
Tree	- NUMBER_CONSTANT && name.localSets == null && ]
Code	- NUMBER_CONSTANT && name.localSets == null && ]
Distance : 9

23
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * ParamGroup
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * ParamGroup
Distance : 8

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
Context rhsContext = Context.OTHER ;
-------------------------------------------------------------------------------
Child code is: 
Context rhsContext = getContextForNoInOperator ( context ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (40{val=Context.OTHER})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (32 (802{val=getContextForNoInOperator}) (214{val=(}) (800{val=context}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/123/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 108
Wrong
========================================================================
False

0
Tree	long rhsContext ;
Code	long rhsContext ;
Distance : 6

1
Tree	int rhsContext ;
Code	int rhsContext ;
Distance : 6

2
Tree	Context rhsContext = Context.OTHER ( context ) ;
Code	Context rhsContext = Context.OTHER ( context ) ;
Distance : 1

3
Tree	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ;
Code	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ;
Distance : 4

4
Tree	Context rhsContext [] = rhsContext . Context.OTHER () ;
Code	Context rhsContext [] = rhsContext . Context.OTHER () ;
Distance : 5

5
Tree	context rhsContext = Context.OTHER ;
Code	context rhsContext = Context.OTHER ;
Distance : 5

6
Tree	Context context = Context.OTHER . Context.OTHER ( ; ) ;
Code	Context context = Context.OTHER . Context.OTHER ( ; ) ;
Distance : 5

7
Tree	Context rhsContext = context ? Context.OTHER : Context.OTHER ;
Code	Context rhsContext = context ? Context.OTHER : Context.OTHER ;
Distance : 5

8
Tree	Context context = new rhsContext ( = , rhsContext ) ;
Code	Context context = new rhsContext ( = , rhsContext ) ;
Distance : 6

9
Tree	Context rhsContext = new rhsContext ( = , context ) ;
Code	Context rhsContext = new rhsContext ( = , context ) ;
Distance : 4

10
Tree	Context rhsContext = context ;
Code	Context rhsContext = context ;
Distance : 3

11
Tree	Context rhsContext = new rhsContext () ;
Code	Context rhsContext = new rhsContext () ;
Distance : 4

12
Tree	Context rhsContext = this . rhsContext ;
Code	Context rhsContext = this . rhsContext ;
Distance : 4

13
Tree	Context rhsContext = Context.OTHER ; of
Code	Context rhsContext = Context.OTHER ; of
Distance : 5

14
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

15
Tree	Context rhsContext = super . Context.OTHER () ;
Code	Context rhsContext = super . Context.OTHER () ;
Distance : 4

16
Tree	rhsContext Context [] = rhsContext . Context.OTHER () ; block
Code	rhsContext Context [] = rhsContext . Context.OTHER () ; block
Distance : 7

17
Tree	Context rhsContext [] = rhsContext . Context.OTHER () ; of
Code	Context rhsContext [] = rhsContext . Context.OTHER () ; of
Distance : 6

18
Tree	char rhsContext ;
Code	char rhsContext ;
Distance : 6

19
Tree	Context rhsContext = super . Context.OTHER () ; of
Code	Context rhsContext = super . Context.OTHER () ; of
Distance : 5

20
Tree	Context rhsContext = super . Context.OTHER () ; block
Code	Context rhsContext = super . Context.OTHER () ; block
Distance : 5

21
Tree	Context rhsContext ;
Code	Context rhsContext ;
Distance : 5

22
Tree	Context rhsContext [] = context ;
Code	Context rhsContext [] = context ;
Distance : 4

23
Tree	Context context = this . rhsContext ;
Code	Context context = this . rhsContext ;
Distance : 5

24
Tree	Context rhsContext = rhsContext . Context.OTHER ( context ) ;
Code	Context rhsContext = rhsContext . Context.OTHER ( context ) ;
Distance : 3

25
Tree	Context rhsContext = this . context ;
Code	Context rhsContext = this . context ;
Distance : 3

26
Tree	Context rhsContext = default: ;
Code	Context rhsContext = default: ;
Distance : 4

27
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

28
Tree	Context context = new rhsContext () ;
Code	Context context = new rhsContext () ;
Distance : 5

29
Tree	rhsContext context = context ;
Code	rhsContext context = context ;
Distance : 5

30
Tree	Context rhsContext = new rhsContext ( = , rhsContext ) ;
Code	Context rhsContext = new rhsContext ( = , rhsContext ) ;
Distance : 5

31
Tree	Context context = super . Context.OTHER () ;
Code	Context context = super . Context.OTHER () ;
Distance : 5

32
Tree	rhsContext rhsContext = Context.OTHER ;
Code	rhsContext rhsContext = Context.OTHER ;
Distance : 5

33
Tree	Context context = Context.OTHER ? Context.OTHER : Context.OTHER ;
Code	Context context = Context.OTHER ? Context.OTHER : Context.OTHER ;
Distance : 6

34
Tree	Context rhsContext = return; ;
Code	Context rhsContext = return; ;
Distance : 4

35
Tree	Context context = rhsContext . Context.OTHER () ;
Code	Context context = rhsContext . Context.OTHER () ;
Distance : 5

36
Tree	Context [] rhsContext = Context.OTHER ; of
Code	Context [] rhsContext = Context.OTHER ; of
Distance : 6

37
Tree	Context rhsContext = null ;
Code	Context rhsContext = null ;
Distance : 4

38
Tree	Context context = this . context ;
Code	Context context = this . context ;
Distance : 4

39
Tree	Context rhsContext [] = context . Context.OTHER () ;
Code	Context rhsContext [] = context . Context.OTHER () ;
Distance : 5

40
Tree	Context rhsContext = new rhsContext ( context , rhsContext ) ;
Code	Context rhsContext = new rhsContext ( context , rhsContext ) ;
Distance : 4

41
Tree	Context rhsContext = isFwd ;
Code	Context rhsContext = isFwd ;
Distance : 4

42
Tree	Context rhsContext = SIMPLIFY_RHS ;
Code	Context rhsContext = SIMPLIFY_RHS ;
Distance : 4

43
Tree	Context rhsContext = context . Context.OTHER ( ; ) ;
Code	Context rhsContext = context . Context.OTHER ( ; ) ;
Distance : 4

44
Tree	Context context = Context.OTHER ( ; , true ) ;
Code	Context context = Context.OTHER ( ; , true ) ;
Distance : 5

45
Tree	Context rhsContext = false ;
Code	Context rhsContext = false ;
Distance : 4

46
Tree	char rhsContext = Context.OTHER ;
Code	char rhsContext = Context.OTHER ;
Distance : 5

47
Tree	Context rhsContext = new rhsContext () ; block
Code	Context rhsContext = new rhsContext () ; block
Distance : 5

48
Tree	Context context = Context.OTHER ( context ) ;
Code	Context context = Context.OTHER ( context ) ;
Distance : 2

49
Tree	Context rhsContext = NUMBER_CONSTANT ; of
Code	Context rhsContext = NUMBER_CONSTANT ; of
Distance : 5

50
Tree	Context rhsContext = Context.OTHER ( context , true ) ;
Code	Context rhsContext = Context.OTHER ( context , true ) ;
Distance : 3

51
Tree	Context context = Context.OTHER . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Code	Context context = Context.OTHER . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Distance : 7

52
Tree	Context rhsContext = Map.Entry ;
Code	Context rhsContext = Map.Entry ;
Distance : 4

53
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

54
Tree	Context context = Context.OTHER ( ; , NUMBER_CONSTANT ) ;
Code	Context context = Context.OTHER ( ; , NUMBER_CONSTANT ) ;
Distance : 5

55
Tree	Context rhsContext = ModuleLoader.ResolutionMode.BROWSER ;
Code	Context rhsContext = ModuleLoader.ResolutionMode.BROWSER ;
Distance : 4

56
Tree	long rhsContext = Context.OTHER ;
Code	long rhsContext = Context.OTHER ;
Distance : 5

57
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ;
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ;
Distance : 5

58
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( ; , Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( ; , Context.OTHER ) ;
Distance : 6

59
Tree	boolean rhsContext = Context.OTHER ;
Code	boolean rhsContext = Context.OTHER ;
Distance : 5

60
Tree	rhsContext context = Context.OTHER ;
Code	rhsContext context = Context.OTHER ;
Distance : 6

61
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( = ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( = ) ;
Distance : 4

62
Tree	Context context = Context.OTHER ( context , NUMBER_CONSTANT ) ;
Code	Context context = Context.OTHER ( context , NUMBER_CONSTANT ) ;
Distance : 4

63
Tree	Context rhsContext = Context.OTHER ( ; ) ;
Code	Context rhsContext = Context.OTHER ( ; ) ;
Distance : 2

64
Tree	Context rhsContext = NUMBER_CONSTANT ; block
Code	Context rhsContext = NUMBER_CONSTANT ; block
Distance : 5

65
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

66
Tree	Context rhsContext = Context.OTHER ( context , NUMBER_CONSTANT ) ;
Code	Context rhsContext = Context.OTHER ( context , NUMBER_CONSTANT ) ;
Distance : 3

67
Tree	Context rhsContext = context . Context.OTHER ( = , Context.OTHER ) ;
Code	Context rhsContext = context . Context.OTHER ( = , Context.OTHER ) ;
Distance : 6

68
Tree	final Context rhsContext = Context.OTHER ;
Code	final Context rhsContext = Context.OTHER ;
Distance : 5

69
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

70
Tree	Context rhsContext = new rhsContext () ; of
Code	Context rhsContext = new rhsContext () ; of
Distance : 5

71
Tree	Context rhsContext = STRING_CONSTANT ; of
Code	Context rhsContext = STRING_CONSTANT ; of
Distance : 5

72
Tree	Context rhsContext = STRING_CONSTANT ; block
Code	Context rhsContext = STRING_CONSTANT ; block
Distance : 5

73
Tree	Context [] rhsContext = Context.OTHER ; block
Code	Context [] rhsContext = Context.OTHER ; block
Distance : 6

74
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ;
Code	Context rhsContext = Context.OTHER . Context.OTHER () ;
Distance : 4

75
Tree	Context context = context . Context.OTHER () ;
Code	Context context = context . Context.OTHER () ;
Distance : 5

76
Tree	Context context ;
Code	Context context ;
Distance : 5

77
Tree	Context context = true ;
Code	Context context = true ;
Distance : 5

78
Tree	Context rhsContext = Context.OTHER ; of
Code	Context rhsContext = Context.OTHER ; of
Distance : 5

79
Tree	int rhsContext = Context.OTHER ;
Code	int rhsContext = Context.OTHER ;
Distance : 5

80
Tree	abstract Context rhsContext = Context.OTHER ;
Code	abstract Context rhsContext = Context.OTHER ;
Distance : 5

81
Tree	Context rhsContext = Context.OTHER ( ; , true ) ;
Code	Context rhsContext = Context.OTHER ( ; , true ) ;
Distance : 4

82
Tree	protected Context rhsContext = Context.OTHER ;
Code	protected Context rhsContext = Context.OTHER ;
Distance : 5

83
Tree	Context context = STRING_CONSTANT ;
Code	Context context = STRING_CONSTANT ;
Distance : 5

84
Tree	public Context rhsContext = Context.OTHER ;
Code	public Context rhsContext = Context.OTHER ;
Distance : 5

85
Tree	Context rhsContext = Context.OTHER ; block
Code	Context rhsContext = Context.OTHER ; block
Distance : 5

86
Tree	boolean rhsContext ;
Code	boolean rhsContext ;
Distance : 6

87
Tree	Context rhsContext = STRING_CONSTANT ;
Code	Context rhsContext = STRING_CONSTANT ;
Distance : 4

88
Tree	Context rhsContext = rhsContext . Context.OTHER ( context , Context.OTHER ) ;
Code	Context rhsContext = rhsContext . Context.OTHER ( context , Context.OTHER ) ;
Distance : 5

89
Tree	Context rhsContext ; block
Code	Context rhsContext ; block
Distance : 6

90
Tree	Context rhsContext = NUMBER_CONSTANT ;
Code	Context rhsContext = NUMBER_CONSTANT ;
Distance : 4

91
Tree	Context Context [] = rhsContext ; block
Code	Context Context [] = rhsContext ; block
Distance : 7

92
Tree	Context rhsContext = true ;
Code	Context rhsContext = true ;
Distance : 4

93
Tree	Context rhsContext = Context.OTHER ; block
Code	Context rhsContext = Context.OTHER ; block
Distance : 5

94
Tree	Context context = rhsContext ;
Code	Context context = rhsContext ;
Distance : 5

95
Tree	Context rhsContext = context . Context.OTHER () ;
Code	Context rhsContext = context . Context.OTHER () ;
Distance : 4

96
Tree	context context = Context.OTHER ;
Code	context context = Context.OTHER ;
Distance : 6

97
Tree	Context rhsContext = Context.OTHER ( ; , false ) ;
Code	Context rhsContext = Context.OTHER ( ; , false ) ;
Distance : 4

98
Tree	Context context = Context.OTHER ( ; ) ;
Code	Context context = Context.OTHER ( ; ) ;
Distance : 3

99
Tree	Context context = NUMBER_CONSTANT ;
Code	Context context = NUMBER_CONSTANT ;
Distance : 5

100
Tree	Context [] context = Context.OTHER ;
Code	Context [] context = Context.OTHER ;
Distance : 6

101
Tree	Context context = context ? Context.OTHER : Context.OTHER ;
Code	Context context = context ? Context.OTHER : Context.OTHER ;
Distance : 6

102
Tree	Context rhsContext ; of
Code	Context rhsContext ; of
Distance : 6

103
Tree	Context context = null ;
Code	Context context = null ;
Distance : 5

104
Tree	Context Context [] = rhsContext ; of
Code	Context Context [] = rhsContext ; of
Distance : 7

105
Tree	Context [] rhsContext = Context.OTHER ;
Code	Context [] rhsContext = Context.OTHER ;
Distance : 5

106
Tree	Context Context [] = rhsContext ;
Code	Context Context [] = rhsContext ;
Distance : 6

107
Tree	Context context = false ;
Code	Context context = false ;
Distance : 5

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
{ return topType ; }
-------------------------------------------------------------------------------
Child code is: 
{ return topType . isAllType () ? getNativeType ( ARRAY_TYPE ) : topType ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (800{val=topType}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (32 (800{val=topType}) (235{val=.}) (802{val=isAllType}) (216{val=()})) (233{val=?}) (32 (802{val=getNativeType}) (214{val=(}) (800{val=ARRAY_TYPE}) (215{val=)})) (226{val=:}) (800{val=topType})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/111/parent/src_com_google_javascript_jscomp_type_ClosureReverseAbstractInterpreter.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 152
Wrong
========================================================================
False

0
Tree	{ return true ; }
Code	{ return true ; }
Distance : 11

1
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 11

2
Tree	{ return ( topType ) ARRAY_TYPE . isAllType () ; }
Code	{ return ( topType ) ARRAY_TYPE . isAllType () ; }
Distance : 10

3
Tree	{ return ( ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ) ; }
Distance : 7

4
Tree	{ return ( ARRAY_TYPE . isAllType () ? null : topType ) ; }
Code	{ return ( ARRAY_TYPE . isAllType () ? null : topType ) ; }
Distance : 7

5
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . getNativeType () ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . getNativeType () ; }
Distance : 10

6
Tree	final final boolean isAllType () { return ARRAY_TYPE ; }
Code	final final boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

7
Tree	{ return ( topType ) isAllType () ; }
Code	{ return ( topType ) isAllType () ; }
Distance : 9

8
Tree	{ return ( ARRAY_TYPE ) isAllType () ; }
Code	{ return ( ARRAY_TYPE ) isAllType () ; }
Distance : 8

9
Tree	{ return getNativeType () ? null : ARRAY_TYPE ; }
Code	{ return getNativeType () ? null : ARRAY_TYPE ; }
Distance : 8

10
Tree	{ return super . getNativeType () ; }
Code	{ return super . getNativeType () ; }
Distance : 9

11
Tree	{ return isAllType () ? null : ARRAY_TYPE ; }
Code	{ return isAllType () ? null : ARRAY_TYPE ; }
Distance : 7

12
Tree	{ this . ARRAY_TYPE = current.parent ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = current.parent ; return ARRAY_TYPE ; }
Distance : 10

13
Tree	{ return topType . isAllType () ? null : ARRAY_TYPE ; }
Code	{ return topType . isAllType () ? null : ARRAY_TYPE ; }
Distance : 5

14
Tree	{ this . ARRAY_TYPE = EvalMode.NORMAL ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = EvalMode.NORMAL ; return ARRAY_TYPE ; }
Distance : 10

15
Tree	{ super . isAllType () ; }
Code	{ super . isAllType () ; }
Distance : 9

16
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 11

17
Tree	{ return new ModulePath ( this . ARRAY_TYPE ) ; }
Code	{ return new ModulePath ( this . ARRAY_TYPE ) ; }
Distance : 9

18
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 11

19
Tree	{ return STRING_CONSTANT + isAllType () ; }
Code	{ return STRING_CONSTANT + isAllType () ; }
Distance : 9

20
Tree	{ return ! isAllType () ; }
Code	{ return ! isAllType () ; }
Distance : 9

21
Tree	{ return new ModulePath ( this ) ; }
Code	{ return new ModulePath ( this ) ; }
Distance : 9

22
Tree	{ return false ; }
Code	{ return false ; }
Distance : 11

23
Tree	{ return Format.TYPED ; }
Code	{ return Format.TYPED ; }
Distance : 11

24
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 11

25
Tree	{ return com.google.protobuf.GeneratedMessageV3 ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 ; }
Distance : 11

26
Tree	{ return null ; }
Code	{ return null ; }
Distance : 11

27
Tree	{ return ! this . topType ; }
Code	{ return ! this . topType ; }
Distance : 10

28
Tree	final final boolean getNativeType () { return ARRAY_TYPE ; }
Code	final final boolean getNativeType () { return ARRAY_TYPE ; }
Distance : 11

29
Tree	{ return topType . getNativeType () ; }
Code	{ return topType . getNativeType () ; }
Distance : 8

30
Tree	{ return NUMBER_CONSTANT ; } :
Code	{ return NUMBER_CONSTANT ; } :
Distance : 12

31
Tree	{ return STRING_CONSTANT ; } TypeInferenceMode.NEITHER
Code	{ return STRING_CONSTANT ; } TypeInferenceMode.NEITHER
Distance : 12

32
Tree	getNativeType () ; of
Code	getNativeType () ; of
Distance : 13

33
Tree	{ return ! isAllType () ; } block
Code	{ return ! isAllType () ; } block
Distance : 10

34
Tree	{ return ! isAllType () ; } of
Code	{ return ! isAllType () ; } of
Distance : 10

35
Tree	{ return STRING_CONSTANT ; } super
Code	{ return STRING_CONSTANT ; } super
Distance : 12

36
Tree	{ return ARRAY_TYPE ? ARRAY_TYPE . getNativeType () : NUMBER_CONSTANT ; }
Code	{ return ARRAY_TYPE ? ARRAY_TYPE . getNativeType () : NUMBER_CONSTANT ; }
Distance : 9

37
Tree	{ return ARRAY_TYPE ? ARRAY_TYPE . isAllType () : NUMBER_CONSTANT ; }
Code	{ return ARRAY_TYPE ? ARRAY_TYPE . isAllType () : NUMBER_CONSTANT ; }
Distance : 9

38
Tree	{ return ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ; }
Distance : 6

39
Tree	{ return isAllType () ; } block
Code	{ return isAllType () ; } block
Distance : 10

40
Tree	{ return topType . isAllType ( ARRAY_TYPE ) ; }
Code	{ return topType . isAllType ( ARRAY_TYPE ) ; }
Distance : 5

41
Tree	{ return ARRAY_TYPE ; } of
Code	{ return ARRAY_TYPE ; } of
Distance : 11

42
Tree	{ return ARRAY_TYPE ; } block
Code	{ return ARRAY_TYPE ; } block
Distance : 11

43
Tree	isAllType () ;
Code	isAllType () ;
Distance : 12

44
Tree	{ return isAllType ( STRING_CONSTANT ) ; }
Code	{ return isAllType ( STRING_CONSTANT ) ; }
Distance : 8

45
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

46
Tree	{ return this . ARRAY_TYPE ; } block
Code	{ return this . ARRAY_TYPE ; } block
Distance : 10

47
Tree	{ return ! this . ARRAY_TYPE ; }
Code	{ return ! this . ARRAY_TYPE ; }
Distance : 10

48
Tree	{ return new RescopeGlobalSymbols ( this . ARRAY_TYPE ) ; }
Code	{ return new RescopeGlobalSymbols ( this . ARRAY_TYPE ) ; }
Distance : 9

49
Tree	{ return ! getNativeType () ; }
Code	{ return ! getNativeType () ; }
Distance : 10

50
Tree	{ return new ContextualRenameInverter ( this . ARRAY_TYPE ) ; }
Code	{ return new ContextualRenameInverter ( this . ARRAY_TYPE ) ; }
Distance : 9

51
Tree	{ return isAllType () ; } of
Code	{ return isAllType () ; } of
Distance : 10

52
Tree	{ return this . ARRAY_TYPE ; } of
Code	{ return this . ARRAY_TYPE ; } of
Distance : 10

53
Tree	{ return new RescopeGlobalSymbols < ARRAY_TYPE > () ; }
Code	{ return new RescopeGlobalSymbols < ARRAY_TYPE > () ; }
Distance : 10

54
Tree	{ return new CrossModuleCodeMotion < ARRAY_TYPE > () ; }
Code	{ return new CrossModuleCodeMotion < ARRAY_TYPE > () ; }
Distance : 10

55
Tree	{ return ( ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ) ; }
Distance : 6

56
Tree	super . isAllType () ; of
Code	super . isAllType () ; of
Distance : 11

57
Tree	getNativeType () ; block
Code	getNativeType () ; block
Distance : 13

58
Tree	final boolean getNativeType () { return ARRAY_TYPE ; }
Code	final boolean getNativeType () { return ARRAY_TYPE ; }
Distance : 11

59
Tree	{ return this . topType . getNativeType () ; }
Code	{ return this . topType . getNativeType () ; }
Distance : 9

60
Tree	public boolean isAllType () { return this . ARRAY_TYPE ; }
Code	public boolean isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

61
Tree	{ return ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Distance : 6

62
Tree	final int isAllType () { return this . ARRAY_TYPE ; }
Code	final int isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

63
Tree	{ return getNativeType () ; }
Code	{ return getNativeType () ; }
Distance : 10

64
Tree	{ super . isAllType () ; } block
Code	{ super . isAllType () ; } block
Distance : 10

65
Tree	{ return true ; } of
Code	{ return true ; } of
Distance : 12

66
Tree	getNativeType () ;
Code	getNativeType () ;
Distance : 13

67
Tree	{ return this . topType ; }
Code	{ return this . topType ; }
Distance : 9

68
Tree	{ return super . isAllType () ; } of
Code	{ return super . isAllType () ; } of
Distance : 9

69
Tree	{ super . isAllType () ; } of
Code	{ super . isAllType () ; } of
Distance : 10

70
Tree	{ return ! this . ARRAY_TYPE ; } of
Code	{ return ! this . ARRAY_TYPE ; } of
Distance : 11

71
Tree	{ return ( topType ) isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) isAllType ( ARRAY_TYPE ) ; }
Distance : 7

72
Tree	{ return STRING_CONSTANT + isAllType () ; } block
Code	{ return STRING_CONSTANT + isAllType () ; } block
Distance : 10

73
Tree	final boolean getNativeType () { return this . ARRAY_TYPE ; }
Code	final boolean getNativeType () { return this . ARRAY_TYPE ; }
Distance : 12

74
Tree	{ return getNativeType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return getNativeType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

75
Tree	{ return ( ARRAY_TYPE ) getNativeType () ; }
Code	{ return ( ARRAY_TYPE ) getNativeType () ; }
Distance : 8

76
Tree	{ return super . isAllType () ; } block
Code	{ return super . isAllType () ; } block
Distance : 9

77
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } of
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } of
Distance : 10

78
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 11

79
Tree	public final boolean isAllType () { return ARRAY_TYPE ; }
Code	public final boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

80
Tree	super . getNativeType () ;
Code	super . getNativeType () ;
Distance : 12

81
Tree	{ return STRING_CONSTANT + isAllType () ; } of
Code	{ return STRING_CONSTANT + isAllType () ; } of
Distance : 10

82
Tree	{ return this . ARRAY_TYPE . isAllType () ; }
Code	{ return this . ARRAY_TYPE . isAllType () ; }
Distance : 9

83
Tree	final boolean isAllType () { return ARRAY_TYPE ; }
Code	final boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

84
Tree	{ return ! this . ARRAY_TYPE ; } block
Code	{ return ! this . ARRAY_TYPE ; } block
Distance : 11

85
Tree	{ return true ; } block
Code	{ return true ; } block
Distance : 12

86
Tree	{ return STRING_CONSTANT + getNativeType () ; }
Code	{ return STRING_CONSTANT + getNativeType () ; }
Distance : 10

87
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

88
Tree	{ return ARRAY_TYPE . isAllType () ; }
Code	{ return ARRAY_TYPE . isAllType () ; }
Distance : 8

89
Tree	{ return STRING_CONSTANT ; } :
Code	{ return STRING_CONSTANT ; } :
Distance : 12

90
Tree	{ return Format.PRETTY ; }
Code	{ return Format.PRETTY ; }
Distance : 11

91
Tree	{ super . getNativeType () ; }
Code	{ super . getNativeType () ; }
Distance : 10

92
Tree	{ return EvalMode.NORMAL ; }
Code	{ return EvalMode.NORMAL ; }
Distance : 11

93
Tree	{ return new ModulePath < ARRAY_TYPE > () ; }
Code	{ return new ModulePath < ARRAY_TYPE > () ; }
Distance : 10

94
Tree	{ return ( ARRAY_TYPE ) topType . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) topType . isAllType ( ARRAY_TYPE ) ; }
Distance : 8

95
Tree	{ return isAllType () ? null : topType ; }
Code	{ return isAllType () ? null : topType ; }
Distance : 6

96
Tree	{ return ARRAY_TYPE . getNativeType () ; }
Code	{ return ARRAY_TYPE . getNativeType () ; }
Distance : 9

97
Tree	{ return ( ARRAY_TYPE ) isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) isAllType ( ARRAY_TYPE ) ; }
Distance : 8

98
Tree	{ return topType . isAllType () ; }
Code	{ return topType . isAllType () ; }
Distance : 7

99
Tree	{ return super . isAllType () ; }
Code	{ return super . isAllType () ; }
Distance : 8

100
Tree	{ return new Es7RewriteExponentialOperator ( this ) ; }
Code	{ return new Es7RewriteExponentialOperator ( this ) ; }
Distance : 9

101
Tree	{ return new Es7RewriteExponentialOperator ( this . ARRAY_TYPE ) ; }
Code	{ return new Es7RewriteExponentialOperator ( this . ARRAY_TYPE ) ; }
Distance : 9

102
Tree	{ return getNativeType () ? null : topType ; }
Code	{ return getNativeType () ? null : topType ; }
Distance : 7

103
Tree	{ this . ARRAY_TYPE = PropertyCollapseLevel.NONE ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = PropertyCollapseLevel.NONE ; return ARRAY_TYPE ; }
Distance : 10

104
Tree	{ return this . ARRAY_TYPE . getNativeType () ; }
Code	{ return this . ARRAY_TYPE . getNativeType () ; }
Distance : 9

105
Tree	{ return new Es7RewriteExponentialOperator < ARRAY_TYPE > () ; }
Code	{ return new Es7RewriteExponentialOperator < ARRAY_TYPE > () ; }
Distance : 10

106
Tree	{ return new RescopeGlobalSymbols ( this ) ; }
Code	{ return new RescopeGlobalSymbols ( this ) ; }
Distance : 9

107
Tree	{ return ( topType ) getNativeType () ; }
Code	{ return ( topType ) getNativeType () ; }
Distance : 9

108
Tree	{ return ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ; }
Distance : 7

109
Tree	{ this . ARRAY_TYPE = ScopeType.EXEC_CONTEXT ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = ScopeType.EXEC_CONTEXT ; return ARRAY_TYPE ; }
Distance : 10

110
Tree	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

111
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType () ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType () ; }
Distance : 10

112
Tree	{ return isAllType ( STRING_CONSTANT ) ; } block
Code	{ return isAllType ( STRING_CONSTANT ) ; } block
Distance : 9

113
Tree	{ return new ModulePath ( ARRAY_TYPE ) ; }
Code	{ return new ModulePath ( ARRAY_TYPE ) ; }
Distance : 8

114
Tree	{ return new Es7RewriteExponentialOperator ( ARRAY_TYPE ) ; }
Code	{ return new Es7RewriteExponentialOperator ( ARRAY_TYPE ) ; }
Distance : 8

115
Tree	{ return getNativeType ( STRING_CONSTANT ) ; }
Code	{ return getNativeType ( STRING_CONSTANT ) ; }
Distance : 8

116
Tree	{ return new ContextualRenameInverter ( this ) ; }
Code	{ return new ContextualRenameInverter ( this ) ; }
Distance : 9

117
Tree	{ return new RescopeGlobalSymbols ( ARRAY_TYPE ) ; }
Code	{ return new RescopeGlobalSymbols ( ARRAY_TYPE ) ; }
Distance : 8

118
Tree	{ return new ContextualRenameInverter ( ARRAY_TYPE ) ; }
Code	{ return new ContextualRenameInverter ( ARRAY_TYPE ) ; }
Distance : 8

119
Tree	{ return this . topType . isAllType () ; }
Code	{ return this . topType . isAllType () ; }
Distance : 9

120
Tree	{ return ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE ; }
Distance : 10

121
Tree	{ return this . ARRAY_TYPE ; }
Code	{ return this . ARRAY_TYPE ; }
Distance : 9

122
Tree	{ return isAllType ( STRING_CONSTANT ) ; } of
Code	{ return isAllType ( STRING_CONSTANT ) ; } of
Distance : 9

123
Tree	{ return topType ; }
Code	{ return topType ; }
Distance : 10

124
Tree	{ return NUMBER_CONSTANT ; } super
Code	{ return NUMBER_CONSTANT ; } super
Distance : 12

125
Tree	{ return ( topType ) getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

126
Tree	{ return ARRAY_TYPE ? EvalMode.EVAL : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? EvalMode.EVAL : EvalMode.NORMAL ; }
Distance : 9

127
Tree	{ return isAllType () ; }
Code	{ return isAllType () ; }
Distance : 9

128
Tree	{ return ARRAY_TYPE ? EvalMode.NORMAL : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? EvalMode.NORMAL : EvalMode.NORMAL ; }
Distance : 9

129
Tree	{ return ARRAY_TYPE ? MatchResult.LOOSE_MATCH : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? MatchResult.LOOSE_MATCH : EvalMode.NORMAL ; }
Distance : 9

130
Tree	{ return ARRAY_TYPE ? ScopeType.EXEC_CONTEXT : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? ScopeType.EXEC_CONTEXT : EvalMode.NORMAL ; }
Distance : 9

131
Tree	{ return topType . getNativeType ( ARRAY_TYPE ) ; }
Code	{ return topType . getNativeType ( ARRAY_TYPE ) ; }
Distance : 5

132
Tree	{ return ( topType ) ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Distance : 8

133
Tree	public boolean isAllType () { return ARRAY_TYPE ; }
Code	public boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

134
Tree	final int isAllType () { return ARRAY_TYPE ; }
Code	final int isAllType () { return ARRAY_TYPE ; }
Distance : 10

135
Tree	final boolean isAllType () { return this . ARRAY_TYPE ; }
Code	final boolean isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

136
Tree	{ return ARRAY_TYPE ; } of
Code	{ return ARRAY_TYPE ; } of
Distance : 11

137
Tree	{ return NUMBER_CONSTANT ; } TypeInferenceMode.NEITHER
Code	{ return NUMBER_CONSTANT ; } TypeInferenceMode.NEITHER
Distance : 12

138
Tree	{ return ARRAY_TYPE ; } block
Code	{ return ARRAY_TYPE ; } block
Distance : 11

139
Tree	{ return ( topType . isAllType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( topType . isAllType () ? null : ARRAY_TYPE ) ; }
Distance : 5

140
Tree	{ return topType ? ARRAY_TYPE . getNativeType () : NUMBER_CONSTANT ; }
Code	{ return topType ? ARRAY_TYPE . getNativeType () : NUMBER_CONSTANT ; }
Distance : 8

141
Tree	{ return topType ? ARRAY_TYPE . isAllType () : NUMBER_CONSTANT ; }
Code	{ return topType ? ARRAY_TYPE . isAllType () : NUMBER_CONSTANT ; }
Distance : 8

142
Tree	{ return ARRAY_TYPE . isAllType () ? null : topType ; }
Code	{ return ARRAY_TYPE . isAllType () ? null : topType ; }
Distance : 5

143
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Distance : 8

144
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } block
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } block
Distance : 10

145
Tree	{ return topType ; }
Code	{ return topType ; }
Distance : 10

146
Tree	{ return ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE ; }
Distance : 10

147
Tree	super . isAllType () ;
Code	super . isAllType () ;
Distance : 11

148
Tree	super . isAllType () ; block
Code	super . isAllType () ; block
Distance : 11

149
Tree	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Distance : 6

150
Tree	{ return ( ARRAY_TYPE ) topType . isAllType () ; }
Code	{ return ( ARRAY_TYPE ) topType . isAllType () ; }
Distance : 10

151
Tree	final final boolean isAllType () { return topType ; }
Code	final final boolean isAllType () { return topType ; }
Distance : 10

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
{ if ( assignLhsChild != null ) { return true ; } return false ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( assignLhsChild != null ) { return true ; } return parent != null && NodeUtil . isGet ( parent ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (27 (27 (800{val=parent}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isGet}) (214{val=(}) (800{val=parent}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/100/parent/src_com_google_javascript_jscomp_CheckGlobalThis.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 132
Wrong
========================================================================
False

0
Tree	{ if ( NodeUtil != null ) { return true ; } return false ; }
Code	{ if ( NodeUtil != null ) { return true ; } return false ; }
Distance : 11

1
Tree	{ if ( parent != null ) { return true ; } return false ; }
Code	{ if ( parent != null ) { return true ; } return false ; }
Distance : 11

2
Tree	{ if ( NodeUtil != null ) { return true ; } return true ; }
Code	{ if ( NodeUtil != null ) { return true ; } return true ; }
Distance : 11

3
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Distance : 10

4
Tree	{ if ( ! isGet ( parent , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , true ) ) { return true ; } return false ; }
Distance : 19

5
Tree	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return false ; }
Distance : 17

6
Tree	{ if ( ! parent . isGet ( parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , false ) ) { return true ; } return false ; }
Distance : 19

7
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } else }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } else }
Distance : 19

8
Tree	{ if ( ! parent . isGet ( parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , true ) ) { return true ; } return false ; }
Distance : 19

9
Tree	{ if ( ! parent . isGet ( parent , inheritedPropDef.methodType ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , inheritedPropDef.methodType ) ) { return true ; } return false ; }
Distance : 19

10
Tree	{ if ( ! NodeUtil ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 7

11
Tree	{ if ( NodeUtil != null ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 5

12
Tree	{ if ( ! isGet ( parent , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , parent ) ) { return true ; } return false ; }
Distance : 19

13
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return true ; }
Distance : 17

14
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return true ; }
Distance : 16

15
Tree	{ if ( ! parent . isGet ( parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , parent ) ) { return true ; } return false ; }
Distance : 19

16
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 11

17
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 11

18
Tree	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 7

19
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return false ; }
Distance : 16

20
Tree	{ if ( parent != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( parent != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 5

21
Tree	{ if ( ! isGet ( assignLhsChild , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , true ) ) { return true ; } return false ; }
Distance : 18

22
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 7

23
Tree	{ if ( ! parent ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! parent ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

24
Tree	{ if ( ! assignLhsChild . isGet ( parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , parent ) ) { return true ; } return false ; }
Distance : 18

25
Tree	{ if ( NodeUtil . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( NodeUtil . isGet ( parent ) ) { return true ; } return false ; }
Distance : 16

26
Tree	{ if ( ! parent ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! parent ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 7

27
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , true ) ) { return true ; } return false ; }
Distance : 20

28
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return false ; }
Distance : 18

29
Tree	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return true ; } return false ; }
Distance : 18

30
Tree	{ if ( ! parent . isGet ( parent , false ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( parent , false ) ) { return true ; } return true ; }
Distance : 19

31
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } else }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } else }
Distance : 18

32
Tree	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 4

33
Tree	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } else }
Code	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } else }
Distance : 19

34
Tree	{ if ( ! parent . isGet ( parent , parent ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( parent , parent ) ) { return true ; } return true ; }
Distance : 19

35
Tree	{ if ( ! parent . isGet ( parent , PropAccess.INCLUDE_STRAY_PROPS ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , PropAccess.INCLUDE_STRAY_PROPS ) ) { return true ; } return false ; }
Distance : 19

36
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return true ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return true ; }
Distance : 17

37
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return true ; }
Distance : 15

38
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return false ; }
Distance : 17

39
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return false ; }
Distance : 17

40
Tree	{ if ( NodeUtil != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 5

41
Tree	{ if ( ! NodeUtil ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil ) { return true ; } return false ; }
Distance : 13

42
Tree	{ if ( ! isGet ( NodeUtil , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent , true ) ) { return true ; } return false ; }
Distance : 19

43
Tree	{ if ( ! NodeUtil ) { return true ; } return true ; }
Code	{ if ( ! NodeUtil ) { return true ; } return true ; }
Distance : 13

44
Tree	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 7

45
Tree	{ if ( ! isGet ( this , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , parent ) ) { return true ; } return false ; }
Distance : 17

46
Tree	{ if ( ! parent ) { return true ; } return false ; }
Code	{ if ( ! parent ) { return true ; } return false ; }
Distance : 13

47
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 9

48
Tree	{ if ( ! assignLhsChild ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return false ; }
Distance : 13

49
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return true ; }
Distance : 17

50
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Distance : 10

51
Tree	{ if ( ! isGet ( assignLhsChild , parent , true ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , true ) ) { return true ; } return true ; }
Distance : 18

52
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 12

53
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Distance : 22

54
Tree	{ if ( ! isGet ( NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil ) ) { return true ; } return false ; }
Distance : 15

55
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Distance : 9

56
Tree	{ if ( ! isGet ( parent , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 23

57
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 7

58
Tree	{ if ( ! NodeUtil . isGet ( parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( parent , parent ) ) { return true ; } return false ; }
Distance : 19

59
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return false ; }
Distance : 17

60
Tree	{ if ( NodeUtil . isGet ( != ) ) { return true ; } return true ; }
Code	{ if ( NodeUtil . isGet ( != ) ) { return true ; } return true ; }
Distance : 15

61
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , true ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , true ) ) { return true ; } return true ; }
Distance : 20

62
Tree	{ if ( ! isGet ( NodeUtil , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 23

63
Tree	{ if ( ! isGet ( NodeUtil , parent , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent , parent , true ) ) { return true ; } return false ; }
Distance : 20

64
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

65
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 15

66
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 6

67
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Distance : 10

68
Tree	{ if ( ! isGet ( parent , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 21

69
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

70
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Distance : 13

71
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Distance : 12

72
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 11

73
Tree	{ if ( ! isGet ( this , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , NodeUtil ) ) { return true ; } return false ; }
Distance : 17

74
Tree	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 11

75
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

76
Tree	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( != ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( != ) ) ) { return true ; } return false ; }
Distance : 21

77
Tree	{ if ( assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 8

78
Tree	{ if ( ! this . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( parent ) ) { return true ; } return false ; }
Distance : 17

79
Tree	{ if ( ! isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent ) ) { return true ; } return false ; }
Distance : 15

80
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 13

81
Tree	{ if ( NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

82
Tree	{ if ( ! parent ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Code	{ if ( ! parent ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Distance : 11

83
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Distance : 8

84
Tree	{ if ( parent ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( parent ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

85
Tree	{ if ( ! parent ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! parent ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 9

86
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Distance : 10

87
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 6

88
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Distance : 8

89
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 10

90
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 16

91
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Distance : 11

92
Tree	{ if ( ! this . isGet ( NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( NodeUtil ) ) { return true ; } return false ; }
Distance : 17

93
Tree	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Distance : 21

94
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 22

95
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Distance : 11

96
Tree	{ if ( ! parent . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Distance : 24

97
Tree	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 21

98
Tree	{ if ( ! assignLhsChild . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Distance : 23

99
Tree	{ if ( ! parent ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! parent ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Distance : 10

100
Tree	{ if ( NodeUtil ) { return true ; } return isGet ( false , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil ) { return true ; } return isGet ( false , parent . isGet ( parent ) ) ; }
Distance : 9

101
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Distance : 10

102
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 6

103
Tree	{ if ( ! NodeUtil . isGet ( NodeUtil , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( NodeUtil , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Distance : 23

104
Tree	{ if ( ! NodeUtil . isGet ( parent , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( parent , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Distance : 23

105
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 12

106
Tree	{ if ( NodeUtil != null ) { return true ; } return true ; }
Code	{ if ( NodeUtil != null ) { return true ; } return true ; }
Distance : 11

107
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Distance : 14

108
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Distance : 10

109
Tree	{ if ( ! isGet ( NodeUtil , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent , parent ) ) { return true ; } return false ; }
Distance : 19

110
Tree	{ if ( ! parent . isGet ( parent , TernaryValue.TRUE ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , TernaryValue.TRUE ) ) { return true ; } return false ; }
Distance : 19

111
Tree	{ if ( ! parent . isGet ( parent , that.cache.functionScope ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , that.cache.functionScope ) ) { return true ; } return false ; }
Distance : 19

112
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 12

113
Tree	{ if ( NodeUtil != null ) { return true ; } return false ; }
Code	{ if ( NodeUtil != null ) { return true ; } return false ; }
Distance : 11

114
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return true ; }
Distance : 18

115
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 10

116
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

117
Tree	{ if ( parent != null ) { return true ; } return false ; }
Code	{ if ( parent != null ) { return true ; } return false ; }
Distance : 11

118
Tree	{ if ( ! isGet ( parent , parent , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , parent , true ) ) { return true ; } return false ; }
Distance : 20

119
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 10

120
Tree	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

121
Tree	{ if ( ! NodeUtil . isGet ( != ) ) { return true ; } else }
Code	{ if ( ! NodeUtil . isGet ( != ) ) { return true ; } else }
Distance : 18

122
Tree	{ if ( parent . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( parent . isGet ( parent ) ) { return true ; } return false ; }
Distance : 16

123
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 11

124
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 13

125
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 13

126
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 11

127
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , parent . isGet ( assignLhsChild ) ) ; }
Distance : 9

128
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , parent . isGet ( parent ) ) ; }
Distance : 11

129
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , assignLhsChild . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , assignLhsChild . isGet ( parent ) ) ; }
Distance : 11

130
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , assignLhsChild . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , assignLhsChild . isGet ( parent ) ) ; }
Distance : 11

131
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , parent . isGet ( parent ) ) ; }
Distance : 11

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/93/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 160
Wrong
========================================================================
False

0
Tree	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

1
Tree	int VisibleForTesting [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int VisibleForTesting [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

2
Tree	int exitCodeValue [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int exitCodeValue [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

3
Tree	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

4
Tree	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

5
Tree	int namespace = namespace . indexOf ( false , namespace ) ;
Code	int namespace = namespace . indexOf ( false , namespace ) ;
Distance : 5

6
Tree	int namespace = namespace . indexOf ( namespace , null ) ;
Code	int namespace = namespace . indexOf ( namespace , null ) ;
Distance : 5

7
Tree	byte indexOfDot = NUMBER_CONSTANT ;
Code	byte indexOfDot = NUMBER_CONSTANT ;
Distance : 7

8
Tree	int namespace = true ;
Code	int namespace = true ;
Distance : 7

9
Tree	int indexOfDot = CHAR_CONS ;
Code	int indexOfDot = CHAR_CONS ;
Distance : 5

10
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , RandomNameGenerator.NONFIRST_CHAR ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , RandomNameGenerator.NONFIRST_CHAR ) ;
Distance : 9

11
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

12
Tree	int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

13
Tree	int namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

14
Tree	int ImmutableMultiset.Builder [] = namespace ( namespace ) ;
Code	int ImmutableMultiset.Builder [] = namespace ( namespace ) ;
Distance : 5

15
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

16
Tree	int VisibleForTesting [] = indexOf () ;
Code	int VisibleForTesting [] = indexOf () ;
Distance : 8

17
Tree	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

18
Tree	int indexOfDot = false ;
Code	int indexOfDot = false ;
Distance : 6

19
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

20
Tree	int namespace = null ;
Code	int namespace = null ;
Distance : 7

21
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

22
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

23
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 4

24
Tree	int namespace = this . namespace ;
Code	int namespace = this . namespace ;
Distance : 6

25
Tree	abstract int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

26
Tree	int indexOfDot = this . namespace ;
Code	int indexOfDot = this . namespace ;
Distance : 5

27
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , options.inlineLocalFunctions ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , options.inlineLocalFunctions ) ;
Distance : 9

28
Tree	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 8

29
Tree	int ImmutableMultiset.Builder [] = indexOf () ;
Code	int ImmutableMultiset.Builder [] = indexOf () ;
Distance : 8

30
Tree	byte indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	byte indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

31
Tree	int exitCodeValue [] = indexOf () ;
Code	int exitCodeValue [] = indexOf () ;
Distance : 8

32
Tree	int namespace = indexOf ( NUMBER_CONSTANT , false ) ;
Code	int namespace = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 6

33
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 2

34
Tree	byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

35
Tree	byte namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	byte namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 8

36
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

37
Tree	byte indexOfDot = this . namespace ;
Code	byte indexOfDot = this . namespace ;
Distance : 6

38
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

39
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

40
Tree	RawNominalType namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	RawNominalType namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

41
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

42
Tree	byte namespace = NUMBER_CONSTANT ;
Code	byte namespace = NUMBER_CONSTANT ;
Distance : 8

43
Tree	int namespace = PeepholeFoldConstants ;
Code	int namespace = PeepholeFoldConstants ;
Distance : 7

44
Tree	int indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	int indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 5

45
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

46
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Distance : 13

47
Tree	int VisibleForTesting [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int VisibleForTesting [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

48
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf ) ;
Distance : 12

49
Tree	int namespace = CHAR_CONS ;
Code	int namespace = CHAR_CONS ;
Distance : 6

50
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

51
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf , true ) ;
Distance : 14

52
Tree	byte namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Code	byte namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 4

53
Tree	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 14

54
Tree	int ImmutableMultiset.Builder [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int ImmutableMultiset.Builder [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

55
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , true ) ;
Distance : 14

56
Tree	abstract int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

57
Tree	int namespace = indexOf ( NUMBER_CONSTANT , true ) ;
Code	int namespace = indexOf ( NUMBER_CONSTANT , true ) ;
Distance : 6

58
Tree	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 10

59
Tree	int namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Code	int namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 9

60
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT , true ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT , true ) ;
Distance : 5

61
Tree	byte namespace = namespace . indexOf ( namespace , null ) ;
Code	byte namespace = namespace . indexOf ( namespace , null ) ;
Distance : 6

62
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

63
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

64
Tree	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

65
Tree	int ImmutableMultiset.Builder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int ImmutableMultiset.Builder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

66
Tree	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 14

67
Tree	int RandomNameGenerator.FIRST_CHAR [] = namespace ( namespace ) ;
Code	int RandomNameGenerator.FIRST_CHAR [] = namespace ( namespace ) ;
Distance : 5

68
Tree	abstract int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

69
Tree	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

70
Tree	int indexOfDot = RandomNameGenerator.FIRST_CHAR ;
Code	int indexOfDot = RandomNameGenerator.FIRST_CHAR ;
Distance : 6

71
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

72
Tree	int RandomNameGenerator.FIRST_CHAR [] = indexOf () ;
Code	int RandomNameGenerator.FIRST_CHAR [] = indexOf () ;
Distance : 8

73
Tree	int namespace = RandomNameGenerator.FIRST_CHAR ;
Code	int namespace = RandomNameGenerator.FIRST_CHAR ;
Distance : 7

74
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

75
Tree	int indexOfDot = PeepholeFoldConstants ;
Code	int indexOfDot = PeepholeFoldConstants ;
Distance : 6

76
Tree	int exitCodeValue [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int exitCodeValue [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

77
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , RandomNameGenerator.FIRST_CHAR ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , RandomNameGenerator.FIRST_CHAR ) ;
Distance : 12

78
Tree	final int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

79
Tree	final int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	final int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

80
Tree	int indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 10

81
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , SubtypingMode.NORMAL ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , SubtypingMode.NORMAL ) ;
Distance : 9

82
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

83
Tree	final int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

84
Tree	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

85
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , ResolutionMode.BROWSER ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , ResolutionMode.BROWSER ) ;
Distance : 12

86
Tree	int namespace = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Code	int namespace = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Distance : 4

87
Tree	int VisibleForTesting [] = namespace ( namespace ) ;
Code	int VisibleForTesting [] = namespace ( namespace ) ;
Distance : 5

88
Tree	int indexOfDot = null ;
Code	int indexOfDot = null ;
Distance : 6

89
Tree	int indexOfDot = TypeTransformation . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = TypeTransformation . indexOf ( STRING_CONSTANT ) ;
Distance : 3

90
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

91
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

92
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 14

93
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

94
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

95
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

96
Tree	int namespace = namespace . indexOf ( true , namespace ) ;
Code	int namespace = namespace . indexOf ( true , namespace ) ;
Distance : 5

97
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

98
Tree	int exitCodeValue [] = namespace ( namespace ) ;
Code	int exitCodeValue [] = namespace ( namespace ) ;
Distance : 5

99
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , loopNode.body ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , loopNode.body ) ;
Distance : 9

100
Tree	int namespace = PeepholeFoldConstants ;
Code	int namespace = PeepholeFoldConstants ;
Distance : 7

101
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

102
Tree	byte indexOfDot ;
Code	byte indexOfDot ;
Distance : 8

103
Tree	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

104
Tree	RawNominalType indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	RawNominalType indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

105
Tree	int namespace = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

106
Tree	int namespace = false ;
Code	int namespace = false ;
Distance : 7

107
Tree	int namespace ;
Code	int namespace ;
Distance : 7

108
Tree	int indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 4

109
Tree	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

110
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Distance : 14

111
Tree	byte namespace ;
Code	byte namespace ;
Distance : 8

112
Tree	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ;
Code	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ;
Distance : 6

113
Tree	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 4

114
Tree	int indexOfDot = TypeTransformation ;
Code	int indexOfDot = TypeTransformation ;
Distance : 6

115
Tree	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

116
Tree	int namespace = NUMBER_CONSTANT ;
Code	int namespace = NUMBER_CONSTANT ;
Distance : 7

117
Tree	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

118
Tree	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 15

119
Tree	byte indexOfDot = null ;
Code	byte indexOfDot = null ;
Distance : 7

120
Tree	int indexOfDot = indexOf ( NUMBER_CONSTANT , true ) ;
Code	int indexOfDot = indexOf ( NUMBER_CONSTANT , true ) ;
Distance : 5

121
Tree	int indexOfDot = true ;
Code	int indexOfDot = true ;
Distance : 6

122
Tree	abstract indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

123
Tree	byte indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

124
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 13

125
Tree	byte namespace = indexOf ( namespace , namespace , false , null , null ) ;
Code	byte namespace = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 12

126
Tree	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 11

127
Tree	final indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

128
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.INTERFACE ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.INTERFACE ) ;
Distance : 12

129
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , true ) ;
Distance : 14

130
Tree	byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

131
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Ref.Type.PROTOTYPE_GET ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Ref.Type.PROTOTYPE_GET ) ;
Distance : 12

132
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , false ) ;
Distance : 14

133
Tree	byte indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	byte indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

134
Tree	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Code	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Distance : 14

135
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Distance : 12

136
Tree	int namespace = namespace ( namespace , namespace , CHAR_CONS , namespace ) ;
Code	int namespace = namespace ( namespace , namespace , CHAR_CONS , namespace ) ;
Distance : 8

137
Tree	int indexOfDot = namespace ( namespace , namespace , ( , namespace ) ;
Code	int indexOfDot = namespace ( namespace , namespace , ( , namespace ) ;
Distance : 7

138
Tree	abstract indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

139
Tree	abstract namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

140
Tree	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , indexOfDot , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , indexOfDot , namespace ) ;
Distance : 10

141
Tree	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , indexOfDot , namespace ) ;
Code	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , indexOfDot , namespace ) ;
Distance : 11

142
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

143
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

144
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , true ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , true ) ;
Distance : 4

145
Tree	int indexOfDot = PeepholeFoldConstants ;
Code	int indexOfDot = PeepholeFoldConstants ;
Distance : 6

146
Tree	int namespace = indexOf ( namespace , namespace , false , null , null ) ;
Code	int namespace = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

147
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

148
Tree	int indexOfDot = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Distance : 3

149
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

150
Tree	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE . indexOf ( STRING_CONSTANT ) ;
Distance : 3

151
Tree	byte indexOfDot = namespace ;
Code	byte indexOfDot = namespace ;
Distance : 6

152
Tree	byte namespace = null ;
Code	byte namespace = null ;
Distance : 8

153
Tree	int indexOfDot = namespace . indexOf ( true , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( true , namespace ) ;
Distance : 4

154
Tree	byte indexOfDot = CHAR_CONS ;
Code	byte indexOfDot = CHAR_CONS ;
Distance : 6

155
Tree	byte namespace = this . namespace ;
Code	byte namespace = this . namespace ;
Distance : 7

156
Tree	byte namespace = CHAR_CONS ;
Code	byte namespace = CHAR_CONS ;
Distance : 7

157
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity ) ;
Distance : 12

158
Tree	byte namespace = namespace ;
Code	byte namespace = namespace ;
Distance : 7

159
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE ) ;
Distance : 12

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/92/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 160
Wrong
========================================================================
False

0
Tree	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

1
Tree	int VisibleForTesting [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int VisibleForTesting [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

2
Tree	int exitCodeValue [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int exitCodeValue [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

3
Tree	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

4
Tree	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

5
Tree	int namespace = namespace . indexOf ( false , namespace ) ;
Code	int namespace = namespace . indexOf ( false , namespace ) ;
Distance : 5

6
Tree	int namespace = namespace . indexOf ( namespace , null ) ;
Code	int namespace = namespace . indexOf ( namespace , null ) ;
Distance : 5

7
Tree	byte indexOfDot = NUMBER_CONSTANT ;
Code	byte indexOfDot = NUMBER_CONSTANT ;
Distance : 7

8
Tree	int namespace = true ;
Code	int namespace = true ;
Distance : 7

9
Tree	int indexOfDot = CHAR_CONS ;
Code	int indexOfDot = CHAR_CONS ;
Distance : 5

10
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , RandomNameGenerator.NONFIRST_CHAR ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , RandomNameGenerator.NONFIRST_CHAR ) ;
Distance : 9

11
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

12
Tree	int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

13
Tree	int namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

14
Tree	int ImmutableMultiset.Builder [] = namespace ( namespace ) ;
Code	int ImmutableMultiset.Builder [] = namespace ( namespace ) ;
Distance : 5

15
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

16
Tree	int VisibleForTesting [] = indexOf () ;
Code	int VisibleForTesting [] = indexOf () ;
Distance : 8

17
Tree	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

18
Tree	int indexOfDot = false ;
Code	int indexOfDot = false ;
Distance : 6

19
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

20
Tree	int namespace = null ;
Code	int namespace = null ;
Distance : 7

21
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

22
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

23
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 4

24
Tree	int namespace = this . namespace ;
Code	int namespace = this . namespace ;
Distance : 6

25
Tree	abstract int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

26
Tree	int indexOfDot = this . namespace ;
Code	int indexOfDot = this . namespace ;
Distance : 5

27
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , options.inlineLocalFunctions ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , options.inlineLocalFunctions ) ;
Distance : 9

28
Tree	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 8

29
Tree	int ImmutableMultiset.Builder [] = indexOf () ;
Code	int ImmutableMultiset.Builder [] = indexOf () ;
Distance : 8

30
Tree	byte indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	byte indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

31
Tree	int exitCodeValue [] = indexOf () ;
Code	int exitCodeValue [] = indexOf () ;
Distance : 8

32
Tree	int namespace = indexOf ( NUMBER_CONSTANT , false ) ;
Code	int namespace = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 6

33
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 2

34
Tree	byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

35
Tree	byte namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	byte namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 8

36
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

37
Tree	byte indexOfDot = this . namespace ;
Code	byte indexOfDot = this . namespace ;
Distance : 6

38
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

39
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

40
Tree	RawNominalType namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	RawNominalType namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

41
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

42
Tree	byte namespace = NUMBER_CONSTANT ;
Code	byte namespace = NUMBER_CONSTANT ;
Distance : 8

43
Tree	int namespace = PeepholeFoldConstants ;
Code	int namespace = PeepholeFoldConstants ;
Distance : 7

44
Tree	int indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	int indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 5

45
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

46
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Distance : 13

47
Tree	int VisibleForTesting [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int VisibleForTesting [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

48
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf ) ;
Distance : 12

49
Tree	int namespace = CHAR_CONS ;
Code	int namespace = CHAR_CONS ;
Distance : 6

50
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

51
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf , true ) ;
Distance : 14

52
Tree	byte namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Code	byte namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 4

53
Tree	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 14

54
Tree	int ImmutableMultiset.Builder [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int ImmutableMultiset.Builder [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

55
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , true ) ;
Distance : 14

56
Tree	abstract int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

57
Tree	int namespace = indexOf ( NUMBER_CONSTANT , true ) ;
Code	int namespace = indexOf ( NUMBER_CONSTANT , true ) ;
Distance : 6

58
Tree	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 10

59
Tree	int namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Code	int namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 9

60
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT , true ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT , true ) ;
Distance : 5

61
Tree	byte namespace = namespace . indexOf ( namespace , null ) ;
Code	byte namespace = namespace . indexOf ( namespace , null ) ;
Distance : 6

62
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

63
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

64
Tree	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

65
Tree	int ImmutableMultiset.Builder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int ImmutableMultiset.Builder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

66
Tree	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 14

67
Tree	int RandomNameGenerator.FIRST_CHAR [] = namespace ( namespace ) ;
Code	int RandomNameGenerator.FIRST_CHAR [] = namespace ( namespace ) ;
Distance : 5

68
Tree	abstract int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

69
Tree	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

70
Tree	int indexOfDot = RandomNameGenerator.FIRST_CHAR ;
Code	int indexOfDot = RandomNameGenerator.FIRST_CHAR ;
Distance : 6

71
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

72
Tree	int RandomNameGenerator.FIRST_CHAR [] = indexOf () ;
Code	int RandomNameGenerator.FIRST_CHAR [] = indexOf () ;
Distance : 8

73
Tree	int namespace = RandomNameGenerator.FIRST_CHAR ;
Code	int namespace = RandomNameGenerator.FIRST_CHAR ;
Distance : 7

74
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

75
Tree	int indexOfDot = PeepholeFoldConstants ;
Code	int indexOfDot = PeepholeFoldConstants ;
Distance : 6

76
Tree	int exitCodeValue [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int exitCodeValue [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

77
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , RandomNameGenerator.FIRST_CHAR ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , RandomNameGenerator.FIRST_CHAR ) ;
Distance : 12

78
Tree	final int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

79
Tree	final int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	final int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

80
Tree	int indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 10

81
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , SubtypingMode.NORMAL ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , SubtypingMode.NORMAL ) ;
Distance : 9

82
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

83
Tree	final int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

84
Tree	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

85
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , ResolutionMode.BROWSER ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , ResolutionMode.BROWSER ) ;
Distance : 12

86
Tree	int namespace = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Code	int namespace = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Distance : 4

87
Tree	int VisibleForTesting [] = namespace ( namespace ) ;
Code	int VisibleForTesting [] = namespace ( namespace ) ;
Distance : 5

88
Tree	int indexOfDot = null ;
Code	int indexOfDot = null ;
Distance : 6

89
Tree	int indexOfDot = TypeTransformation . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = TypeTransformation . indexOf ( STRING_CONSTANT ) ;
Distance : 3

90
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

91
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

92
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 14

93
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

94
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

95
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

96
Tree	int namespace = namespace . indexOf ( true , namespace ) ;
Code	int namespace = namespace . indexOf ( true , namespace ) ;
Distance : 5

97
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

98
Tree	int exitCodeValue [] = namespace ( namespace ) ;
Code	int exitCodeValue [] = namespace ( namespace ) ;
Distance : 5

99
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , loopNode.body ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , loopNode.body ) ;
Distance : 9

100
Tree	int namespace = PeepholeFoldConstants ;
Code	int namespace = PeepholeFoldConstants ;
Distance : 7

101
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

102
Tree	byte indexOfDot ;
Code	byte indexOfDot ;
Distance : 8

103
Tree	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

104
Tree	RawNominalType indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	RawNominalType indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

105
Tree	int namespace = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

106
Tree	int namespace = false ;
Code	int namespace = false ;
Distance : 7

107
Tree	int namespace ;
Code	int namespace ;
Distance : 7

108
Tree	int indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 4

109
Tree	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

110
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Distance : 14

111
Tree	byte namespace ;
Code	byte namespace ;
Distance : 8

112
Tree	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ;
Code	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ;
Distance : 6

113
Tree	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 4

114
Tree	int indexOfDot = TypeTransformation ;
Code	int indexOfDot = TypeTransformation ;
Distance : 6

115
Tree	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

116
Tree	int namespace = NUMBER_CONSTANT ;
Code	int namespace = NUMBER_CONSTANT ;
Distance : 7

117
Tree	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

118
Tree	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 15

119
Tree	byte indexOfDot = null ;
Code	byte indexOfDot = null ;
Distance : 7

120
Tree	int indexOfDot = indexOf ( NUMBER_CONSTANT , true ) ;
Code	int indexOfDot = indexOf ( NUMBER_CONSTANT , true ) ;
Distance : 5

121
Tree	int indexOfDot = true ;
Code	int indexOfDot = true ;
Distance : 6

122
Tree	abstract indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

123
Tree	byte indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

124
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 13

125
Tree	byte namespace = indexOf ( namespace , namespace , false , null , null ) ;
Code	byte namespace = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 12

126
Tree	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 11

127
Tree	final indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

128
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.INTERFACE ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.INTERFACE ) ;
Distance : 12

129
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , true ) ;
Distance : 14

130
Tree	byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

131
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Ref.Type.PROTOTYPE_GET ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Ref.Type.PROTOTYPE_GET ) ;
Distance : 12

132
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , false ) ;
Distance : 14

133
Tree	byte indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	byte indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

134
Tree	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Code	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Distance : 14

135
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Distance : 12

136
Tree	int namespace = namespace ( namespace , namespace , ( , namespace ) ;
Code	int namespace = namespace ( namespace , namespace , ( , namespace ) ;
Distance : 8

137
Tree	int indexOfDot = namespace ( namespace , namespace , . , namespace ) ;
Code	int indexOfDot = namespace ( namespace , namespace , . , namespace ) ;
Distance : 8

138
Tree	abstract indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

139
Tree	abstract namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

140
Tree	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 10

141
Tree	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , . , namespace ) ;
Code	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , . , namespace ) ;
Distance : 11

142
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

143
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

144
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , true ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , true ) ;
Distance : 4

145
Tree	int indexOfDot = PeepholeFoldConstants ;
Code	int indexOfDot = PeepholeFoldConstants ;
Distance : 6

146
Tree	int namespace = indexOf ( namespace , namespace , false , null , null ) ;
Code	int namespace = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

147
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

148
Tree	int indexOfDot = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Distance : 3

149
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

150
Tree	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE . indexOf ( STRING_CONSTANT ) ;
Distance : 3

151
Tree	byte indexOfDot = namespace ;
Code	byte indexOfDot = namespace ;
Distance : 6

152
Tree	byte namespace = null ;
Code	byte namespace = null ;
Distance : 8

153
Tree	int indexOfDot = namespace . indexOf ( true , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( true , namespace ) ;
Distance : 4

154
Tree	byte indexOfDot = CHAR_CONS ;
Code	byte indexOfDot = CHAR_CONS ;
Distance : 6

155
Tree	byte namespace = this . namespace ;
Code	byte namespace = this . namespace ;
Distance : 7

156
Tree	byte namespace = CHAR_CONS ;
Code	byte namespace = CHAR_CONS ;
Distance : 7

157
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity ) ;
Distance : 12

158
Tree	byte namespace = namespace ;
Code	byte namespace = namespace ;
Distance : 7

159
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE ) ;
Distance : 12

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Child code is: 
! type . restrictByNotNullOrUndefined () . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=type}) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (32 (800{val=type}) (235{val=.}) (802{val=restrictByNotNullOrUndefined}) (216{val=()})) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/90/parent/src_com_google_javascript_jscomp_FunctionTypeBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 44
Wrong
========================================================================
False

0
Tree	! getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 7

1
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

2
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

3
Tree	! getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

4
Tree	OBJECT_TYPE = ( type ) typeRegistry . getNativeType ( typeRegistry )
Code	OBJECT_TYPE = ( type ) typeRegistry . getNativeType ( typeRegistry )
Distance : 10

5
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , type )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , type )
Distance : 5

6
Tree	type = ( type ) type . getNativeType ( typeRegistry )
Code	type = ( type ) type . getNativeType ( typeRegistry )
Distance : 10

7
Tree	! type . isSubtype ( typeRegistry )
Code	! type . isSubtype ( typeRegistry )
Distance : 8

8
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ()
Code	! type . isSubtype ( typeRegistry ) . getNativeType ()
Distance : 8

9
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( TernaryValue.UNKNOWN )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( TernaryValue.UNKNOWN )
Distance : 6

10
Tree	OBJECT_TYPE = ( type ) type . getNativeType ( typeRegistry )
Code	OBJECT_TYPE = ( type ) type . getNativeType ( typeRegistry )
Distance : 11

11
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ()
Distance : 8

12
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , type )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , type )
Distance : 5

13
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 6

14
Tree	! type . isSubtype ( getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( getNativeType ( OBJECT_TYPE ) )
Distance : 5

15
Tree	! isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

16
Tree	! isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

17
Tree	type = ( type ) typeRegistry . getNativeType ( typeRegistry )
Code	type = ( type ) typeRegistry . getNativeType ( typeRegistry )
Distance : 9

18
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 8

19
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( Token.SUPER )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( Token.SUPER )
Distance : 6

20
Tree	! type . isSubtype ( typeRegistry . getNativeType ( type ) , type )
Code	! type . isSubtype ( typeRegistry . getNativeType ( type ) , type )
Distance : 6

21
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry ) )
Distance : 9

22
Tree	! type . getNativeType ( typeRegistry )
Code	! type . getNativeType ( typeRegistry )
Distance : 9

23
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

24
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Distance : 6

25
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

26
Tree	! type . isSubtype ( typeRegistry . getNativeType ( type ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( type ) )
Distance : 4

27
Tree	! type . isSubtype ( typeRegistry ) . isSubtype ()
Code	! type . isSubtype ( typeRegistry ) . isSubtype ()
Distance : 9

28
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

29
Tree	! type . getNativeType ( getNativeType ( typeRegistry ) )
Code	! type . getNativeType ( getNativeType ( typeRegistry ) )
Distance : 7

30
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( TernaryValue.UNKNOWN )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( TernaryValue.UNKNOWN )
Distance : 6

31
Tree	! type . isSubtype ( OBJECT_TYPE )
Code	! type . isSubtype ( OBJECT_TYPE )
Distance : 8

32
Tree	! type . isSubtype ( getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( getNativeType ( typeRegistry ) )
Distance : 6

33
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 10

34
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( currentScript.defaultExportLocalName )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( currentScript.defaultExportLocalName )
Distance : 6

35
Tree	! type . getNativeType ( typeRegistry ) . getNativeType ()
Code	! type . getNativeType ( typeRegistry ) . getNativeType ()
Distance : 9

36
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

37
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , type )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , type )
Distance : 6

38
Tree	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

39
Tree	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry ) )
Distance : 10

40
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

41
Tree	! type . isSubtype ( typeRegistry . getNativeType ( type ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( type ) )
Distance : 4

42
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( type ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( type ) ) )
Distance : 7

43
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE ) )
Distance : 9

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
return true ;
-------------------------------------------------------------------------------
Child code is: 
return false ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=true}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=false}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/86/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 112
Correct
========================================================================
True

0
Tree	return true ;
Code	return true ;
Distance : 1

1
Tree	return call ;
Code	return call ;
Distance : 1

2
Tree	return false ;
Code	return false ;
Distance : 0

3
Tree	return true ;
Code	return true ;
Distance : 1

4
Tree	return return ;
Code	return return ;
Distance : 1

5
Tree	return STRING_CONSTANT + expr + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + expr + STRING_CONSTANT + parent ;
Distance : 7

6
Tree	return STRING_CONSTANT + Iterables + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + Iterables + STRING_CONSTANT + parent ;
Distance : 7

7
Tree	return parent ;
Code	return parent ;
Distance : 1

8
Tree	return elem ;
Code	return elem ;
Distance : 1

9
Tree	return call + this . legacyNamespace . get ( CHAR_CONS , CHAR_CONS ) ;
Code	return call + this . legacyNamespace . get ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

10
Tree	return elem + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return elem + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

11
Tree	return parent + this . legacyNamespace . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Code	return parent + this . legacyNamespace . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

12
Tree	return return + NUMBER_CONSTANT ;
Code	return return + NUMBER_CONSTANT ;
Distance : 3

13
Tree	return call + this . legacyNamespace . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Code	return call + this . legacyNamespace . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

14
Tree	return call + ++ . get ( path ) ;
Code	return call + ++ . get ( path ) ;
Distance : 8

15
Tree	return new Token ( propType ) ;
Code	return new Token ( propType ) ;
Distance : 5

16
Tree	return parent . getParent () . replace == NUMBER_CONSTANT ;
Code	return parent . getParent () . replace == NUMBER_CONSTANT ;
Distance : 8

17
Tree	return NUMBER_CONSTANT ; :
Code	return NUMBER_CONSTANT ; :
Distance : 2

18
Tree	return ! NominalType ;
Code	return ! NominalType ;
Distance : 2

19
Tree	return ! areIdentical ( ft ) ;
Code	return ! areIdentical ( ft ) ;
Distance : 5

20
Tree	return parent + ++ . get ( path ) ;
Code	return parent + ++ . get ( path ) ;
Distance : 8

21
Tree	return new FlatFlowScopeCache ( propType ) ;
Code	return new FlatFlowScopeCache ( propType ) ;
Distance : 5

22
Tree	return getReferenceName () ? null : list ;
Code	return getReferenceName () ? null : list ;
Distance : 6

23
Tree	return ! String ;
Code	return ! String ;
Distance : 2

24
Tree	return CHAR_CONS ;
Code	return CHAR_CONS ;
Distance : 1

25
Tree	return parent ? PropAccess.INCLUDE_STRAY_PROPS : FunctionFlavor.NORMAL ;
Code	return parent ? PropAccess.INCLUDE_STRAY_PROPS : FunctionFlavor.NORMAL ;
Distance : 5

26
Tree	return call + NUMBER_CONSTANT ;
Code	return call + NUMBER_CONSTANT ;
Distance : 3

27
Tree	return call . getParent ( typeMap ) ;
Code	return call . getParent ( typeMap ) ;
Distance : 6

28
Tree	return parent . getParent ( typeMap ) ;
Code	return parent . getParent ( typeMap ) ;
Distance : 6

29
Tree	return LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ;
Code	return LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ;
Distance : 1

30
Tree	return call + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return call + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

31
Tree	return NUMBER_CONSTANT ;
Code	return NUMBER_CONSTANT ;
Distance : 1

32
Tree	return STRING_CONSTANT + expr + STRING_CONSTANT + abstract ;
Code	return STRING_CONSTANT + expr + STRING_CONSTANT + abstract ;
Distance : 7

33
Tree	return parent . getParent ( path ) ;
Code	return parent . getParent ( path ) ;
Distance : 6

34
Tree	return parent ? State.RESOLVED : FunctionFlavor.NORMAL ;
Code	return parent ? State.RESOLVED : FunctionFlavor.NORMAL ;
Distance : 5

35
Tree	return JSTypes ;
Code	return JSTypes ;
Distance : 1

36
Tree	return this == disambiguateProperties ;
Code	return this == disambiguateProperties ;
Distance : 3

37
Tree	return call ? State.RESOLVED : FunctionFlavor.NORMAL ;
Code	return call ? State.RESOLVED : FunctionFlavor.NORMAL ;
Distance : 5

38
Tree	return call . getParent () ? null : list ;
Code	return call . getParent () ? null : list ;
Distance : 8

39
Tree	return parent . getParent ( typeMap ) ? null : list ;
Code	return parent . getParent ( typeMap ) ? null : list ;
Distance : 10

40
Tree	return new Token ( compiler ) ;
Code	return new Token ( compiler ) ;
Distance : 5

41
Tree	return this == State.RESOLVED ;
Code	return this == State.RESOLVED ;
Distance : 3

42
Tree	return call . getParent () . UNKNOWN == NUMBER_CONSTANT ;
Code	return call . getParent () . UNKNOWN == NUMBER_CONSTANT ;
Distance : 8

43
Tree	return CompilerOptions.LanguageMode.ECMASCRIPT_2015 ;
Code	return CompilerOptions.LanguageMode.ECMASCRIPT_2015 ;
Distance : 1

44
Tree	return STRING_CONSTANT + isLoose ( that ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isLoose ( that ) + STRING_CONSTANT ;
Distance : 8

45
Tree	return parent . getParent () . UNKNOWN == NUMBER_CONSTANT ;
Code	return parent . getParent () . UNKNOWN == NUMBER_CONSTANT ;
Distance : 8

46
Tree	return parent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return parent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

47
Tree	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( sourceMapCache ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( sourceMapCache ) + STRING_CONSTANT ;
Distance : 10

48
Tree	return call != PropAccess.INCLUDE_STRAY_PROPS ;
Code	return call != PropAccess.INCLUDE_STRAY_PROPS ;
Distance : 3

49
Tree	return this == parent ;
Code	return this == parent ;
Distance : 3

50
Tree	return STRING_CONSTANT + isFunctionDeclaration ( that ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isFunctionDeclaration ( that ) + STRING_CONSTANT ;
Distance : 8

51
Tree	return call . substituteGenerics () ? null : list ;
Code	return call . substituteGenerics () ? null : list ;
Distance : 8

52
Tree	return call + this . legacyNamespace . replace ( CHAR_CONS , CHAR_CONS ) ;
Code	return call + this . legacyNamespace . replace ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

53
Tree	return return + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return return + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

54
Tree	return call + substituteGenerics () ;
Code	return call + substituteGenerics () ;
Distance : 4

55
Tree	return ! call ;
Code	return ! call ;
Distance : 2

56
Tree	return call + path . get ( path ) ;
Code	return call + path . get ( path ) ;
Distance : 8

57
Tree	return call + replace . get ( path ) ;
Code	return call + replace . get ( path ) ;
Distance : 8

58
Tree	return call + getInstanceType () ;
Code	return call + getInstanceType () ;
Distance : 4

59
Tree	return call . getParent ( path ) ;
Code	return call . getParent ( path ) ;
Distance : 6

60
Tree	return this == stringLiteralMatches ;
Code	return this == stringLiteralMatches ;
Distance : 3

61
Tree	return call . getParent ( typeMap ) ? null : list ;
Code	return call . getParent ( typeMap ) ? null : list ;
Distance : 10

62
Tree	return ! areIdentical ( that ) ;
Code	return ! areIdentical ( that ) ;
Distance : 5

63
Tree	return call . getParent () . replace == NUMBER_CONSTANT ;
Code	return call . getParent () . replace == NUMBER_CONSTANT ;
Distance : 8

64
Tree	return parent != PropAccess.INCLUDE_STRAY_PROPS ;
Code	return parent != PropAccess.INCLUDE_STRAY_PROPS ;
Distance : 3

65
Tree	return STRING_CONSTANT + isLoose ( ft ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isLoose ( ft ) + STRING_CONSTANT ;
Distance : 8

66
Tree	return elem + NUMBER_CONSTANT ;
Code	return elem + NUMBER_CONSTANT ;
Distance : 3

67
Tree	return ! isNamedType ( ft ) ;
Code	return ! isNamedType ( ft ) ;
Distance : 5

68
Tree	return call . get () ? null : list ;
Code	return call . get () ? null : list ;
Distance : 8

69
Tree	return parent . getParent ( path ) ? null : list ;
Code	return parent . getParent ( path ) ? null : list ;
Distance : 10

70
Tree	return call ? PropAccess.INCLUDE_STRAY_PROPS : FunctionFlavor.NORMAL ;
Code	return call ? PropAccess.INCLUDE_STRAY_PROPS : FunctionFlavor.NORMAL ;
Distance : 5

71
Tree	return parent . getParent () ? null : list ;
Code	return parent . getParent () ? null : list ;
Distance : 8

72
Tree	return new FlatFlowScopeCache ( compiler ) ;
Code	return new FlatFlowScopeCache ( compiler ) ;
Distance : 5

73
Tree	return call % NUMBER_CONSTANT ;
Code	return call % NUMBER_CONSTANT ;
Distance : 3

74
Tree	return ! getMask ( ft ) ;
Code	return ! getMask ( ft ) ;
Distance : 5

75
Tree	return elem % NUMBER_CONSTANT ;
Code	return elem % NUMBER_CONSTANT ;
Distance : 3

76
Tree	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( UNKNOWN ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( UNKNOWN ) + STRING_CONSTANT ;
Distance : 10

77
Tree	return getReferenceName () ? null : isAbstract ;
Code	return getReferenceName () ? null : isAbstract ;
Distance : 6

78
Tree	return parent % NUMBER_CONSTANT ;
Code	return parent % NUMBER_CONSTANT ;
Distance : 3

79
Tree	return parent + NUMBER_CONSTANT ;
Code	return parent + NUMBER_CONSTANT ;
Distance : 3

80
Tree	return ! Iterables ;
Code	return ! Iterables ;
Distance : 2

81
Tree	super ( n , GOOG_LOADMODULE , state , parent , parent ) ;
Code	super ( n , GOOG_LOADMODULE , state , parent , parent ) ;
Distance : 12

82
Tree	return parent + substituteGenerics () ;
Code	return parent + substituteGenerics () ;
Distance : 4

83
Tree	return call . getParent ( path ) ? null : list ;
Code	return call . getParent ( path ) ? null : list ;
Distance : 10

84
Tree	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( replace ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( replace ) + STRING_CONSTANT ;
Distance : 10

85
Tree	return getReferenceName () ? null : compilationParamsByGroup ;
Code	return getReferenceName () ? null : compilationParamsByGroup ;
Distance : 6

86
Tree	return STRING_CONSTANT + Iterables + STRING_CONSTANT + abstract ;
Code	return STRING_CONSTANT + Iterables + STRING_CONSTANT + abstract ;
Distance : 7

87
Tree	return call != FunctionFlavor.GENERATOR ;
Code	return call != FunctionFlavor.GENERATOR ;
Distance : 3

88
Tree	return STRING_CONSTANT + isLoose ( expr ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isLoose ( expr ) + STRING_CONSTANT ;
Distance : 8

89
Tree	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( path ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( path ) + STRING_CONSTANT ;
Distance : 10

90
Tree	return elem + substituteGenerics () ;
Code	return elem + substituteGenerics () ;
Distance : 4

91
Tree	return ( typeMap ) that ( nameNode ) ;
Code	return ( typeMap ) that ( nameNode ) ;
Distance : 7

92
Tree	return elem != PropAccess.INCLUDE_STRAY_PROPS ;
Code	return elem != PropAccess.INCLUDE_STRAY_PROPS ;
Distance : 3

93
Tree	return elem < < NUMBER_CONSTANT ;
Code	return elem < < NUMBER_CONSTANT ;
Distance : 4

94
Tree	return ( typeMap ) that ( prop ) ;
Code	return ( typeMap ) that ( prop ) ;
Distance : 7

95
Tree	return ( typeMap ) that ( n ) ;
Code	return ( typeMap ) that ( n ) ;
Distance : 7

96
Tree	return return < < NUMBER_CONSTANT ;
Code	return return < < NUMBER_CONSTANT ;
Distance : 4

97
Tree	return ( call ) that ( nameNode ) ;
Code	return ( call ) that ( nameNode ) ;
Distance : 7

98
Tree	return call < < NUMBER_CONSTANT ;
Code	return call < < NUMBER_CONSTANT ;
Distance : 4

99
Tree	return getReferenceName () ? null : transform ;
Code	return getReferenceName () ? null : transform ;
Distance : 6

100
Tree	return false ;
Code	return false ;
Distance : 0

101
Tree	return parent < < NUMBER_CONSTANT ;
Code	return parent < < NUMBER_CONSTANT ;
Distance : 4

102
Tree	return return % NUMBER_CONSTANT ;
Code	return return % NUMBER_CONSTANT ;
Distance : 3

103
Tree	super ( n , GOOG_LOADMODULE , first , parent , parent ) ;
Code	super ( n , GOOG_LOADMODULE , first , parent , parent ) ;
Distance : 12

104
Tree	super ( n , minCond , state , parent , parent ) ;
Code	super ( n , minCond , state , parent , parent ) ;
Distance : 12

105
Tree	return true ; of
Code	return true ; of
Distance : 2

106
Tree	return true ; block
Code	return true ; block
Distance : 2

107
Tree	super ( n , typeMap , state , parent , parent ) ;
Code	super ( n , typeMap , state , parent , parent ) ;
Distance : 12

108
Tree	return NUMBER_CONSTANT ; super
Code	return NUMBER_CONSTANT ; super
Distance : 2

109
Tree	return true ; of
Code	return true ; of
Distance : 2

110
Tree	return true ; block
Code	return true ; block
Distance : 2

111
Tree	return NUMBER_CONSTANT ; TypeInferenceMode.NEITHER
Code	return NUMBER_CONSTANT ; TypeInferenceMode.NEITHER
Distance : 2

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
return TernaryValue.TRUE ;
-------------------------------------------------------------------------------
Child code is: 
return TernaryValue.UNKNOWN ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.TRUE}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.UNKNOWN}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/75/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 144
Correct
========================================================================
True

0
Tree	return TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ;
Distance : 0

1
Tree	return null ;
Code	return null ;
Distance : 1

2
Tree	return compiler ;
Code	return compiler ;
Distance : 1

3
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

4
Tree	return TernaryValue.UNKNOWN ; of
Code	return TernaryValue.UNKNOWN ; of
Distance : 1

5
Tree	return NodeUtil . get () . UNKNOWN ;
Code	return NodeUtil . get () . UNKNOWN ;
Distance : 6

6
Tree	return getCommonTypes ( STRING_CONSTANT ) ;
Code	return getCommonTypes ( STRING_CONSTANT ) ;
Distance : 4

7
Tree	return NodeUtil . get ( null ) ;
Code	return NodeUtil . get ( null ) ;
Distance : 6

8
Tree	return STRING_CONSTANT + this + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + this + STRING_CONSTANT + parent ;
Distance : 7

9
Tree	return getTopObject ( TernaryValue.UNKNOWN ) . that () ;
Code	return getTopObject ( TernaryValue.UNKNOWN ) . that () ;
Distance : 6

10
Tree	return getCommonTypes ( TernaryValue.UNKNOWN ) . that () ;
Code	return getCommonTypes ( TernaryValue.UNKNOWN ) . that () ;
Distance : 6

11
Tree	return n . getParent () >= NUMBER_CONSTANT ;
Code	return n . getParent () >= NUMBER_CONSTANT ;
Distance : 6

12
Tree	return compiler . path () >= NUMBER_CONSTANT ;
Code	return compiler . path () >= NUMBER_CONSTANT ;
Distance : 6

13
Tree	return compiler . getFirstChild () >= NUMBER_CONSTANT ;
Code	return compiler . getFirstChild () >= NUMBER_CONSTANT ;
Distance : 6

14
Tree	return NodeUtil . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return NodeUtil . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

15
Tree	return getCommonTypes ( NUMBER_CONSTANT ) ;
Code	return getCommonTypes ( NUMBER_CONSTANT ) ;
Distance : 4

16
Tree	return n . getParent ( path , STRING_CONSTANT ) . that () ;
Code	return n . getParent ( path , STRING_CONSTANT ) . that () ;
Distance : 11

17
Tree	return NodeUtil . get ( sourceMapCache ) ;
Code	return NodeUtil . get ( sourceMapCache ) ;
Distance : 6

18
Tree	return n + STRING_CONSTANT ;
Code	return n + STRING_CONSTANT ;
Distance : 3

19
Tree	return break; ;
Code	return break; ;
Distance : 1

20
Tree	return parent ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Code	return parent ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Distance : 4

21
Tree	return replacement . get () . get () ;
Code	return replacement . get () . get () ;
Distance : 7

22
Tree	return NodeUtil . get () ;
Code	return NodeUtil . get () ;
Distance : 4

23
Tree	return parent ? TernaryValue.TRUE : TernaryValue.TRUE ;
Code	return parent ? TernaryValue.TRUE : TernaryValue.TRUE ;
Distance : 5

24
Tree	return CHAR_CONS () ;
Code	return CHAR_CONS () ;
Distance : 2

25
Tree	return n . getParent () ;
Code	return n . getParent () ;
Distance : 4

26
Tree	return getReferenceName ( STRING_CONSTANT ) ;
Code	return getReferenceName ( STRING_CONSTANT ) ;
Distance : 4

27
Tree	return n . getParent ( null ) ;
Code	return n . getParent ( null ) ;
Distance : 6

28
Tree	return getTopObject ( NUMBER_CONSTANT ) ;
Code	return getTopObject ( NUMBER_CONSTANT ) ;
Distance : 4

29
Tree	return getCommonTypes () ;
Code	return getCommonTypes () ;
Distance : 2

30
Tree	return replacement . get ( null ) ;
Code	return replacement . get ( null ) ;
Distance : 6

31
Tree	return NodeUtil . get ( STRING_CONSTANT ) . that () ;
Code	return NodeUtil . get ( STRING_CONSTANT ) . that () ;
Distance : 9

32
Tree	return this . commonTypes . UNKNOWN ;
Code	return this . commonTypes . UNKNOWN ;
Distance : 5

33
Tree	return n . getParent ( path ) ;
Code	return n . getParent ( path ) ;
Distance : 6

34
Tree	return this . commonTypes . class () ;
Code	return this . commonTypes . class () ;
Distance : 6

35
Tree	return this . commonTypes . replace () ;
Code	return this . commonTypes . replace () ;
Distance : 6

36
Tree	return new Token ( STRING_CONSTANT ) ;
Code	return new Token ( STRING_CONSTANT ) ;
Distance : 5

37
Tree	return STRING_CONSTANT + function + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + function + STRING_CONSTANT + parent ;
Distance : 7

38
Tree	return this . commonTypes . getEmptyObjectLiteral () ;
Code	return this . commonTypes . getEmptyObjectLiteral () ;
Distance : 6

39
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

40
Tree	return firstArg . get () . UNKNOWN ;
Code	return firstArg . get () . UNKNOWN ;
Distance : 6

41
Tree	return firstArg . get ( STRING_CONSTANT ) ;
Code	return firstArg . get ( STRING_CONSTANT ) ;
Distance : 6

42
Tree	return firstArg . get () . get () ;
Code	return firstArg . get () . get () ;
Distance : 7

43
Tree	return replacement . get ( STRING_CONSTANT ) ;
Code	return replacement . get ( STRING_CONSTANT ) ;
Distance : 6

44
Tree	return replacement . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return replacement . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

45
Tree	return CHAR_CONS ( STRING_CONSTANT ) ;
Code	return CHAR_CONS ( STRING_CONSTANT ) ;
Distance : 4

46
Tree	return STRING_CONSTANT + other + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + other + STRING_CONSTANT + parent ;
Distance : 7

47
Tree	return new Token ( STRING_CONSTANT , firstArg ) ;
Code	return new Token ( STRING_CONSTANT , firstArg ) ;
Distance : 7

48
Tree	return new QualifiedName ( STRING_CONSTANT ) ;
Code	return new QualifiedName ( STRING_CONSTANT ) ;
Distance : 5

49
Tree	return new FlatFlowScopeCache ( STRING_CONSTANT , n ) ;
Code	return new FlatFlowScopeCache ( STRING_CONSTANT , n ) ;
Distance : 7

50
Tree	return TernaryValue.UNKNOWN ; of
Code	return TernaryValue.UNKNOWN ; of
Distance : 1

51
Tree	return compiler + STRING_CONSTANT ;
Code	return compiler + STRING_CONSTANT ;
Distance : 3

52
Tree	return ( prop ) prop . getEmptyObjectLiteral () ;
Code	return ( prop ) prop . getEmptyObjectLiteral () ;
Distance : 7

53
Tree	return getTopObject () ;
Code	return getTopObject () ;
Distance : 2

54
Tree	return NodeUtil . get ( STRING_CONSTANT ) ;
Code	return NodeUtil . get ( STRING_CONSTANT ) ;
Distance : 6

55
Tree	return ( firstArg ) prop . getEmptyObjectLiteral () ;
Code	return ( firstArg ) prop . getEmptyObjectLiteral () ;
Distance : 7

56
Tree	return TernaryValue.UNKNOWN . get () . UNKNOWN ;
Code	return TernaryValue.UNKNOWN . get () . UNKNOWN ;
Distance : 5

57
Tree	return NodeUtil . get () ? null : NodeUtil ;
Code	return NodeUtil . get () ? null : NodeUtil ;
Distance : 8

58
Tree	return ( NodeUtil ) prop . getEmptyObjectLiteral () ;
Code	return ( NodeUtil ) prop . getEmptyObjectLiteral () ;
Distance : 7

59
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

60
Tree	return NodeUtil + STRING_CONSTANT ;
Code	return NodeUtil + STRING_CONSTANT ;
Distance : 3

61
Tree	return getTopObject ( STRING_CONSTANT ) ;
Code	return getTopObject ( STRING_CONSTANT ) ;
Distance : 4

62
Tree	return new FlatFlowScopeCache ( STRING_CONSTANT ) ;
Code	return new FlatFlowScopeCache ( STRING_CONSTANT ) ;
Distance : 5

63
Tree	return TernaryValue.UNKNOWN . get () ;
Code	return TernaryValue.UNKNOWN . get () ;
Distance : 3

64
Tree	return this . commonTypes . sourceMapCache ;
Code	return this . commonTypes . sourceMapCache ;
Distance : 5

65
Tree	return firstArg . get ( null ) ;
Code	return firstArg . get ( null ) ;
Distance : 6

66
Tree	return n . getParent () ? null : list ;
Code	return n . getParent () ? null : list ;
Distance : 8

67
Tree	return n . getParent ( STRING_CONSTANT ) ;
Code	return n . getParent ( STRING_CONSTANT ) ;
Distance : 6

68
Tree	return NodeUtil ;
Code	return NodeUtil ;
Distance : 1

69
Tree	return parent + STRING_CONSTANT ;
Code	return parent + STRING_CONSTANT ;
Distance : 3

70
Tree	return CHAR_CONS ( NUMBER_CONSTANT ) ;
Code	return CHAR_CONS ( NUMBER_CONSTANT ) ;
Distance : 4

71
Tree	return NodeUtil . get () ? null : list ;
Code	return NodeUtil . get () ? null : list ;
Distance : 8

72
Tree	return n . getParent () . get () ;
Code	return n . getParent () . get () ;
Distance : 7

73
Tree	return parent ;
Code	return parent ;
Distance : 1

74
Tree	return parent . getParent () . UNKNOWN ;
Code	return parent . getParent () . UNKNOWN ;
Distance : 6

75
Tree	return n . getParent () . UNKNOWN ;
Code	return n . getParent () . UNKNOWN ;
Distance : 6

76
Tree	return firstArg . get () ;
Code	return firstArg . get () ;
Distance : 4

77
Tree	return n . getParent ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return n . getParent ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

78
Tree	return NodeUtil . get () . get () ;
Code	return NodeUtil . get () . get () ;
Distance : 7

79
Tree	return firstArg . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return firstArg . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

80
Tree	return compiler . getFirstChild ( STRING_CONSTANT ) . that () ;
Code	return compiler . getFirstChild ( STRING_CONSTANT ) . that () ;
Distance : 9

81
Tree	return this . commonTypes . replace ;
Code	return this . commonTypes . replace ;
Distance : 5

82
Tree	return new FlatFlowScopeCache ( STRING_CONSTANT , firstArg ) ;
Code	return new FlatFlowScopeCache ( STRING_CONSTANT , firstArg ) ;
Distance : 7

83
Tree	return this . commonTypes . isChanged () ;
Code	return this . commonTypes . isChanged () ;
Distance : 6

84
Tree	return new Token ( STRING_CONSTANT , n ) ;
Code	return new Token ( STRING_CONSTANT , n ) ;
Distance : 7

85
Tree	return n ;
Code	return n ;
Distance : 1

86
Tree	return compiler . path ( STRING_CONSTANT ) . that () ;
Code	return compiler . path ( STRING_CONSTANT ) . that () ;
Distance : 9

87
Tree	return firstArg . get () ? null : list ;
Code	return firstArg . get () ? null : list ;
Distance : 8

88
Tree	return getReferenceName () ;
Code	return getReferenceName () ;
Distance : 2

89
Tree	return STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT ;
Distance : 3

90
Tree	return CHAR_CONS ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Code	return CHAR_CONS ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

91
Tree	return firstArg . get ( path ) ;
Code	return firstArg . get ( path ) ;
Distance : 6

92
Tree	return getReferenceName ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Code	return getReferenceName ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

93
Tree	return replacement . get () ;
Code	return replacement . get () ;
Distance : 4

94
Tree	return getReferenceName ( NUMBER_CONSTANT ) ;
Code	return getReferenceName ( NUMBER_CONSTANT ) ;
Distance : 4

95
Tree	return n . getParent ( STRING_CONSTANT ) . that () ;
Code	return n . getParent ( STRING_CONSTANT ) . that () ;
Distance : 9

96
Tree	return this . commonTypes . TRUTHY ;
Code	return this . commonTypes . TRUTHY ;
Distance : 5

97
Tree	return NodeUtil . get ( sourceMapCache , STRING_CONSTANT ) . that () ;
Code	return NodeUtil . get ( sourceMapCache , STRING_CONSTANT ) . that () ;
Distance : 11

98
Tree	return NodeUtil . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return NodeUtil . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

99
Tree	return TernaryValue.UNKNOWN . get () . replace ;
Code	return TernaryValue.UNKNOWN . get () . replace ;
Distance : 5

100
Tree	return getTopObject ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Code	return getTopObject ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

101
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

102
Tree	return STRING_CONSTANT + this + STRING_CONSTANT + arguments ;
Code	return STRING_CONSTANT + this + STRING_CONSTANT + arguments ;
Distance : 7

103
Tree	return NodeUtil . < parent > getName () . UNKNOWN ;
Code	return NodeUtil . < parent > getName () . UNKNOWN ;
Distance : 9

104
Tree	return TernaryValue.UNKNOWN . get () . jsRoot ;
Code	return TernaryValue.UNKNOWN . get () . jsRoot ;
Distance : 5

105
Tree	return new UnrecognizedRequire ( STRING_CONSTANT ) ;
Code	return new UnrecognizedRequire ( STRING_CONSTANT ) ;
Distance : 5

106
Tree	return getCommonTypes ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Code	return getCommonTypes ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

107
Tree	return n . < parent > getName () . jsRoot ;
Code	return n . < parent > getName () . jsRoot ;
Distance : 9

108
Tree	return NodeUtil . get ( path ) ;
Code	return NodeUtil . get ( path ) ;
Distance : 6

109
Tree	return TernaryValue.UNKNOWN . isRoot () ;
Code	return TernaryValue.UNKNOWN . isRoot () ;
Distance : 3

110
Tree	return parent . < parent > isLValueRootedInGlobalScope () . jsRoot ;
Code	return parent . < parent > isLValueRootedInGlobalScope () . jsRoot ;
Distance : 9

111
Tree	return TernaryValue.UNKNOWN . getParent () ;
Code	return TernaryValue.UNKNOWN . getParent () ;
Distance : 3

112
Tree	return parent . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return parent . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

113
Tree	return parent . < parent > getName () . jsRoot ;
Code	return parent . < parent > getName () . jsRoot ;
Distance : 9

114
Tree	return NodeUtil . get () >= NUMBER_CONSTANT ;
Code	return NodeUtil . get () >= NUMBER_CONSTANT ;
Distance : 6

115
Tree	return ( other ) prop . getEmptyObjectLiteral () ;
Code	return ( other ) prop . getEmptyObjectLiteral () ;
Distance : 7

116
Tree	return TernaryValue.UNKNOWN . size () ;
Code	return TernaryValue.UNKNOWN . size () ;
Distance : 3

117
Tree	return firstArg . get ( path , STRING_CONSTANT ) . that () ;
Code	return firstArg . get ( path , STRING_CONSTANT ) . that () ;
Distance : 11

118
Tree	return TernaryValue.UNKNOWN . size () . UNKNOWN ;
Code	return TernaryValue.UNKNOWN . size () . UNKNOWN ;
Distance : 5

119
Tree	return CHAR_CONS ( TernaryValue.UNKNOWN ) . that () ;
Code	return CHAR_CONS ( TernaryValue.UNKNOWN ) . that () ;
Distance : 6

120
Tree	return NodeUtil . get ( path , STRING_CONSTANT ) . that () ;
Code	return NodeUtil . get ( path , STRING_CONSTANT ) . that () ;
Distance : 11

121
Tree	return return; ;
Code	return return; ;
Distance : 1

122
Tree	return getCommonTypes ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return getCommonTypes ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

123
Tree	return n . getParent ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return n . getParent ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

124
Tree	return STRING_CONSTANT + STRING_CONSTANT ; TypeInferenceMode.NEITHER
Code	return STRING_CONSTANT + STRING_CONSTANT ; TypeInferenceMode.NEITHER
Distance : 4

125
Tree	return getReferenceName ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return getReferenceName ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

126
Tree	return STRING_CONSTANT + STRING_CONSTANT ; super
Code	return STRING_CONSTANT + STRING_CONSTANT ; super
Distance : 4

127
Tree	return STRING_CONSTANT + STRING_CONSTANT ; :
Code	return STRING_CONSTANT + STRING_CONSTANT ; :
Distance : 4

128
Tree	return CHAR_CONS ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return CHAR_CONS ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

129
Tree	return getReferenceName ( TernaryValue.UNKNOWN ) . that () ;
Code	return getReferenceName ( TernaryValue.UNKNOWN ) . that () ;
Distance : 6

130
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; TypeInferenceMode.NEITHER
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; TypeInferenceMode.NEITHER
Distance : 16

131
Tree	return getTopObject ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return getTopObject ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

132
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; super
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; super
Distance : 16

133
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; :
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; :
Distance : 16

134
Tree	return parent . getParent ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return parent . getParent ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

135
Tree	return default: ;
Code	return default: ;
Distance : 1

136
Tree	return n ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Code	return n ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Distance : 4

137
Tree	return TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ;
Distance : 0

138
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; TypeInferenceMode.NEITHER
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; TypeInferenceMode.NEITHER
Distance : 14

139
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; super
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; super
Distance : 14

140
Tree	return TernaryValue.UNKNOWN ; block
Code	return TernaryValue.UNKNOWN ; block
Distance : 1

141
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; :
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; :
Distance : 14

142
Tree	return n ? TernaryValue.TRUE : TernaryValue.TRUE ;
Code	return n ? TernaryValue.TRUE : TernaryValue.TRUE ;
Distance : 5

143
Tree	return TernaryValue.UNKNOWN ; block
Code	return TernaryValue.UNKNOWN ; block
Distance : 1

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( c > NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (252{val=<=}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (230{val=<}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/73/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 76
Wrong
========================================================================
False

0
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { append ( sb , c ) ; }
Distance : 7

1
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 5

2
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 6

3
Tree	if ( c >= NUMBER_CONSTANT && current.scopes == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && current.scopes == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

4
Tree	if ( c >= NUMBER_CONSTANT && current.scopes == E ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && current.scopes == E ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

5
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( sb , sb ) ; }
Distance : 11

6
Tree	if ( c == ScopeType.EXEC_CONTEXT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c == ScopeType.EXEC_CONTEXT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

7
Tree	if ( c >= NUMBER_CONSTANT && error.description == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && error.description == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

8
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Distance : 4

9
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 7

10
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = recordPassStart ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = recordPassStart ; } else { append ( sb , c ) ; }
Distance : 8

11
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = functionTree.access ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = functionTree.access ; } else { append ( sb , c ) ; }
Distance : 7

12
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { append ( sb , c ) ; }
Distance : 8

13
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 6

14
Tree	if ( c && c == ModuleType.GOOG_MODULE ) { sb = - sb ; } else { c . append ( sb ) ; }
Code	if ( c && c == ModuleType.GOOG_MODULE ) { sb = - sb ; } else { c . append ( sb ) ; }
Distance : 14

15
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 4

16
Tree	if ( c && c == DecompositionType.UNDECOMPOSABLE ) { sb = - sb ; } else { c . append ( sb ) ; }
Code	if ( c && c == DecompositionType.UNDECOMPOSABLE ) { sb = - sb ; } else { c . append ( sb ) ; }
Distance : 14

17
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { sb . append ( sb ) ; }
Distance : 12

18
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 6

19
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { sb . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { sb . append ( sb , c ) ; }
Distance : 9

20
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 5

21
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { sb . append ( sb ) ; }
Distance : 12

22
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { c . append ( c ) ; }
Distance : 8

23
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Distance : 5

24
Tree	if ( c >= NUMBER_CONSTANT && current.scopes == Token.BLOCK ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && current.scopes == Token.BLOCK ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

25
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = append ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = append ; } else { append ( sb , c ) ; }
Distance : 7

26
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 5

27
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { append ( sb , c ) ; }
Distance : 11

28
Tree	if ( c == ModuleType.GOOG_MODULE ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c == ModuleType.GOOG_MODULE ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

29
Tree	if ( c && c == Mode.ES8_OR_GREATER ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == Mode.ES8_OR_GREATER ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

30
Tree	if ( c && c == ModuleType.GOOG_MODULE ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == ModuleType.GOOG_MODULE ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

31
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

32
Tree	if ( c == DecompositionType.DECOMPOSABLE ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c == DecompositionType.DECOMPOSABLE ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

33
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { c . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { c . append ( sb , c ) ; }
Distance : 9

34
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

35
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { c . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { c . append ( sb ) ; }
Distance : 11

36
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , sb ) ; } else { append ( sb , c ) ; }
Distance : 8

37
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 2

38
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( sb , c ) ; }
Distance : 10

39
Tree	if ( c && c == DecompositionType.UNDECOMPOSABLE ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == DecompositionType.UNDECOMPOSABLE ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

40
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

41
Tree	if ( c && c == ScopeType.EXEC_CONTEXT ) { sb = - sb ; } else { c . append ( sb ) ; }
Code	if ( c && c == ScopeType.EXEC_CONTEXT ) { sb = - sb ; } else { c . append ( sb ) ; }
Distance : 14

42
Tree	if ( c && c == ScopeType.EXEC_CONTEXT ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == ScopeType.EXEC_CONTEXT ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

43
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 4

44
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 2

45
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { sb . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { sb . append ( sb , c ) ; }
Distance : 10

46
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 3

47
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . append ( sb ) ; }
Distance : 14

48
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 5

49
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 9

50
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 6

51
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { append ( sb , c ) ; }
Distance : 7

52
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 8

53
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { append ( sb , c ) ; }
Distance : 8

54
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 5

55
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Distance : 6

56
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( sb ) ; }
Distance : 14

57
Tree	if ( c && c == Mode.ES8_OR_GREATER ) { sb = - sb ; } else { c . append ( sb ) ; }
Code	if ( c && c == Mode.ES8_OR_GREATER ) { sb = - sb ; } else { c . append ( sb ) ; }
Distance : 14

58
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = sb ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = sb ; } else { append ( sb , c ) ; }
Distance : 7

59
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . appendHexJavaScriptRepresentation ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . appendHexJavaScriptRepresentation ( sb ) ; }
Distance : 13

60
Tree	if ( c == IncrementalCheckMode.GENERATE_IJS ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c == IncrementalCheckMode.GENERATE_IJS ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

61
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 1

62
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { sb . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { sb . append ( sb , c ) ; }
Distance : 10

63
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = append ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = append ; } else { append ( sb , c ) ; }
Distance : 6

64
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 11

65
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 3

66
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { append ( sb , c ) ; }
Distance : 8

67
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { append ( sb , c ) ; }
Distance : 8

68
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( sb ) ; }
Distance : 9

69
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 4

70
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . appendHexJavaScriptRepresentation ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . appendHexJavaScriptRepresentation ( sb ) ; }
Distance : 13

71
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Distance : 5

72
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { append ( sb , c ) ; }
Distance : 8

73
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 3

74
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 4

75
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . appendHexJavaScriptRepresentation ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . appendHexJavaScriptRepresentation ( c ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Child code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/70/parent/src_com_google_javascript_jscomp_TypedScopeCreator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 104
Wrong
========================================================================
False

0
Tree	{ astParameter . defineSlot () ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () ; astParameter = astParameter . getNext () ; }
Distance : 12

1
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

2
Tree	{ astParameter . defineSlot () ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () ; astParameter = jsDocParameter . getNext () ; }
Distance : 11

3
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 6

4
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

5
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 13

6
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

7
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 8

8
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

9
Tree	{ astParameter . defineSlot () . getJSType ( functionNode , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( functionNode , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

10
Tree	{ astParameter . defineSlot () . getJSType ( jsDocParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( jsDocParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

11
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , jsDocParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , jsDocParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 9

12
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 6

13
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 5

14
Tree	{ functionNode . defineSlot () ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () ; astParameter = astParameter . getNext () ; }
Distance : 12

15
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

16
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 7

17
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 7

18
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

19
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

20
Tree	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

21
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 7

22
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 10

23
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 10

24
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , var.name ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , var.name ) ; functionNode = astParameter . getNext () ; }
Distance : 11

25
Tree	{ astParameter . defineSlot () . getJSType ( JSTypeNative.VOID_TYPE , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( JSTypeNative.VOID_TYPE , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

26
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 8

27
Tree	{ astParameter . defineSlot () . getJSType ( JSTypeNative.VOID_TYPE , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( JSTypeNative.VOID_TYPE , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

28
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 11

29
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

30
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

31
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

32
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

33
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

34
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 12

35
Tree	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

36
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 6

37
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 8

38
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

39
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

40
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 8

41
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

42
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

43
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

44
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

45
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

46
Tree	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

47
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

48
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

49
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 9

50
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 9

51
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

52
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

53
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

54
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; astParameter = astParameter . getNext () ; }
Distance : 11

55
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

56
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 7

57
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

58
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 9

59
Tree	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 10

60
Tree	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

61
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 8

62
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

63
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 6

64
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 7

65
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 8

66
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Distance : 8

67
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 8

68
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

69
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

70
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 9

71
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; functionNode = astParameter . getNext () ; }
Distance : 11

72
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

73
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 12

74
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

75
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , pair.env ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , pair.env ) ; functionNode = astParameter . getNext () ; }
Distance : 11

76
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

77
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

78
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 15

79
Tree	{ functionNode . defineSlot () ; astParameter = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot () ; astParameter = jsDocParameter . getNext () ; }
Distance : 11

80
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

81
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

82
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 15

83
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

84
Tree	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 14

85
Tree	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 14

86
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 5

87
Tree	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 10

88
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

89
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

90
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

91
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

92
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 11

93
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; functionNode = astParameter . getNext () ; }
Distance : 11

94
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

95
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Distance : 12

96
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 12

97
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 12

98
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; astParameter = astParameter . getNext () ; }
Distance : 11

99
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

100
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 13

101
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , jsDocParameter , astParameter , true ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , jsDocParameter , astParameter , true ) ; functionNode = astParameter . getNext () ; }
Distance : 11

102
Tree	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Distance : 11

103
Tree	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 11

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( token != JsDocToken.LP ) { restoreLookAhead ( token ) ; return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=restoreLookAhead}) (214{val=(}) (800{val=token}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/68/parent/src_com_google_javascript_jscomp_parsing_JsDocInfoParser.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 192
Wrong
========================================================================
False

0
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

1
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

2
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

3
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

4
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

5
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

6
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; }
Distance : 8

7
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

8
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Distance : 9

9
Tree	if ( token != default: ) { return token . token ( token ) ; }
Code	if ( token != default: ) { return token . token ( token ) ; }
Distance : 8

10
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

11
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

12
Tree	if ( token != null ) { return this . token . JsDocToken.LP ( token ) ; }
Code	if ( token != null ) { return this . token . JsDocToken.LP ( token ) ; }
Distance : 9

13
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

14
Tree	if ( token != break; ) { return token . STRING_CONSTANT ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return token . STRING_CONSTANT ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

15
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

16
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 9

17
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( ( ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( ( ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Distance : 10

18
Tree	if ( token != return; ) { return token . token ( token ) ; }
Code	if ( token != return; ) { return token . token ( token ) ; }
Distance : 8

19
Tree	if ( token != break; ) { return token . STRING_CONSTANT ( token , token , token , token ) ; }
Code	if ( token != break; ) { return token . STRING_CONSTANT ( token , token , token , token ) ; }
Distance : 11

20
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( token , token , token , token ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( token , token , token , token ) ; }
Distance : 11

21
Tree	if ( token != default: ) { return token . token ( token ) ; }
Code	if ( token != default: ) { return token . token ( token ) ; }
Distance : 8

22
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

23
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

24
Tree	if ( token != null ) { return token . STRING_CONSTANT ( null , ( minPrecedence [] ) null ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( null , ( minPrecedence [] ) null ) ; }
Distance : 12

25
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

26
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , null ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , null ) ; }
Distance : 9

27
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( null , null ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( null , null ) ; }
Distance : 9

28
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( token [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( token [] ) null ) ; }
Distance : 12

29
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

30
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

31
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

32
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

33
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

34
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

35
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

36
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

37
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Distance : 6

38
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Distance : 6

39
Tree	if ( reportTypeSyntaxWarning () == break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( reportTypeSyntaxWarning () == break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 9

40
Tree	if ( token != break; ) { return token . STRING_CONSTANT ( null , null ) ; }
Code	if ( token != break; ) { return token . STRING_CONSTANT ( null , null ) ; }
Distance : 9

41
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Distance : 6

42
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Distance : 9

43
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , break; , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , break; , token , token ) ; }
Distance : 9

44
Tree	if ( reportTypeSyntaxWarning () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( reportTypeSyntaxWarning () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 9

45
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; }
Distance : 11

46
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

47
Tree	if ( token != break; ) { return token . STRING_CONSTANT ( token , token , this ) ; }
Code	if ( token != break; ) { return token . STRING_CONSTANT ( token , token , this ) ; }
Distance : 11

48
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

49
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

50
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Distance : 9

51
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

52
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

53
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

54
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

55
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

56
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( null , null ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( null , null ) ; }
Distance : 9

57
Tree	if ( reportTypeSyntaxWarning () == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( reportTypeSyntaxWarning () == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 9

58
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Distance : 9

59
Tree	if ( token != break; ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != break; ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

60
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Distance : 11

61
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

62
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

63
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

64
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

65
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

66
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Distance : 9

67
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

68
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

69
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

70
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 9

71
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) break; ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) break; ) ; }
Distance : 10

72
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Distance : 11

73
Tree	if ( token != break; ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != break; ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

74
Tree	if ( token == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

75
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

76
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 5

77
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

78
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

79
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

80
Tree	if ( token != return; ) { return token . token ( token ) ; }
Code	if ( token != return; ) { return token . token ( token ) ; }
Distance : 8

81
Tree	if ( token . JsDocToken.LP ( token ) == break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

82
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 9

83
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

84
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

85
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 5

86
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

87
Tree	if ( token != break; ) { return token . token ( token ) ; }
Code	if ( token != break; ) { return token . token ( token ) ; }
Distance : 8

88
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

89
Tree	if ( token != null ) { return token . STRING_CONSTANT ( null , ( currentScript.defaultExportLocalName [] ) null ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( null , ( currentScript.defaultExportLocalName [] ) null ) ; }
Distance : 12

90
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Distance : 6

91
Tree	if ( token != break; ) { return token . token ( token ) ; }
Code	if ( token != break; ) { return token . token ( token ) ; }
Distance : 8

92
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , null ) ; }
Distance : 9

93
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 8

94
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

95
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

96
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Distance : 7

97
Tree	if ( token != null ) { return token . STRING_CONSTANT ( null , token ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( null , token ) ; }
Distance : 9

98
Tree	if ( token != null ) { return token . STRING_CONSTANT ( ( token ) return; ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( ( token ) return; ) ; }
Distance : 10

99
Tree	if ( token == null ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token == null ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 10

100
Tree	if ( token != null ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; }
Distance : 8

101
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

102
Tree	if ( token == continue; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token == continue; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 10

103
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

104
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) null ) ; }
Distance : 10

105
Tree	if ( token == break; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token == break; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 10

106
Tree	if ( reportTypeSyntaxWarning () == default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( reportTypeSyntaxWarning () == default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 9

107
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; }
Distance : 11

108
Tree	if ( token != null ) { return token . STRING_CONSTANT ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 9

109
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Distance : 6

110
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

111
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

112
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Distance : 7

113
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 7

114
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , null ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , null ) ; }
Distance : 9

115
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

116
Tree	if ( token != break; ) { return this . token . JsDocToken.LP ( token ) ; }
Code	if ( token != break; ) { return this . token . JsDocToken.LP ( token ) ; }
Distance : 9

117
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } :
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } :
Distance : 9

118
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

119
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

120
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

121
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

122
Tree	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

123
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

124
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Distance : 11

125
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } super
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } super
Distance : 8

126
Tree	if ( token != default: ) { return token . STRING_CONSTANT ( token , token , this ) ; }
Code	if ( token != default: ) { return token . STRING_CONSTANT ( token , token , this ) ; }
Distance : 11

127
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

128
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , null ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , null ) ; }
Distance : 9

129
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

130
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

131
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

132
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

133
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

134
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

135
Tree	if ( token != break; ) { return token . JsDocToken.LP ( token , token ) ; }
Code	if ( token != break; ) { return token . JsDocToken.LP ( token , token ) ; }
Distance : 9

136
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

137
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 9

138
Tree	if ( token != default: ) { return this . token . JsDocToken.LP ( token ) ; }
Code	if ( token != default: ) { return this . token . JsDocToken.LP ( token ) ; }
Distance : 9

139
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

140
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

141
Tree	if ( token == return; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token == return; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 10

142
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

143
Tree	if ( token != default: ) { return token . STRING_CONSTANT ( token ) ; }
Code	if ( token != default: ) { return token . STRING_CONSTANT ( token ) ; }
Distance : 8

144
Tree	if ( token != default: ) { return token . STRING_CONSTANT ( STRING_CONSTANT , token ) ; }
Code	if ( token != default: ) { return token . STRING_CONSTANT ( STRING_CONSTANT , token ) ; }
Distance : 9

145
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

146
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 9

147
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

148
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( token ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( token ) ; }
Distance : 8

149
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

150
Tree	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

151
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

152
Tree	if ( token != default: ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; }
Code	if ( token != default: ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; }
Distance : 8

153
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

154
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

155
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 9

156
Tree	if ( token != null ) { return token . token ( token ) ; }
Code	if ( token != null ) { return token . token ( token ) ; }
Distance : 8

157
Tree	if ( token . JsDocToken.LP ( token ) == default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

158
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 9

159
Tree	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 8

160
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Distance : 10

161
Tree	if ( token . JsDocToken.LP ( token ) == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

162
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) continue; ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) continue; ) ; }
Distance : 10

163
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 9

164
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 8

165
Tree	if ( token != null ) { return token . STRING_CONSTANT ( this , token , token ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( this , token , token ) ; }
Distance : 11

166
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Distance : 6

167
Tree	if ( token != null ) { return token . token ( token ) ; }
Code	if ( token != null ) { return token . token ( token ) ; }
Distance : 8

168
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

169
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

170
Tree	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; } :
Code	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; } :
Distance : 9

171
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Distance : 7

172
Tree	if ( token != JsDocToken.LP ) { return token . JsDocToken.LP ( token , token ) ; } super
Code	if ( token != JsDocToken.LP ) { return token . JsDocToken.LP ( token , token ) ; } super
Distance : 9

173
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

174
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

175
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

176
Tree	if ( token != break; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != break; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 9

177
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( inheritedPropDef.methodType [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( inheritedPropDef.methodType [] ) null ) ; }
Distance : 12

178
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

179
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Distance : 8

180
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 8

181
Tree	if ( token == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

182
Tree	if ( token != return; ) { return this . token . JsDocToken.LP ( token ) ; }
Code	if ( token != return; ) { return this . token . JsDocToken.LP ( token ) ; }
Distance : 9

183
Tree	if ( token == break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

184
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , return; , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , return; , token , token ) ; }
Distance : 9

185
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

186
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 8

187
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Distance : 10

188
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , return; ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , return; ) ; }
Distance : 9

189
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

190
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Distance : 10

191
Tree	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , token ) ; } TypeInferenceMode.NEITHER
Code	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , token ) ; } TypeInferenceMode.NEITHER
Distance : 9

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 164
Wrong
========================================================================
False

0
Tree	{ toSource () ; return n . toSource ( Token.LABEL_NAME ) ; }
Code	{ toSource () ; return n . toSource ( Token.LABEL_NAME ) ; }
Distance : 7

1
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

2
Tree	{ toSource () ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ toSource () ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 5

3
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

4
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Distance : 3

5
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != null , n ) ; }
Distance : 3

6
Tree	{ initCompilerOptionsIfTesting () ; return this . toSource ( n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return this . toSource ( n , n ) ; }
Distance : 5

7
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Distance : 2

8
Tree	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

9
Tree	{ toSource () ; return toSource ( Token.DECLARE , n ) ; }
Code	{ toSource () ; return toSource ( Token.DECLARE , n ) ; }
Distance : 5

10
Tree	{ toSource () ; return n . toSource ( Token.LABEL_NAME ) ; }
Code	{ toSource () ; return n . toSource ( Token.LABEL_NAME ) ; }
Distance : 7

11
Tree	{ toSource () . toSource ( new StringBuilder () , n ) ; return; }
Code	{ toSource () . toSource ( new StringBuilder () , n ) ; return; }
Distance : 8

12
Tree	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Distance : 6

13
Tree	{ toSource () ; return toSource ( null , n . null ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . null ( n ) ) ; }
Distance : 7

14
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.LABEL_NAME ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.LABEL_NAME ) ; }
Distance : 6

15
Tree	{ toSource () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Distance : 3

16
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Distance : 6

17
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 7

18
Tree	{ toSource () . toSource ( new PropertyWrite () , n ) ; return; }
Code	{ toSource () . toSource ( new PropertyWrite () , n ) ; return; }
Distance : 8

19
Tree	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

20
Tree	{ initCompilerOptionsIfTesting () ; return this . toSource ( n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return this . toSource ( n , n ) ; }
Distance : 5

21
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , null ) ; }
Distance : 4

22
Tree	{ toSource () ; return toSource ( n , n , null , n ) ; }
Code	{ toSource () ; return toSource ( n , n , null , n ) ; }
Distance : 4

23
Tree	{ toSource () ; return n . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Distance : 8

24
Tree	{ toSource () ; return n . , ( this , n . toSource ( n ) ) ; }
Code	{ toSource () ; return n . , ( this , n . toSource ( n ) ) ; }
Distance : 11

25
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , n ) ; }
Distance : 1

26
Tree	{ initCompilerOptionsIfTesting () ; return n . , ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . , ( this , n ) ; }
Distance : 6

27
Tree	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 9

28
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Distance : 4

29
Tree	{ toSource () ; return n . toSource ( this , n . null ( n ) ) ; }
Code	{ toSource () ; return n . toSource ( this , n . null ( n ) ) ; }
Distance : 9

30
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , null , n ) ; }
Distance : 3

31
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 2

32
Tree	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 3

33
Tree	{ toSource () ; return toSource ( n , n ? export.scope : Reach.NONE ) ; }
Code	{ toSource () ; return toSource ( n , n ? export.scope : Reach.NONE ) ; }
Distance : 6

34
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , options.crossChunkCodeMotionNoStubMethods ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , options.crossChunkCodeMotionNoStubMethods ) ; }
Distance : 3

35
Tree	{ toSource () ; return toSource ( n , n != null , n ) ; }
Code	{ toSource () ; return toSource ( n , n != null , n ) ; }
Distance : 4

36
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

37
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , n ) ; }
Distance : 1

38
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , null , n ) ; }
Distance : 3

39
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n ) ; }
Distance : 5

40
Tree	{ toSource ( pair.env ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ toSource ( pair.env ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 9

41
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 2

42
Tree	{ toSource () ; return toSource ( n . , ( n ) , true ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , true ) ; }
Distance : 5

43
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != null , n ) ; }
Distance : 3

44
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

45
Tree	{ toSource () ; return toSource ( n , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , n ) ; }
Distance : 2

46
Tree	{ toSource () ; return toSource ( n , n , null , n ) ; }
Code	{ toSource () ; return toSource ( n , n , null , n ) ; }
Distance : 4

47
Tree	{ toSource () ; return toSource ( n , n ? export.scope : EvalMode.NORMAL ) ; }
Code	{ toSource () ; return toSource ( n , n ? export.scope : EvalMode.NORMAL ) ; }
Distance : 6

48
Tree	{ n . toSource ( Token.CALL ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . toSource ( Token.CALL ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

49
Tree	{ toSource () ; return toSource ( n . , ( n ) , true ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , true ) ; }
Distance : 5

50
Tree	{ toSource () ; return n . toSource ( this , n . null ( n ) ) ; }
Code	{ toSource () ; return n . toSource ( this , n . null ( n ) ) ; }
Distance : 9

51
Tree	{ n . toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

52
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , null ) ; }
Distance : 4

53
Tree	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 3

54
Tree	{ toSource ( n ) ; return toSource ( null , n . , ( n ) ) ; }
Code	{ toSource ( n ) ; return toSource ( null , n . , ( n ) ) ; }
Distance : 10

55
Tree	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 9

56
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 4

57
Tree	{ toSource () ; return toSource ( n , null , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , null , n ) ; }
Distance : 4

58
Tree	{ toSource () ; return toSource ( n , n , n , n . ) ( n ) ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n . ) ( n ) ) ; }
Distance : 10

59
Tree	{ toSource () ; return substituteParametricGenerics . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return substituteParametricGenerics . toSource () . toSource ( n , n , n ) ; }
Distance : 8

60
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Distance : 3

61
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Distance : 2

62
Tree	{ toSource () . toSource ( new StringBuilder () , n ) ; return; }
Code	{ toSource () . toSource ( new StringBuilder () , n ) ; return; }
Distance : 8

63
Tree	{ pair.env . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ pair.env . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

64
Tree	{ pair.env . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ pair.env . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

65
Tree	{ toSource () ; return toSource ( n , n != null , n ) ; }
Code	{ toSource () ; return toSource ( n , n != null , n ) ; }
Distance : 4

66
Tree	{ toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 9

67
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Distance : 4

68
Tree	{ n . toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

69
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 14

70
Tree	{ toSource ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 11

71
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 14

72
Tree	{ pair.env . toSource ( Node.FREE_CALL ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ pair.env . toSource ( Node.FREE_CALL ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

73
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , obj2.props ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , obj2.props ) ; }
Distance : 3

74
Tree	{ pair.env . toSource ( Node.FREE_CALL ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ pair.env . toSource ( Node.FREE_CALL ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

75
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 14

76
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , commonTypes.BOTTOM_PROPERTY_MAP ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , commonTypes.BOTTOM_PROPERTY_MAP ) ; }
Distance : 3

77
Tree	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 14

78
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

79
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

80
Tree	{ toSource () ; return toSource ( n , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , n ) ; }
Distance : 2

81
Tree	{ n . toSource ( Token.CALL ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . toSource ( Token.CALL ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

82
Tree	{ toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 9

83
Tree	{ n . toSource ( n . , ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( n . , ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 18

84
Tree	{ toSource () ; return toSource ( Es6RewriteClass.INHERITS , n ) ; }
Code	{ toSource () ; return toSource ( Es6RewriteClass.INHERITS , n ) ; }
Distance : 5

85
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Distance : 13

86
Tree	{ n . toSource ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 17

87
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Distance : 14

88
Tree	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 10

89
Tree	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

90
Tree	{ n . toSource ( n () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Code	{ n . toSource ( n () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Distance : 13

91
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

92
Tree	{ toSource () ; return toSource ( PassNames.REMOVE_UNUSED_VARS , n ) ; }
Code	{ toSource () ; return toSource ( PassNames.REMOVE_UNUSED_VARS , n ) ; }
Distance : 5

93
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Distance : 14

94
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

95
Tree	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 10

96
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

97
Tree	{ toSource () ; return this . toSource ( n , n ) ; }
Code	{ toSource () ; return this . toSource ( n , n ) ; }
Distance : 6

98
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

99
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n ) ; }
Distance : 5

100
Tree	{ toSource () ; return toSource ( n , n , n , false ) ; }
Code	{ toSource () ; return toSource ( n , n , n , false ) ; }
Distance : 5

101
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

102
Tree	{ toSource () ; return n . toSource ( Node.IS_NAMESPACE ) ; }
Code	{ toSource () ; return n . toSource ( Node.IS_NAMESPACE ) ; }
Distance : 7

103
Tree	{ toSource () ; return n . toSource ( this , n ) ; }
Code	{ toSource () ; return n . toSource ( this , n ) ; }
Distance : 7

104
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 7

105
Tree	{ toSource () ; return toSource ( n , n , n , false ) ; }
Code	{ toSource () ; return toSource ( n , n , n , false ) ; }
Distance : 5

106
Tree	{ toSource () ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , null ) ; }
Distance : 6

107
Tree	{ toSource () ; return compilerState.functionNames . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return compilerState.functionNames . toSource () . toSource ( n , n , n ) ; }
Distance : 8

108
Tree	{ toSource () ; return toSource ( n , n ? export.scope : EvalMode.NORMAL ) ; }
Code	{ toSource () ; return toSource ( n , n ? export.scope : EvalMode.NORMAL ) ; }
Distance : 6

109
Tree	{ toSource () ; return this . toSource ( n , n ) ; }
Code	{ toSource () ; return this . toSource ( n , n ) ; }
Distance : 6

110
Tree	{ toSource () ; return toSource ( n , n . ) ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . ) ( n ) , n ) ; }
Distance : 8

111
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , inheritedPropDef.methodType ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , inheritedPropDef.methodType ) ; }
Distance : 3

112
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Distance : 4

113
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 7

114
Tree	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 10

115
Tree	{ n . toSource ( n . , ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( n . , ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 18

116
Tree	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Distance : 6

117
Tree	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 10

118
Tree	{ toSource () ; return n . toSource ( Token.LABEL_NAME , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( Token.LABEL_NAME , n , n , n ) ; }
Distance : 7

119
Tree	{ toSource () ; return toSource ( n , null , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , null , n ) ; }
Distance : 4

120
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

121
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 4

122
Tree	{ toSource () ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , null ) ; }
Distance : 6

123
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.LABEL_NAME , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.LABEL_NAME , n , n , n ) ; }
Distance : 6

124
Tree	{ toSource () ; return toSource ( n , n ? currentCase.mayFallThrough : EvalMode.NORMAL ) ; }
Code	{ toSource () ; return toSource ( n , n ? currentCase.mayFallThrough : EvalMode.NORMAL ) ; }
Distance : 6

125
Tree	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , n ) ; }
Code	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , n ) ; }
Distance : 11

126
Tree	{ toSource () ; return compilerState.functionNames . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return compilerState.functionNames . toSource () . toSource ( n , n , n ) ; }
Distance : 8

127
Tree	{ toSource ( n ) ; return toSource ( null , n . null ( n ) ) ; }
Code	{ toSource ( n ) ; return toSource ( null , n . null ( n ) ) ; }
Distance : 10

128
Tree	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 8

129
Tree	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Distance : 8

130
Tree	{ toSource () ; return compilerState.functionNames . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return compilerState.functionNames . toSource () . toSource ( n , n , n ) ; }
Distance : 8

131
Tree	{ toSource () ; return n . toSource ( Node.IS_NAMESPACE , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( Node.IS_NAMESPACE , n , n , n ) ; }
Distance : 7

132
Tree	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 8

133
Tree	{ n . toSource ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 17

134
Tree	{ toSource () ; return toSource ( n , n , n , null ) ; }
Code	{ toSource () ; return toSource ( n , n , n , null ) ; }
Distance : 5

135
Tree	{ toSource () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Distance : 12

136
Tree	{ toSource () ; return toSource ( n , n , n , null ) ; }
Code	{ toSource () ; return toSource ( n , n , n , null ) ; }
Distance : 5

137
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Distance : 4

138
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , true ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , true ) ; }
Distance : 6

139
Tree	{ toSource () ; return n . toSource ( this , n ) ; }
Code	{ toSource () ; return n . toSource ( this , n ) ; }
Distance : 7

140
Tree	{ toSource () ; return n . toSource ( Token.LABEL_NAME , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( Token.LABEL_NAME , n , n , n ) ; }
Distance : 7

141
Tree	{ toSource () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Distance : 3

142
Tree	{ toSource () . toSource ( new BasicBlock () , n ) ; return; }
Code	{ toSource () . toSource ( new BasicBlock () , n ) ; return; }
Distance : 8

143
Tree	{ n . toSource ( Token.CALL ) ; return toSource ( n . , ( n ) , n ) ; }
Code	{ n . toSource ( Token.CALL ) ; return toSource ( n . , ( n ) , n ) ; }
Distance : 11

144
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

145
Tree	{ toSource () ; return toSource ( null , n . , ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . , ( n ) ) ; }
Distance : 7

146
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Distance : 4

147
Tree	{ toSource () ; return n . toSource ( n . toSource ( n ) , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( n . toSource ( n ) , n , n , n ) ; }
Distance : 12

148
Tree	{ toSource () ; return toSource ( n , n . ; ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . ; ( n ) , n ) ; }
Distance : 8

149
Tree	{ toSource () ; return toSource ( n . , ( n ) , false ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , false ) ; }
Distance : 6

150
Tree	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Distance : 8

151
Tree	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

152
Tree	{ toSource ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 11

153
Tree	{ toSource () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Distance : 12

154
Tree	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 12

155
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Distance : 4

156
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 7

157
Tree	{ n . toSource ( Token.CALL ) ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ n . toSource ( Token.CALL ) ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 12

158
Tree	{ toSource () ; return toSource ( n , n , n , n . ) ( n ) ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n . ) ( n ) ) ; }
Distance : 10

159
Tree	{ toSource () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Distance : 10

160
Tree	{ n . toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

161
Tree	{ toSource () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Distance : 10

162
Tree	{ n . toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

163
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Distance : 11

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
String code = toSource ( root , sourceMap ) ;
-------------------------------------------------------------------------------
Child code is: 
String code = toSource ( root , sourceMap , inputSeqNum == NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (234{val=,}) (27 (800{val=inputSeqNum}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 188
Wrong
========================================================================
False

0
Tree	String code = root ( root , sourceMap ) ;
Code	String code = root ( root , sourceMap ) ;
Distance : 5

1
Tree	String code = root ;
Code	String code = root ;
Distance : 9

2
Tree	String code = root ( root ) ;
Code	String code = root ( root ) ;
Distance : 7

3
Tree	String code = root ( root , sourceMap , sourceMap ) ;
Code	String code = root ( root , sourceMap , sourceMap ) ;
Distance : 4

4
Tree	String code = root . toSource ( this , code , sourceMap ) ;
Code	String code = root . toSource ( this , code , sourceMap ) ;
Distance : 7

5
Tree	String code = root . toSource ( this , code ) ;
Code	String code = root . toSource ( this , code ) ;
Distance : 8

6
Tree	String code = toSource ( root ) ;
Code	String code = toSource ( root ) ;
Distance : 6

7
Tree	String sourceMap = root ;
Code	String sourceMap = root ;
Distance : 10

8
Tree	String code = code ;
Code	String code = code ;
Distance : 10

9
Tree	String code = root . toSource ( this . root , sourceMap , sourceMap , root ) ;
Code	String code = root . toSource ( this . root , sourceMap , sourceMap , root ) ;
Distance : 7

10
Tree	String code = root . root ( sourceMap ) ;
Code	String code = root . root ( sourceMap ) ;
Distance : 7

11
Tree	String code = root . toSource ( root , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	String code = root . toSource ( root , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 7

12
Tree	String code = ( ( root ) this ) . toSource ( root , code ) ;
Code	String code = ( ( root ) this ) . toSource ( root , code ) ;
Distance : 10

13
Tree	String code = root . toSource ( this , sourceMap , code ) ;
Code	String code = root . toSource ( this , sourceMap , code ) ;
Distance : 6

14
Tree	String code = toSource ( root , sourceMap , code , false ) ;
Code	String code = toSource ( root , sourceMap , code , false ) ;
Distance : 3

15
Tree	String code = toSource ( root , code , sourceMap ) ;
Code	String code = toSource ( root , code , sourceMap ) ;
Distance : 4

16
Tree	String code = toSource ( root , typeVars ) ;
Code	String code = toSource ( root , typeVars ) ;
Distance : 5

17
Tree	String code = root . toSource ( root , sourceMap , code ) ;
Code	String code = root . toSource ( root , sourceMap , code ) ;
Distance : 5

18
Tree	String sourceMap = toSource ( root , sourceMap , false ) ;
Code	String sourceMap = toSource ( root , sourceMap , false ) ;
Distance : 4

19
Tree	String code = toSource ( root , sourceMap , sourceMap , code ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , code ) ;
Distance : 3

20
Tree	String code = toSource () . toSource ( sourceMap ) ;
Code	String code = toSource () . toSource ( sourceMap ) ;
Distance : 8

21
Tree	String code = toSource ( root , code , code ) ;
Code	String code = toSource ( root , code , code ) ;
Distance : 4

22
Tree	String code = root . toSource ( root , typeVars ) ;
Code	String code = root . toSource ( root , typeVars ) ;
Distance : 7

23
Tree	String code = evaluateComparison . toSource ( root , sourceMap ) ;
Code	String code = evaluateComparison . toSource ( root , sourceMap ) ;
Distance : 6

24
Tree	String code = toSource ( root , code , false ) ;
Code	String code = toSource ( root , code , false ) ;
Distance : 4

25
Tree	String code = toSource ( code , sourceMap , false ) ;
Code	String code = toSource ( code , sourceMap , false ) ;
Distance : 4

26
Tree	String code = toSource ( root , this . code ) ;
Code	String code = toSource ( root , this . code ) ;
Distance : 5

27
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

28
Tree	String code = toSource ( root , this . sourceMap ) ;
Code	String code = toSource ( root , this . sourceMap ) ;
Distance : 5

29
Tree	String code = toSource ( false ) ;
Code	String code = toSource ( false ) ;
Distance : 7

30
Tree	String code = ( ( root ) this ) . toSource ( sourceMap , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( sourceMap , sourceMap ) ;
Distance : 10

31
Tree	String code = root . toSource ( STRING_CONSTANT , root ) ;
Code	String code = root . toSource ( STRING_CONSTANT , root ) ;
Distance : 8

32
Tree	String code = toSource () . toSource ( root ) ;
Code	String code = toSource () . toSource ( root ) ;
Distance : 8

33
Tree	String code = code . toSource () ;
Code	String code = code . toSource () ;
Distance : 10

34
Tree	String code = toSource ( root , es6ModuleTranspiler ) ;
Code	String code = toSource ( root , es6ModuleTranspiler ) ;
Distance : 5

35
Tree	String sourceMap = root . toSource ( STRING_CONSTANT , root ) ;
Code	String sourceMap = root . toSource ( STRING_CONSTANT , root ) ;
Distance : 9

36
Tree	String code = root . toSource ( this , code , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( this , code , sourceMap , sourceMap ) ;
Distance : 7

37
Tree	String code = sourceMap . toSource () ;
Code	String code = sourceMap . toSource () ;
Distance : 9

38
Tree	String code = root . toSource ( root , code ) ;
Code	String code = root . toSource ( root , code ) ;
Distance : 7

39
Tree	String code = toSource () . toSource ( root , sourceMap ) ;
Code	String code = toSource () . toSource ( root , sourceMap ) ;
Distance : 7

40
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

41
Tree	String code = toSource ( toSource ( root , code ) ) ;
Code	String code = toSource ( toSource ( root , code ) ) ;
Distance : 6

42
Tree	String code = toSource ( root , sourceMap , code , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , code , sourceMap ) ;
Distance : 3

43
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

44
Tree	String code = root . toSource ( this , sourceMap , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( this , sourceMap , sourceMap , sourceMap ) ;
Distance : 6

45
Tree	String code = toSource () . toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource () . toSource ( sourceMap , sourceMap ) ;
Distance : 7

46
Tree	String code = root . toSource ( root , sourceMap ) ;
Code	String code = root . toSource ( root , sourceMap ) ;
Distance : 6

47
Tree	String code = toSource ( root , code , sourceMap , false ) ;
Code	String code = toSource ( root , code , sourceMap , false ) ;
Distance : 4

48
Tree	String code = toSource ( STRING_CONSTANT , sourceMap ) ;
Code	String code = toSource ( STRING_CONSTANT , sourceMap ) ;
Distance : 5

49
Tree	String code = ( ( root ) this ) . toSource ( root , sourceMap , code ) ;
Code	String code = ( ( root ) this ) . toSource ( root , sourceMap , code ) ;
Distance : 10

50
Tree	String code = root . toSource ( root , new String ( root , sourceMap ) ) ;
Code	String code = root . toSource ( root , new String ( root , sourceMap ) ) ;
Distance : 9

51
Tree	String code = root . toSource ( this , sourceMap , sourceMap , code ) ;
Code	String code = root . toSource ( this , sourceMap , sourceMap , code ) ;
Distance : 6

52
Tree	String code = root . toSource ( root , es6ModuleTranspiler ) ;
Code	String code = root . toSource ( root , es6ModuleTranspiler ) ;
Distance : 7

53
Tree	String code = toSource ( STRING_CONSTANT , code ) ;
Code	String code = toSource ( STRING_CONSTANT , code ) ;
Distance : 6

54
Tree	String code = toSource ( STRING_CONSTANT , root ) ;
Code	String code = toSource ( STRING_CONSTANT , root ) ;
Distance : 6

55
Tree	String code = root . toSource ( root . toSource () , code ) ;
Code	String code = root . toSource ( root . toSource () , code ) ;
Distance : 8

56
Tree	String code = root ( code , sourceMap ) ;
Code	String code = root ( code , sourceMap ) ;
Distance : 6

57
Tree	String code = root . toSource ( root , new String ( code , sourceMap ) ) ;
Code	String code = root . toSource ( root , new String ( code , sourceMap ) ) ;
Distance : 9

58
Tree	String code = root . toSource ( code , sourceMap ) ;
Code	String code = root . toSource ( code , sourceMap ) ;
Distance : 7

59
Tree	String sourceMap = toSource ( STRING_CONSTANT , root ) ;
Code	String sourceMap = toSource ( STRING_CONSTANT , root ) ;
Distance : 7

60
Tree	String code = toSource ( root , sourceMap , false ) ;
Code	String code = toSource ( root , sourceMap , false ) ;
Distance : 3

61
Tree	String code = root . code ( root ) ;
Code	String code = root . code ( root ) ;
Distance : 8

62
Tree	String code = sourceMap ;
Code	String code = sourceMap ;
Distance : 9

63
Tree	String code = root . toSource ( this , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( this , sourceMap , sourceMap ) ;
Distance : 6

64
Tree	String code = root . toSource ( root , false ) ;
Code	String code = root . toSource ( root , false ) ;
Distance : 7

65
Tree	String code = root ( sourceMap , sourceMap ) ;
Code	String code = root ( sourceMap , sourceMap ) ;
Distance : 6

66
Tree	String code = root . toSource ( root , code , sourceMap ) ;
Code	String code = root . toSource ( root , code , sourceMap ) ;
Distance : 6

67
Tree	String code = root . toSource ( sourceMap , sourceMap ) ;
Code	String code = root . toSource ( sourceMap , sourceMap ) ;
Distance : 7

68
Tree	String code = toSource () ;
Code	String code = toSource () ;
Distance : 9

69
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

70
Tree	String code = root . toSource ( root , sourceMap ) ;
Code	String code = root . toSource ( root , sourceMap ) ;
Distance : 6

71
Tree	String code = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Distance : 10

72
Tree	String code = getPrototypeNameOfMethod . toSource ( root , sourceMap ) ;
Code	String code = getPrototypeNameOfMethod . toSource ( root , sourceMap ) ;
Distance : 6

73
Tree	String code = toSource ( code ) ;
Code	String code = toSource ( code ) ;
Distance : 7

74
Tree	String code = root . toSource () ;
Code	String code = root . toSource () ;
Distance : 9

75
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Distance : 6

76
Tree	String code = root . toSource ( this . root , code , sourceMap , root ) ;
Code	String code = root . toSource ( this . root , code , sourceMap , root ) ;
Distance : 8

77
Tree	String sourceMap = root . toSource ( this , sourceMap ) ;
Code	String sourceMap = root . toSource ( this , sourceMap ) ;
Distance : 8

78
Tree	String code = root . toSource ( root . toSource () , sourceMap ) ;
Code	String code = root . toSource ( root . toSource () , sourceMap ) ;
Distance : 8

79
Tree	String code = root . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Code	String code = root . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Distance : 6

80
Tree	String code = root ( code ) ;
Code	String code = root ( code ) ;
Distance : 8

81
Tree	String code = toSource ( toSource ( root , sourceMap ) ) ;
Code	String code = toSource ( toSource ( root , sourceMap ) ) ;
Distance : 6

82
Tree	String code = code . toSource ( this , sourceMap ) ;
Code	String code = code . toSource ( this , sourceMap ) ;
Distance : 7

83
Tree	String code = toSource () . toSource ( code ) ;
Code	String code = toSource () . toSource ( code ) ;
Distance : 8

84
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , code ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , code ) ;
Distance : 9

85
Tree	String code = typeString . toSource ( root , sourceMap ) ;
Code	String code = typeString . toSource ( root , sourceMap ) ;
Distance : 6

86
Tree	String code = root . toSource ( code ) ;
Code	String code = root . toSource ( code ) ;
Distance : 8

87
Tree	String sourceMap = toSource ( root , NUMBER_CONSTANT ) ;
Code	String sourceMap = toSource ( root , NUMBER_CONSTANT ) ;
Distance : 5

88
Tree	String code = toSource ( code , this . sourceMap ) ;
Code	String code = toSource ( code , this . sourceMap ) ;
Distance : 6

89
Tree	String code = root . toSource ( code . toSource () , sourceMap ) ;
Code	String code = root . toSource ( code . toSource () , sourceMap ) ;
Distance : 9

90
Tree	String code = toSource ( toSource ( code , sourceMap ) ) ;
Code	String code = toSource ( toSource ( code , sourceMap ) ) ;
Distance : 6

91
Tree	String code = root . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( root , sourceMap , sourceMap ) ;
Distance : 5

92
Tree	String code = root . toSource ( toSource () , sourceMap ) ;
Code	String code = root . toSource ( toSource () , sourceMap ) ;
Distance : 8

93
Tree	String code = toSource ( root , sourceMap , code , code ) ;
Code	String code = toSource ( root , sourceMap , code , code ) ;
Distance : 3

94
Tree	String sourceMap = toSource ( toSource () , root ) ;
Code	String sourceMap = toSource ( toSource () , root ) ;
Distance : 7

95
Tree	String code = toSource ( code , NUMBER_CONSTANT ) ;
Code	String code = toSource ( code , NUMBER_CONSTANT ) ;
Distance : 5

96
Tree	String code = ( ( code ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = ( ( code ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Distance : 10

97
Tree	String code = root . toSource ( STRING_CONSTANT , code ) ;
Code	String code = root . toSource ( STRING_CONSTANT , code ) ;
Distance : 8

98
Tree	String code = generateSourceMap . toSource ( root , sourceMap ) ;
Code	String code = generateSourceMap . toSource ( root , sourceMap ) ;
Distance : 6

99
Tree	String sourceMap = root . toSource () . toSource ( root ) ;
Code	String sourceMap = root . toSource () . toSource ( root ) ;
Distance : 10

100
Tree	String code = root . toSource ( this . root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( this . root , sourceMap , sourceMap , sourceMap ) ;
Distance : 7

101
Tree	String code = root . toSource ( sourceMap ) ;
Code	String code = root . toSource ( sourceMap ) ;
Distance : 8

102
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , code , sourceMap ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , code , sourceMap ) ;
Distance : 9

103
Tree	String code = toSource ( root ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( root ( root ) , toSource ( root ) ) ;
Distance : 7

104
Tree	String code = root ( sourceMap ) ;
Code	String code = root ( sourceMap ) ;
Distance : 7

105
Tree	String code = root . toSource ( root , new String ( root , code ) ) ;
Code	String code = root . toSource ( root , new String ( root , code ) ) ;
Distance : 9

106
Tree	String code = root . toSource ( this , sourceMap ) ;
Code	String code = root . toSource ( this , sourceMap ) ;
Distance : 7

107
Tree	String sourceMap = toSource ( root ) ;
Code	String sourceMap = toSource ( root ) ;
Distance : 7

108
Tree	String code = toSource () . toSource ( root , code ) ;
Code	String code = toSource () . toSource ( root , code ) ;
Distance : 8

109
Tree	String code = toSource ( root ( sourceMap ) , toSource ( root ) ) ;
Code	String code = toSource ( root ( sourceMap ) , toSource ( root ) ) ;
Distance : 6

110
Tree	String sourceMap = root . toSource ( root ) ;
Code	String sourceMap = root . toSource ( root ) ;
Distance : 9

111
Tree	String code = toSource ( code ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( code ( root ) , toSource ( root ) ) ;
Distance : 8

112
Tree	String code = ( ( root ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Distance : 10

113
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

114
Tree	String sourceMap = toSource ( root ( root ) , toSource ( root ) ) ;
Code	String sourceMap = toSource ( root ( root ) , toSource ( root ) ) ;
Distance : 8

115
Tree	String sourceMap = toSource ( true ) ;
Code	String sourceMap = toSource ( true ) ;
Distance : 8

116
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

117
Tree	String sourceMap = toSource ( root , this . sourceMap ) ;
Code	String sourceMap = toSource ( root , this . sourceMap ) ;
Distance : 6

118
Tree	String code = toSource () ;
Code	String code = toSource () ;
Distance : 9

119
Tree	String code = root . toSource ( this , code , sourceMap , code ) ;
Code	String code = root . toSource ( this , code , sourceMap , code ) ;
Distance : 7

120
Tree	String code = toSource ( root , EquivalenceMethod.DATA_FLOW ) ;
Code	String code = toSource ( root , EquivalenceMethod.DATA_FLOW ) ;
Distance : 5

121
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Distance : 7

122
Tree	String sourceMap = root . toSource () ;
Code	String sourceMap = root . toSource () ;
Distance : 10

123
Tree	String sourceMap = root ( root ) ;
Code	String sourceMap = root ( root ) ;
Distance : 8

124
Tree	String code = root ( root , code , code ) ;
Code	String code = root ( root , code , code ) ;
Distance : 5

125
Tree	String code = toSource ( root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , sourceMap ) ;
Distance : 3

126
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

127
Tree	String code = root . toSource ( STRING_CONSTANT , sourceMap ) ;
Code	String code = root . toSource ( STRING_CONSTANT , sourceMap ) ;
Distance : 7

128
Tree	String code = toSource ( true ) ;
Code	String code = toSource ( true ) ;
Distance : 7

129
Tree	String sourceMap = root . toSource ( toSource () , sourceMap ) ;
Code	String sourceMap = root . toSource ( toSource () , sourceMap ) ;
Distance : 9

130
Tree	String code = toSource () . toSource ( code , sourceMap ) ;
Code	String code = toSource () . toSource ( code , sourceMap ) ;
Distance : 8

131
Tree	String code = root . toSource ( this . root , sourceMap , code , root ) ;
Code	String code = root . toSource ( this . root , sourceMap , code , root ) ;
Distance : 7

132
Tree	String code = new String ( root , sourceMap ) . toSource ( root ) ;
Code	String code = new String ( root , sourceMap ) . toSource ( root ) ;
Distance : 7

133
Tree	String code = root . toSource ( root , true ) ;
Code	String code = root . toSource ( root , true ) ;
Distance : 7

134
Tree	String code = toSource ( toSource () , root ) ;
Code	String code = toSource ( toSource () , root ) ;
Distance : 6

135
Tree	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , sourceMap ) ;
Distance : 6

136
Tree	String code = ( ( code ) this ) . toSource ( root , sourceMap ) ;
Code	String code = ( ( code ) this ) . toSource ( root , sourceMap ) ;
Distance : 11

137
Tree	String code = toSource ( root , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , sourceMap ) ;
Distance : 3

138
Tree	String code = root . toSource ( sourceMap , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( sourceMap , sourceMap , sourceMap ) ;
Distance : 6

139
Tree	String code = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Distance : 9

140
Tree	String code = root . sourceMap ( root ) ;
Code	String code = root . sourceMap ( root ) ;
Distance : 7

141
Tree	String code = root . toSource ( sourceMap , false ) ;
Code	String code = root . toSource ( sourceMap , false ) ;
Distance : 7

142
Tree	String code = toSource ( root , sourceMap , sourceMap , false ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , false ) ;
Distance : 3

143
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , sourceMap ) ;
Distance : 9

144
Tree	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap . toSource () ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap . toSource () ) ;
Distance : 7

145
Tree	String code = toSource ( toSource () , sourceMap ) ;
Code	String code = toSource ( toSource () , sourceMap ) ;
Distance : 6

146
Tree	String code = toSource ( root , sourceMap , sourceMap , true ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , true ) ;
Distance : 3

147
Tree	String code = root . toSource ( root , new String ( sourceMap , sourceMap ) ) ;
Code	String code = root . toSource ( root , new String ( sourceMap , sourceMap ) ) ;
Distance : 8

148
Tree	String code = root . toSource ( root ) ;
Code	String code = root . toSource ( root ) ;
Distance : 8

149
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code , code ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code , code ) ;
Distance : 6

150
Tree	String code = ( ( root ) this ) . toSource ( root , code , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( root , code , sourceMap ) ;
Distance : 11

151
Tree	String code = root . toSource ( this , code , code ) ;
Code	String code = root . toSource ( this , code , code ) ;
Distance : 7

152
Tree	String code = toSource ( root , NUMBER_CONSTANT ) ;
Code	String code = toSource ( root , NUMBER_CONSTANT ) ;
Distance : 4

153
Tree	String code = toSource ( sourceMap , NUMBER_CONSTANT ) ;
Code	String code = toSource ( sourceMap , NUMBER_CONSTANT ) ;
Distance : 4

154
Tree	String sourceMap = toSource () ;
Code	String sourceMap = toSource () ;
Distance : 10

155
Tree	String code = toSource ( root , sourceMap , code ) ;
Code	String code = toSource ( root , sourceMap , code ) ;
Distance : 3

156
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

157
Tree	String code = toSource ( sourceMap ) ;
Code	String code = toSource ( sourceMap ) ;
Distance : 6

158
Tree	String code = root . toSource ( code , false ) ;
Code	String code = root . toSource ( code , false ) ;
Distance : 8

159
Tree	String code = root . toSource ( root , code , sourceMap . toSource () ) ;
Code	String code = root . toSource ( root , code , sourceMap . toSource () ) ;
Distance : 7

160
Tree	String code = root . toSource () . toSource ( root ) ;
Code	String code = root . toSource () . toSource ( root ) ;
Distance : 9

161
Tree	String code = root . toSource ( root , sourceMap , code . toSource () ) ;
Code	String code = root . toSource ( root , sourceMap , code . toSource () ) ;
Distance : 6

162
Tree	String code = root ( root , code ) ;
Code	String code = root ( root , code ) ;
Distance : 6

163
Tree	String sourceMap = toSource () . toSource ( root ) ;
Code	String sourceMap = toSource () . toSource ( root ) ;
Distance : 9

164
Tree	String code = new String ( root , code ) . toSource ( root ) ;
Code	String code = new String ( root , code ) . toSource ( root ) ;
Distance : 8

165
Tree	String code = root . root ( root ) ;
Code	String code = root . root ( root ) ;
Distance : 8

166
Tree	String code = root ( root , sourceMap , code ) ;
Code	String code = root ( root , sourceMap , code ) ;
Distance : 4

167
Tree	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , code ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , code ) ;
Distance : 6

168
Tree	String code = root . toSource () . toSource ( code ) ;
Code	String code = root . toSource () . toSource ( code ) ;
Distance : 9

169
Tree	String code = toSource ( code . toSource ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( code . toSource ( root ) , toSource ( root ) ) ;
Distance : 10

170
Tree	String code = code . toSource ( toSource () , sourceMap ) ;
Code	String code = code . toSource ( toSource () , sourceMap ) ;
Distance : 8

171
Tree	String code = new String ( sourceMap , sourceMap ) . toSource ( root ) ;
Code	String code = new String ( sourceMap , sourceMap ) . toSource ( root ) ;
Distance : 8

172
Tree	String sourceMap = toSource ( false ) ;
Code	String sourceMap = toSource ( false ) ;
Distance : 8

173
Tree	String code = root . toSource ( sourceMap , sourceMap , sourceMap . toSource () ) ;
Code	String code = root . toSource ( sourceMap , sourceMap , sourceMap . toSource () ) ;
Distance : 7

174
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

175
Tree	String code = toSource ( toSource () , code ) ;
Code	String code = toSource ( toSource () , code ) ;
Distance : 6

176
Tree	String root = toSource () ;
Code	String root = toSource () ;
Distance : 10

177
Tree	String code = root . toSource () . toSource ( sourceMap ) ;
Code	String code = root . toSource () . toSource ( sourceMap ) ;
Distance : 9

178
Tree	String code = toSource ( root . toSource ( root ) , toSource ( sourceMap ) ) ;
Code	String code = toSource ( root . toSource ( root ) , toSource ( sourceMap ) ) ;
Distance : 9

179
Tree	String code = toSource ( root . toSource ( sourceMap ) , toSource ( root ) ) ;
Code	String code = toSource ( root . toSource ( sourceMap ) , toSource ( root ) ) ;
Distance : 8

180
Tree	String code = root . toSource ( toSource () , code ) ;
Code	String code = root . toSource ( toSource () , code ) ;
Distance : 8

181
Tree	String code = root . toSource ( sourceMap . toSource () , sourceMap ) ;
Code	String code = root . toSource ( sourceMap . toSource () , sourceMap ) ;
Distance : 9

182
Tree	String code = new String ( code , sourceMap ) . toSource ( root ) ;
Code	String code = new String ( code , sourceMap ) . toSource ( root ) ;
Distance : 8

183
Tree	String sourceMap = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Code	String sourceMap = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Distance : 8

184
Tree	String code = root ( root , code , sourceMap ) ;
Code	String code = root ( root , code , sourceMap ) ;
Distance : 5

185
Tree	String code = toSource ( toSource ( sourceMap , sourceMap ) ) ;
Code	String code = toSource ( toSource ( sourceMap , sourceMap ) ) ;
Distance : 5

186
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , sourceMap , sourceMap ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , sourceMap , sourceMap ) ;
Distance : 9

187
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root . toSource () ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root . toSource () ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
-------------------------------------------------------------------------------
Child code is: 
this . maybeAliased = NodeUtil . isExpressionResultUsed ( assignNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (38 (207{val=!}) (32 (32 (800{val=assignNode}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=isExprResult}) (216{val=()})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isExpressionResultUsed}) (214{val=(}) (800{val=assignNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/45/parent/src_com_google_javascript_jscomp_RemoveUnusedVars.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 64
Wrong
========================================================================
False

0
Tree	RemoveUnusedCode.Builder = current.scopes . getParent () ;
Code	RemoveUnusedCode.Builder = current.scopes . getParent () ;
Distance : 8

1
Tree	RemoveUnusedCode.Builder = FeatureSet.BARE_MINIMUM . getParent () ;
Code	RemoveUnusedCode.Builder = FeatureSet.BARE_MINIMUM . getParent () ;
Distance : 8

2
Tree	RemoveUnusedCode.Builder = DiagnosticGroups.LINT_CHECKS . getParent () ;
Code	RemoveUnusedCode.Builder = DiagnosticGroups.LINT_CHECKS . getParent () ;
Distance : 8

3
Tree	RemoveUnusedCode.Builder = BASE64_DECODE_MAP . getParent () ;
Code	RemoveUnusedCode.Builder = BASE64_DECODE_MAP . getParent () ;
Distance : 8

4
Tree	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

5
Tree	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

6
Tree	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

7
Tree	InvalidatingTypes.Builder = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	InvalidatingTypes.Builder = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

8
Tree	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

9
Tree	this . maybeAliased = ( config.parseTypeSyntax ) isExprResult . getParent () ;
Code	this . maybeAliased = ( config.parseTypeSyntax ) isExprResult . getParent () ;
Distance : 7

10
Tree	this . NodeUtil = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

11
Tree	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

12
Tree	this . maybeAliased = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 8

13
Tree	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

14
Tree	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

15
Tree	this . maybeAliased = ( assignNode ) isExprResult . getParent () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) isExprResult . getParent () . isExprResult () ;
Distance : 9

16
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , TokenType.OPEN_PAREN ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , TokenType.OPEN_PAREN ) ;
Distance : 8

17
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , parent.rootNode ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , parent.rootNode ) ;
Distance : 8

18
Tree	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

19
Tree	InvalidatingTypes.Builder = NodeUtil . assignNode ( assignNode ) ;
Code	InvalidatingTypes.Builder = NodeUtil . assignNode ( assignNode ) ;
Distance : 4

20
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

21
Tree	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

22
Tree	currentScript.declareLegacyNamespace = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	currentScript.declareLegacyNamespace = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

23
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

24
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

25
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , recvLvalue.env ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , recvLvalue.env ) ;
Distance : 8

26
Tree	InvalidatingTypes.Builder = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	InvalidatingTypes.Builder = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

27
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , GOOG_LOADMODULE ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , GOOG_LOADMODULE ) ;
Distance : 8

28
Tree	currentScript.declareLegacyNamespace = NodeUtil . getParent ( this . assignNode ) ;
Code	currentScript.declareLegacyNamespace = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

29
Tree	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent () ;
Code	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent () ;
Distance : 10

30
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( this . assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( this . assignNode ) ;
Distance : 7

31
Tree	RemoveUnusedCode.Builder = new other.nominalType ( assignNode ) . getParent () ;
Code	RemoveUnusedCode.Builder = new other.nominalType ( assignNode ) . getParent () ;
Distance : 9

32
Tree	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent () ;
Code	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent () ;
Distance : 10

33
Tree	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent () ;
Code	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent () ;
Distance : 10

34
Tree	InvalidatingTypes.Builder = new objType.nominalType ( assignNode ) . getParent () ;
Code	InvalidatingTypes.Builder = new objType.nominalType ( assignNode ) . getParent () ;
Distance : 9

35
Tree	InvalidatingTypes.Builder = NodeUtil . getParent ( this . assignNode ) ;
Code	InvalidatingTypes.Builder = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

36
Tree	currentScript.declareLegacyNamespace = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	currentScript.declareLegacyNamespace = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

37
Tree	RemoveUnusedCode.Builder = ( assignNode ) other.liveSet . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) other.liveSet . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

38
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

39
Tree	currentScript.declareLegacyNamespace = new objType.nominalType ( assignNode ) . getParent () ;
Code	currentScript.declareLegacyNamespace = new objType.nominalType ( assignNode ) . getParent () ;
Distance : 9

40
Tree	InvalidatingTypes.Builder = new assignNode ( assignNode ) . getParent () ;
Code	InvalidatingTypes.Builder = new assignNode ( assignNode ) . getParent () ;
Distance : 9

41
Tree	currentScript.declareLegacyNamespace = NodeUtil . assignNode ( assignNode ) ;
Code	currentScript.declareLegacyNamespace = NodeUtil . assignNode ( assignNode ) ;
Distance : 4

42
Tree	RemoveUnusedCode.Builder = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	RemoveUnusedCode.Builder = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

43
Tree	RemoveUnusedCode.Builder = new assignNode ( assignNode ) . getParent () ;
Code	RemoveUnusedCode.Builder = new assignNode ( assignNode ) . getParent () ;
Distance : 9

44
Tree	RemoveUnusedCode.Builder = NodeUtil . assignNode ( assignNode ) ;
Code	RemoveUnusedCode.Builder = NodeUtil . assignNode ( assignNode ) ;
Distance : 4

45
Tree	RemoveUnusedCode.Builder = new NodeUtil ( assignNode ) . getParent () ;
Code	RemoveUnusedCode.Builder = new NodeUtil ( assignNode ) . getParent () ;
Distance : 9

46
Tree	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Distance : 8

47
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () ;
Distance : 10

48
Tree	RemoveUnusedCode.Builder = assignNode . assignNode ( assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . assignNode ( assignNode ) ;
Distance : 5

49
Tree	this . NodeUtil = ( config.parseTypeSyntax ) assignNode . getParent () ;
Code	this . NodeUtil = ( config.parseTypeSyntax ) assignNode . getParent () ;
Distance : 8

50
Tree	this . maybeAliased = ( NodeUtil ) assignNode . getParent () ;
Code	this . maybeAliased = ( NodeUtil ) assignNode . getParent () ;
Distance : 6

51
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Distance : 7

52
Tree	RemoveUnusedCode.Builder = new objType.nominalType ( assignNode ) . getParent () ;
Code	RemoveUnusedCode.Builder = new objType.nominalType ( assignNode ) . getParent () ;
Distance : 9

53
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Distance : 7

54
Tree	RemoveUnusedCode.Builder = NodeUtil . getParent ( this . assignNode ) ;
Code	RemoveUnusedCode.Builder = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

55
Tree	this . maybeAliased = ! NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ! NodeUtil . getParent () . isExprResult () ;
Distance : 6

56
Tree	currentScript.declareLegacyNamespace = new assignNode ( assignNode ) . getParent () ;
Code	currentScript.declareLegacyNamespace = new assignNode ( assignNode ) . getParent () ;
Distance : 9

57
Tree	this . NodeUtil = ! NodeUtil . getParent () . isExprResult () ;
Code	this . NodeUtil = ! NodeUtil . getParent () . isExprResult () ;
Distance : 7

58
Tree	RemoveUnusedCode.Builder = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

59
Tree	this . maybeAliased = ( JSTypeNative.NO_OBJECT_TYPE ) assignNode . getParent () ;
Code	this . maybeAliased = ( JSTypeNative.NO_OBJECT_TYPE ) assignNode . getParent () ;
Distance : 7

60
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Distance : 7

61
Tree	this . maybeAliased = ( config.parseTypeSyntax ) assignNode . getParent () ;
Code	this . maybeAliased = ( config.parseTypeSyntax ) assignNode . getParent () ;
Distance : 7

62
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 9

63
Tree	this . NodeUtil = ( assignNode ) assignNode . getParent () ;
Code	this . NodeUtil = ( assignNode ) assignNode . getParent () ;
Distance : 8

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( ( x < NUMBER_CONSTANT  negativeZero ) && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (36 (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (250{val=||}) (800{val=negativeZero})) (215{val=)})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/38/parent/src_com_google_javascript_jscomp_CodeConsumer.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 120
Wrong
========================================================================
False

0
Tree	if ( x < NUMBER_CONSTANT && current.scopes == current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Distance : 5

1
Tree	if ( x < NUMBER_CONSTANT && current.scopes == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

2
Tree	if ( x < NUMBER_CONSTANT && current.scopes == DecompositionType.UNDECOMPOSABLE ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == DecompositionType.UNDECOMPOSABLE ) { add ( STRING_CONSTANT ) ; }
Distance : 5

3
Tree	if ( x < NUMBER_CONSTANT && current.scopes == currentScript.rootNode ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == currentScript.rootNode ) { add ( STRING_CONSTANT ) ; }
Distance : 5

4
Tree	if ( x == NUMBER_CONSTANT && current.scopes == current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Distance : 6

5
Tree	if ( x < NUMBER_CONSTANT && current.scopes [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

6
Tree	if ( x < NUMBER_CONSTANT && x && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

7
Tree	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

8
Tree	if ( x == NUMBER_CONSTANT && current.scopes == DevMode.START_AND_END ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == DevMode.START_AND_END ) { add ( STRING_CONSTANT ) ; }
Distance : 6

9
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

10
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

11
Tree	if ( x < NUMBER_CONSTANT && prev && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

12
Tree	if ( x == NUMBER_CONSTANT && current.scopes == DecompositionType.UNDECOMPOSABLE ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == DecompositionType.UNDECOMPOSABLE ) { add ( STRING_CONSTANT ) ; }
Distance : 6

13
Tree	if ( x < NUMBER_CONSTANT && x > CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

14
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

15
Tree	if ( x < NUMBER_CONSTANT && pass2Index [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pass2Index [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

16
Tree	if ( x < NUMBER_CONSTANT && x > Kind.INTERFACE ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > Kind.INTERFACE ) { add ( STRING_CONSTANT ) ; }
Distance : 6

17
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

18
Tree	if ( x < NUMBER_CONSTANT && SourceMapInput [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SourceMapInput [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

19
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Distance : 9

20
Tree	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

21
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; break; }
Distance : 8

22
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

23
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

24
Tree	if ( x < NUMBER_CONSTANT && objType.nominalType == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && objType.nominalType == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

25
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

26
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

27
Tree	if ( x < NUMBER_CONSTANT && x > objType.nominalType ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > objType.nominalType ) { add ( STRING_CONSTANT ) ; }
Distance : 6

28
Tree	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

29
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

30
Tree	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

31
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

32
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 7

33
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 7

34
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

35
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

36
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 3

37
Tree	if ( x < NUMBER_CONSTANT && prev - CHAR_CONS < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - CHAR_CONS < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

38
Tree	if ( x < NUMBER_CONSTANT && objType.nominalType != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && objType.nominalType != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

39
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

40
Tree	if ( x < NUMBER_CONSTANT && Traverser [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Traverser [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

41
Tree	if ( x < NUMBER_CONSTANT && x == x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

42
Tree	if ( x < NUMBER_CONSTANT && x != objType.nominalType ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != objType.nominalType ) { add ( STRING_CONSTANT ) ; }
Distance : 6

43
Tree	if ( x < NUMBER_CONSTANT && options.j2clPassMode == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.j2clPassMode == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

44
Tree	if ( x < NUMBER_CONSTANT && prev - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

45
Tree	if ( x < NUMBER_CONSTANT && objType.nominalType == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && objType.nominalType == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

46
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

47
Tree	if ( x < NUMBER_CONSTANT && x == x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 6

48
Tree	if ( x < NUMBER_CONSTANT && options.inlineFunctions != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.inlineFunctions != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

49
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

50
Tree	if ( x == NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 6

51
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 3

52
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

53
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

54
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

55
Tree	if ( x < NUMBER_CONSTANT && options.inlineFunctions == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.inlineFunctions == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

56
Tree	if ( x < NUMBER_CONSTANT && x > ImmutableSet.Builder ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > ImmutableSet.Builder ) { add ( STRING_CONSTANT ) ; }
Distance : 6

57
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; default: }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; default: }
Distance : 7

58
Tree	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

59
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; break; }
Distance : 7

60
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 3

61
Tree	if ( x < NUMBER_CONSTANT && options.j2clPassMode != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.j2clPassMode != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

62
Tree	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

63
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

64
Tree	if ( x < NUMBER_CONSTANT && x >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Distance : 9

65
Tree	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

66
Tree	if ( x < NUMBER_CONSTANT && x >= this . x . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 9

67
Tree	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 10

68
Tree	if ( x == NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

69
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

70
Tree	if ( x < NUMBER_CONSTANT && options.inlineFunctions == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.inlineFunctions == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

71
Tree	if ( x < NUMBER_CONSTANT && x - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

72
Tree	if ( x < NUMBER_CONSTANT && x != FunctionFlavor.GENERATOR ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != FunctionFlavor.GENERATOR ) { add ( STRING_CONSTANT ) ; }
Distance : 6

73
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

74
Tree	if ( x < NUMBER_CONSTANT && current.scopes == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

75
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

76
Tree	if ( x == NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

77
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Distance : 8

78
Tree	if ( x < NUMBER_CONSTANT && current.scopes != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

79
Tree	if ( x < NUMBER_CONSTANT && current.scopes == Mode.ES_NEXT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == Mode.ES_NEXT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

80
Tree	if ( x < NUMBER_CONSTANT && x - CHAR_CONS < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - CHAR_CONS < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

81
Tree	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

82
Tree	if ( x < NUMBER_CONSTANT && options.j2clPassMode == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.j2clPassMode == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

83
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

84
Tree	if ( x < NUMBER_CONSTANT && x != tree.access ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != tree.access ) { add ( STRING_CONSTANT ) ; }
Distance : 6

85
Tree	if ( x < NUMBER_CONSTANT && prev > CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

86
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

87
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

88
Tree	if ( x < NUMBER_CONSTANT && x > other.nominalType ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > other.nominalType ) { add ( STRING_CONSTANT ) ; }
Distance : 6

89
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; break; }
Distance : 7

90
Tree	if ( x == NUMBER_CONSTANT && current.scopes == currentScript.rootNode ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == currentScript.rootNode ) { add ( STRING_CONSTANT ) ; }
Distance : 6

91
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

92
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 3

93
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

94
Tree	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

95
Tree	if ( x < NUMBER_CONSTANT && x >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 10

96
Tree	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

97
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

98
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

99
Tree	if ( x < NUMBER_CONSTANT && x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

100
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

101
Tree	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

102
Tree	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

103
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

104
Tree	if ( x == NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

105
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

106
Tree	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

107
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

108
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

109
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

110
Tree	if ( x < NUMBER_CONSTANT && prev - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

111
Tree	if ( x < NUMBER_CONSTANT && x != that.cache.functionScope ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != that.cache.functionScope ) { add ( STRING_CONSTANT ) ; }
Distance : 6

112
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

113
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

114
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 8

115
Tree	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

116
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 6

117
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

118
Tree	if ( x < NUMBER_CONSTANT && prev >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 10

119
Tree	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 9

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
cc . listSeparator () ;
-------------------------------------------------------------------------------
Child code is: 
cc . addOp ( opStr , true ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=listSeparator}) (216{val=()})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=addOp}) (214{val=(}) (800{val=opStr}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/34/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	currentArgumentsAccess ;
Code	currentArgumentsAccess ;
Distance : 8

1
Tree	cc = cc ;
Code	cc = cc ;
Distance : 7

2
Tree	listSeparator () . listSeparator ( cc ) ;
Code	listSeparator () . listSeparator ( cc ) ;
Distance : 6

3
Tree	listSeparator ( cc , cc ) ;
Code	listSeparator ( cc , cc ) ;
Distance : 5

4
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

5
Tree	addExpr ;
Code	addExpr ;
Distance : 8

6
Tree	cc () ;
Code	cc () ;
Distance : 7

7
Tree	listSeparator ( STRING_CONSTANT ) ; block
Code	listSeparator ( STRING_CONSTANT ) ; block
Distance : 7

8
Tree	cc = null ;
Code	cc = null ;
Distance : 7

9
Tree	cc () ; block
Code	cc () ; block
Distance : 8

10
Tree	cc = flags.rewritePolyfills ;
Code	cc = flags.rewritePolyfills ;
Distance : 7

11
Tree	cc () ;
Code	cc () ;
Distance : 7

12
Tree	listSeparator ( flags.chromePass ) ;
Code	listSeparator ( flags.chromePass ) ;
Distance : 6

13
Tree	cc . listSeparator ( STRING_CONSTANT ) ;
Code	cc . listSeparator ( STRING_CONSTANT ) ;
Distance : 4

14
Tree	listSeparator ( call.returnType ) ;
Code	listSeparator ( call.returnType ) ;
Distance : 6

15
Tree	cc . listSeparator ( true ) ;
Code	cc . listSeparator ( true ) ;
Distance : 3

16
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

17
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

18
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

19
Tree	cc . listSeparator ( cc , new addExpr ( cc ) ) ;
Code	cc . listSeparator ( cc , new addExpr ( cc ) ) ;
Distance : 7

20
Tree	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 7

21
Tree	cc ( cc , listSeparator () ) ;
Code	cc ( cc , listSeparator () ) ;
Distance : 5

22
Tree	cc = return; ;
Code	cc = return; ;
Distance : 7

23
Tree	cc . listSeparator ( cc , new SourceMapInput ( cc ) ) ;
Code	cc . listSeparator ( cc , new SourceMapInput ( cc ) ) ;
Distance : 7

24
Tree	flags.rewritePolyfills . listSeparator () ;
Code	flags.rewritePolyfills . listSeparator () ;
Distance : 7

25
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

26
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

27
Tree	cc . listSeparator ( Feature.REST_PARAMETERS , cc ) ;
Code	cc . listSeparator ( Feature.REST_PARAMETERS , cc ) ;
Distance : 3

28
Tree	cc = new ChangeVerifier <> () ;
Code	cc = new ChangeVerifier <> () ;
Distance : 7

29
Tree	cc = instance.declarations ;
Code	cc = instance.declarations ;
Distance : 7

30
Tree	cc ( cc ) ;
Code	cc ( cc ) ;
Distance : 5

31
Tree	this . cc = MatchResult.LOOSE_MATCH ;
Code	this . cc = MatchResult.LOOSE_MATCH ;
Distance : 7

32
Tree	listSeparator ( PassNames.AFTER_STANDARD_CHECKS ) ;
Code	listSeparator ( PassNames.AFTER_STANDARD_CHECKS ) ;
Distance : 6

33
Tree	listSeparator ( new NoResolvedType ( cc ) ) ;
Code	listSeparator ( new NoResolvedType ( cc ) ) ;
Distance : 7

34
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

35
Tree	cc = cc ;
Code	cc = cc ;
Distance : 7

36
Tree	cc = null ;
Code	cc = null ;
Distance : 7

37
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

38
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

39
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

40
Tree	this . cc = flags.rewritePolyfills ;
Code	this . cc = flags.rewritePolyfills ;
Distance : 7

41
Tree	cc = true ;
Code	cc = true ;
Distance : 6

42
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

43
Tree	cc = ModuleLoader.ResolutionMode.BROWSER ;
Code	cc = ModuleLoader.ResolutionMode.BROWSER ;
Distance : 7

44
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

45
Tree	listSeparator ( cc , cc ) ;
Code	listSeparator ( cc , cc ) ;
Distance : 5

46
Tree	cc ( true ) ;
Code	cc ( true ) ;
Distance : 4

47
Tree	listSeparator ( new MinimizeExitPoints ( cc ) ) ;
Code	listSeparator ( new MinimizeExitPoints ( cc ) ) ;
Distance : 7

48
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

49
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

50
Tree	cc = false ;
Code	cc = false ;
Distance : 7

51
Tree	cc . listSeparator ( instance.declarations ) ;
Code	cc . listSeparator ( instance.declarations ) ;
Distance : 4

52
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

53
Tree	cc . listSeparator ( Feature.REST_PARAMETERS ) ;
Code	cc . listSeparator ( Feature.REST_PARAMETERS ) ;
Distance : 4

54
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

55
Tree	listSeparator ( new BasicBlock ( cc ) ) ;
Code	listSeparator ( new BasicBlock ( cc ) ) ;
Distance : 7

56
Tree	listSeparator () . () ( cc ) ;
Code	listSeparator () . () ( cc ) ;
Distance : 6

57
Tree	listSeparator () ; block
Code	listSeparator () ; block
Distance : 9

58
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

59
Tree	cc . listSeparator ( ; ) ;
Code	cc . listSeparator ( ; ) ;
Distance : 4

60
Tree	listSeparator ( listSeparator () , cc . . () ) ;
Code	listSeparator ( listSeparator () , cc . . () ) ;
Distance : 9

61
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

62
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

63
Tree	cc = new CallSiteOptimizer ( cc ) ;
Code	cc = new CallSiteOptimizer ( cc ) ;
Distance : 6

64
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

65
Tree	listSeparator ( cc , cc () ) ;
Code	listSeparator ( cc , cc () ) ;
Distance : 6

66
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

67
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; of
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; of
Distance : 6

68
Tree	cc . listSeparator ( null ) ;
Code	cc . listSeparator ( null ) ;
Distance : 4

69
Tree	cc ( cc . listSeparator () ) ;
Code	cc ( cc . listSeparator () ) ;
Distance : 6

70
Tree	cc ( false ) ;
Code	cc ( false ) ;
Distance : 5

71
Tree	cc = new addExpr ( cc ) ;
Code	cc = new addExpr ( cc ) ;
Distance : 6

72
Tree	cc . listSeparator ( false ) ;
Code	cc . listSeparator ( false ) ;
Distance : 4

73
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

74
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

75
Tree	cc . listSeparator ( instance.declarations , cc ) ;
Code	cc . listSeparator ( instance.declarations , cc ) ;
Distance : 3

76
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

77
Tree	cc . listSeparator ( cc , true ) ;
Code	cc . listSeparator ( cc , true ) ;
Distance : 2

78
Tree	cc = cc ;
Code	cc = cc ;
Distance : 7

79
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

80
Tree	listSeparator ( false ) ;
Code	listSeparator ( false ) ;
Distance : 6

81
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

82
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

83
Tree	hoistNode ;
Code	hoistNode ;
Distance : 8

84
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

85
Tree	new Context.OTHER ( cc ) . listSeparator () ;
Code	new Context.OTHER ( cc ) . listSeparator () ;
Distance : 8

86
Tree	listSeparator ( cc , cc ) ;
Code	listSeparator ( cc , cc ) ;
Distance : 5

87
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 5

88
Tree	cc ( cc . listSeparator () ) ;
Code	cc ( cc . listSeparator () ) ;
Distance : 6

89
Tree	listSeparator ( cc . listSeparator () ) ;
Code	listSeparator ( cc . listSeparator () ) ;
Distance : 7

90
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

91
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

92
Tree	cc = new ChangeVerifier ( cc ) ;
Code	cc = new ChangeVerifier ( cc ) ;
Distance : 6

93
Tree	cc . listSeparator ( STRING_CONSTANT ) ;
Code	cc . listSeparator ( STRING_CONSTANT ) ;
Distance : 4

94
Tree	cc () ;
Code	cc () ;
Distance : 7

95
Tree	cc = J2clPassMode.AUTO ;
Code	cc = J2clPassMode.AUTO ;
Distance : 7

96
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

97
Tree	listSeparator ( Feature.REST_PARAMETERS ) ;
Code	listSeparator ( Feature.REST_PARAMETERS ) ;
Distance : 6

98
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

99
Tree	cc . listSeparator ( null ) ;
Code	cc . listSeparator ( null ) ;
Distance : 4

100
Tree	cc ( STRING_CONSTANT ) ;
Code	cc ( STRING_CONSTANT ) ;
Distance : 5

101
Tree	listSeparator ( NUMBER_CONSTANT ) ; of
Code	listSeparator ( NUMBER_CONSTANT ) ; of
Distance : 7

102
Tree	cc = new ArrayList <> () ;
Code	cc = new ArrayList <> () ;
Distance : 7

103
Tree	listSeparator ( NUMBER_CONSTANT ) ;
Code	listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

104
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

105
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

106
Tree	cc . listSeparator ( Feature.EXPONENT_OP ) ;
Code	cc . listSeparator ( Feature.EXPONENT_OP ) ;
Distance : 4

107
Tree	listSeparator ( new NominalTypeBuilderNti ( cc ) ) ;
Code	listSeparator ( new NominalTypeBuilderNti ( cc ) ) ;
Distance : 7

108
Tree	cc = continue; ;
Code	cc = continue; ;
Distance : 7

109
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

110
Tree	cc = true ;
Code	cc = true ;
Distance : 6

111
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

112
Tree	cc . listSeparator ( cc , true ) ;
Code	cc . listSeparator ( cc , true ) ;
Distance : 2

113
Tree	listSeparator ( STRING_CONSTANT ) ; of
Code	listSeparator ( STRING_CONSTANT ) ; of
Distance : 7

114
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

115
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

116
Tree	cc . listSeparator ( STRING_CONSTANT ) ;
Code	cc . listSeparator ( STRING_CONSTANT ) ;
Distance : 4

117
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

118
Tree	new cc () . listSeparator ( ; ) ;
Code	new cc () . listSeparator ( ; ) ;
Distance : 6

119
Tree	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 7

120
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

121
Tree	cc = cc ;
Code	cc = cc ;
Distance : 7

122
Tree	this . cc = instance.declarations ;
Code	this . cc = instance.declarations ;
Distance : 7

123
Tree	cc . listSeparator ( cc , new Context.OTHER ( cc ) ) ;
Code	cc . listSeparator ( cc , new Context.OTHER ( cc ) ) ;
Distance : 7

124
Tree	cc () . ; ( cc ) ;
Code	cc () . ; ( cc ) ;
Distance : 5

125
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

126
Tree	new cc () . listSeparator ( () ) ;
Code	new cc () . listSeparator ( () ) ;
Distance : 6

127
Tree	listSeparator ( . , listSeparator () ) ;
Code	listSeparator ( . , listSeparator () ) ;
Distance : 6

128
Tree	listSeparator ( cc , listSeparator () ) ;
Code	listSeparator ( cc , listSeparator () ) ;
Distance : 6

129
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

130
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

131
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

132
Tree	cc . listSeparator ( cc , new RewriteRequiresForEs6Modules ( cc ) ) ;
Code	cc . listSeparator ( cc , new RewriteRequiresForEs6Modules ( cc ) ) ;
Distance : 7

133
Tree	cc . listSeparator ( false ) ;
Code	cc . listSeparator ( false ) ;
Distance : 4

134
Tree	cc . listSeparator ( Feature.EXPONENT_OP , cc ) ;
Code	cc . listSeparator ( Feature.EXPONENT_OP , cc ) ;
Distance : 3

135
Tree	cc . listSeparator ( JSTypeNative.ITERABLE_TYPE , cc ) ;
Code	cc . listSeparator ( JSTypeNative.ITERABLE_TYPE , cc ) ;
Distance : 3

136
Tree	new addExpr ( cc ) . listSeparator () ;
Code	new addExpr ( cc ) . listSeparator () ;
Distance : 8

137
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

138
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

139
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

140
Tree	this . cc . listSeparator ( () ) ;
Code	this . cc . listSeparator ( () ) ;
Distance : 6

141
Tree	listSeparator () ; of
Code	listSeparator () ; of
Distance : 9

142
Tree	this . cc = Reach.LOCAL_ONLY ;
Code	this . cc = Reach.LOCAL_ONLY ;
Distance : 7

143
Tree	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 8

144
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

145
Tree	listSeparator ( cc . listSeparator () ) ;
Code	listSeparator ( cc . listSeparator () ) ;
Distance : 7

146
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

147
Tree	cc = false ;
Code	cc = false ;
Distance : 7

148
Tree	listSeparator ( STRING_CONSTANT ) ;
Code	listSeparator ( STRING_CONSTANT ) ;
Distance : 6

149
Tree	listSeparator ( true ) ;
Code	listSeparator ( true ) ;
Distance : 5

150
Tree	listSeparator () ;
Code	listSeparator () ;
Distance : 8

151
Tree	cc = new CallSiteOptimizer <> () ;
Code	cc = new CallSiteOptimizer <> () ;
Distance : 7

152
Tree	cc . listSeparator ( ; , cc ) ;
Code	cc . listSeparator ( ; , cc ) ;
Distance : 3

153
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

154
Tree	cc . listSeparator ( null ) ;
Code	cc . listSeparator ( null ) ;
Distance : 4

155
Tree	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Code	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Distance : 9

156
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

157
Tree	new SourceMapInput ( cc ) . listSeparator () ;
Code	new SourceMapInput ( cc ) . listSeparator () ;
Distance : 8

158
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; block
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; block
Distance : 6

159
Tree	cc . listSeparator ( true ) ;
Code	cc . listSeparator ( true ) ;
Distance : 3

160
Tree	new currentArgumentsAccess ( cc ) . listSeparator () ;
Code	new currentArgumentsAccess ( cc ) . listSeparator () ;
Distance : 8

161
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

162
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

163
Tree	cc . listSeparator ( JSTypeNative.ITERABLE_TYPE ) ;
Code	cc . listSeparator ( JSTypeNative.ITERABLE_TYPE ) ;
Distance : 4

164
Tree	flags.rewritePolyfills = true ;
Code	flags.rewritePolyfills = true ;
Distance : 7

165
Tree	addExpr = true ;
Code	addExpr = true ;
Distance : 7

166
Tree	cc () ; of
Code	cc () ; of
Distance : 8

167
Tree	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 8

168
Tree	emptiedClinitMethods ;
Code	emptiedClinitMethods ;
Distance : 8

169
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

170
Tree	testDuplicate_shorthand = true ;
Code	testDuplicate_shorthand = true ;
Distance : 7

171
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

172
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

173
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

174
Tree	cc ( cc ) ;
Code	cc ( cc ) ;
Distance : 5

175
Tree	new cc () . listSeparator ( cc ) ;
Code	new cc () . listSeparator ( cc ) ;
Distance : 6

176
Tree	Context.OTHER = true ;
Code	Context.OTHER = true ;
Distance : 7

177
Tree	cc = new addExpr <> () ;
Code	cc = new addExpr <> () ;
Distance : 7

178
Tree	cc ( cc , cc ) ;
Code	cc ( cc , cc ) ;
Distance : 4

179
Tree	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Code	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Distance : 9

180
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

181
Tree	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Code	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Distance : 9

182
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

183
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

184
Tree	cc . listSeparator ( STRING_CONSTANT ) ;
Code	cc . listSeparator ( STRING_CONSTANT ) ;
Distance : 4

185
Tree	new cc () . listSeparator ( cc ) ;
Code	new cc () . listSeparator ( cc ) ;
Distance : 6

186
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

187
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

188
Tree	cc . listSeparator ( null ) ;
Code	cc . listSeparator ( null ) ;
Distance : 4

189
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

190
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

191
Tree	cc = new ArrayList ( cc ) ;
Code	cc = new ArrayList ( cc ) ;
Distance : 6

192
Tree	cc ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	cc ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 4

193
Tree	testDuplicate_shorthand . listSeparator () ;
Code	testDuplicate_shorthand . listSeparator () ;
Distance : 7

194
Tree	cc ( NUMBER_CONSTANT ) ;
Code	cc ( NUMBER_CONSTANT ) ;
Distance : 5

195
Tree	Context.OTHER . listSeparator () ;
Code	Context.OTHER . listSeparator () ;
Distance : 7

196
Tree	addExpr . listSeparator () ;
Code	addExpr . listSeparator () ;
Distance : 7

197
Tree	listSeparator ( NUMBER_CONSTANT ) ; block
Code	listSeparator ( NUMBER_CONSTANT ) ; block
Distance : 7

198
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

199
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

========================================================================


========================================================================
Example Number: 18
Parent Code is: 
options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
-------------------------------------------------------------------------------
Child code is: 
options.dependencyOptions . needsManagement () && options.closurePass
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (38 (207{val=!}) (40{val=options.skipAllPasses})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/31/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 128
Wrong
========================================================================
False

0
Tree	retType + STRING_CONSTANT == NUMBER_CONSTANT
Code	retType + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

1
Tree	bundler + STRING_CONSTANT == NUMBER_CONSTANT
Code	bundler + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

2
Tree	statements + STRING_CONSTANT == NUMBER_CONSTANT
Code	statements + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

3
Tree	varsInFunctionBody + STRING_CONSTANT == NUMBER_CONSTANT
Code	varsInFunctionBody + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

4
Tree	this . checkTypes != options.dependencyOptions
Code	this . checkTypes != options.dependencyOptions
Distance : 5

5
Tree	bundler . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	bundler . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

6
Tree	retType . needsManagement ( null ) > NUMBER_CONSTANT
Code	retType . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

7
Tree	bundler . needsManagement ( polyfillName . class ) < else
Code	bundler . needsManagement ( polyfillName . class ) < else
Distance : 8

8
Tree	retType . needsManagement ( assignment.oldName . class ) < else
Code	retType . needsManagement ( assignment.oldName . class ) < else
Distance : 8

9
Tree	statements . needsManagement ( polyfillName . class ) < else
Code	statements . needsManagement ( polyfillName . class ) < else
Distance : 8

10
Tree	retType < retType + STRING_CONSTANT
Code	retType < retType + STRING_CONSTANT
Distance : 6

11
Tree	bundler < retType + STRING_CONSTANT
Code	bundler < retType + STRING_CONSTANT
Distance : 6

12
Tree	curScope < retType + STRING_CONSTANT
Code	curScope < retType + STRING_CONSTANT
Distance : 6

13
Tree	noSideEffectExterns < retType + STRING_CONSTANT
Code	noSideEffectExterns < retType + STRING_CONSTANT
Distance : 6

14
Tree	this . optimizePropertyIndex . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

15
Tree	this . definitionNodeByDefinitionSite != options.dependencyOptions
Code	this . definitionNodeByDefinitionSite != options.dependencyOptions
Distance : 5

16
Tree	options.dependencyOptions < constructorNameNode == NUMBER_CONSTANT
Code	options.dependencyOptions < constructorNameNode == NUMBER_CONSTANT
Distance : 5

17
Tree	retType . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

18
Tree	options.dependencyOptions < noSideEffectExterns
Code	options.dependencyOptions < noSideEffectExterns
Distance : 5

19
Tree	null != LinkedHashMultimap . needsManagement ( null )
Code	null != LinkedHashMultimap . needsManagement ( null )
Distance : 6

20
Tree	options.dependencyOptions != null == NUMBER_CONSTANT
Code	options.dependencyOptions != null == NUMBER_CONSTANT
Distance : 5

21
Tree	null != previousMap . needsManagement ( naf . class )
Code	null != previousMap . needsManagement ( naf . class )
Distance : 8

22
Tree	options.dependencyOptions < retType
Code	options.dependencyOptions < retType
Distance : 5

23
Tree	null != constructorNameNode . needsManagement ( null )
Code	null != constructorNameNode . needsManagement ( null )
Distance : 6

24
Tree	options.dependencyOptions < Objects
Code	options.dependencyOptions < Objects
Distance : 5

25
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT
Distance : 6

26
Tree	retType + STRING_CONSTANT
Code	retType + STRING_CONSTANT
Distance : 6

27
Tree	varsInFunctionBody + STRING_CONSTANT
Code	varsInFunctionBody + STRING_CONSTANT
Distance : 6

28
Tree	this . optimizePropertyIndex == null == NUMBER_CONSTANT
Code	this . optimizePropertyIndex == null == NUMBER_CONSTANT
Distance : 6

29
Tree	this . definitionNodeByDefinitionSite == null == NUMBER_CONSTANT
Code	this . definitionNodeByDefinitionSite == null == NUMBER_CONSTANT
Distance : 6

30
Tree	retType < noSideEffectExterns == NUMBER_CONSTANT
Code	retType < noSideEffectExterns == NUMBER_CONSTANT
Distance : 6

31
Tree	bundler < contextType == NUMBER_CONSTANT
Code	bundler < contextType == NUMBER_CONSTANT
Distance : 6

32
Tree	noSideEffectExterns + STRING_CONSTANT
Code	noSideEffectExterns + STRING_CONSTANT
Distance : 6

33
Tree	retType < contextType == NUMBER_CONSTANT
Code	retType < contextType == NUMBER_CONSTANT
Distance : 6

34
Tree	this . instanceProps == null == NUMBER_CONSTANT
Code	this . instanceProps == null == NUMBER_CONSTANT
Distance : 6

35
Tree	this . checkTypes == null == NUMBER_CONSTANT
Code	this . checkTypes == null == NUMBER_CONSTANT
Distance : 6

36
Tree	bundler < noSideEffectExterns == NUMBER_CONSTANT
Code	bundler < noSideEffectExterns == NUMBER_CONSTANT
Distance : 6

37
Tree	varsInFunctionBody . needsManagement ( null ) > NUMBER_CONSTANT
Code	varsInFunctionBody . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

38
Tree	this . instanceProps != options.dependencyOptions
Code	this . instanceProps != options.dependencyOptions
Distance : 5

39
Tree	retType && previousMap . needsManagement ( null ) && !
Code	retType && previousMap . needsManagement ( null ) && !
Distance : 7

40
Tree	this . checkTypes . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . checkTypes . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

41
Tree	bundler . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	bundler . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

42
Tree	retType . needsManagement ( assignment.oldName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType . needsManagement ( assignment.oldName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

43
Tree	statements . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	statements . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

44
Tree	retType && previousMap . needsManagement ( sub1 . class ) && !
Code	retType && previousMap . needsManagement ( sub1 . class ) && !
Distance : 9

45
Tree	curScope . mockCompiler . needsManagement ( null )
Code	curScope . mockCompiler . needsManagement ( null )
Distance : 6

46
Tree	noSideEffectExterns . mockCompiler . needsManagement ( null )
Code	noSideEffectExterns . mockCompiler . needsManagement ( null )
Distance : 6

47
Tree	retType . needsManagement ( polyfillName ) == options.dependencyOptions . needsManagement ()
Code	retType . needsManagement ( polyfillName ) == options.dependencyOptions . needsManagement ()
Distance : 9

48
Tree	bundler . needsManagement ( polyfillName ) == options.dependencyOptions . options.closurePass ()
Code	bundler . needsManagement ( polyfillName ) == options.dependencyOptions . options.closurePass ()
Distance : 8

49
Tree	bundler && previousMap . needsManagement ( null ) && !
Code	bundler && previousMap . needsManagement ( null ) && !
Distance : 7

50
Tree	retType . needsManagement ( null ) < else
Code	retType . needsManagement ( null ) < else
Distance : 6

51
Tree	null != this . optimizePropertyIndex . needsManagement () == NUMBER_CONSTANT
Code	null != this . optimizePropertyIndex . needsManagement () == NUMBER_CONSTANT
Distance : 7

52
Tree	null != this . checkTypes . needsManagement ( useSitesByName , this . checkTypes )
Code	null != this . checkTypes . needsManagement ( useSitesByName , this . checkTypes )
Distance : 12

53
Tree	this . lastCodeChangeQuery . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . lastCodeChangeQuery . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

54
Tree	bundler . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Code	bundler . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Distance : 8

55
Tree	retType . needsManagement ( assignment.oldName . class ) > NUMBER_CONSTANT
Code	retType . needsManagement ( assignment.oldName . class ) > NUMBER_CONSTANT
Distance : 8

56
Tree	bundler . needsManagement ( null ) < else
Code	bundler . needsManagement ( null ) < else
Distance : 6

57
Tree	null != this . checkTypes . needsManagement ( useSitesByName , this . currentScope )
Code	null != this . checkTypes . needsManagement ( useSitesByName , this . currentScope )
Distance : 12

58
Tree	statements && previousMap . needsManagement ( null ) && !
Code	statements && previousMap . needsManagement ( null ) && !
Distance : 7

59
Tree	statements . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Code	statements . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Distance : 8

60
Tree	bundler . needsManagement ( ( assignment.oldName [] ) null ) == else
Code	bundler . needsManagement ( ( assignment.oldName [] ) null ) == else
Distance : 10

61
Tree	null != this . checkTypes . needsManagement ( useSitesByName , this . runSmartNameRemoval )
Code	null != this . checkTypes . needsManagement ( useSitesByName , this . runSmartNameRemoval )
Distance : 12

62
Tree	retType . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

63
Tree	null != this . disambiguateProperties . needsManagement () == NUMBER_CONSTANT
Code	null != this . disambiguateProperties . needsManagement () == NUMBER_CONSTANT
Distance : 7

64
Tree	retType . needsManagement ( ( assignment.oldName [] ) null ) == else
Code	retType . needsManagement ( ( assignment.oldName [] ) null ) == else
Distance : 10

65
Tree	noSideEffectExterns && previousMap . needsManagement ( null ) && !
Code	noSideEffectExterns && previousMap . needsManagement ( null ) && !
Distance : 7

66
Tree	retType > noSideEffectExterns + STRING_CONSTANT
Code	retType > noSideEffectExterns + STRING_CONSTANT
Distance : 6

67
Tree	options.dependencyOptions != break; == NUMBER_CONSTANT
Code	options.dependencyOptions != break; == NUMBER_CONSTANT
Distance : 5

68
Tree	retType && previousMap . needsManagement ( naf . class ) && !
Code	retType && previousMap . needsManagement ( naf . class ) && !
Distance : 9

69
Tree	retType options.dependencyOptions mockCompiler . needsManagement ( null )
Code	retType options.dependencyOptions mockCompiler . needsManagement ( null )
Distance : 5

70
Tree	options.dependencyOptions != return; == NUMBER_CONSTANT
Code	options.dependencyOptions != return; == NUMBER_CONSTANT
Distance : 5

71
Tree	retType && previousMap . needsManagement ( windowCtor . class ) && !
Code	retType && previousMap . needsManagement ( windowCtor . class ) && !
Distance : 9

72
Tree	retType . needsManagement ( ( logStats.pass [] ) null ) == else
Code	retType . needsManagement ( ( logStats.pass [] ) null ) == else
Distance : 10

73
Tree	bundler > noSideEffectExterns + STRING_CONSTANT
Code	bundler > noSideEffectExterns + STRING_CONSTANT
Distance : 6

74
Tree	bundler && previousMap . needsManagement ( sub1 . class ) && !
Code	bundler && previousMap . needsManagement ( sub1 . class ) && !
Distance : 9

75
Tree	bundler . needsManagement ( ( logStats.pass [] ) null ) == else
Code	bundler . needsManagement ( ( logStats.pass [] ) null ) == else
Distance : 10

76
Tree	this . optimizePropertyIndex . needsManagement ( symbols , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( symbols , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

77
Tree	statements . needsManagement ( null ) < else
Code	statements . needsManagement ( null ) < else
Distance : 6

78
Tree	varsInFunctionBody > noSideEffectExterns + STRING_CONSTANT
Code	varsInFunctionBody > noSideEffectExterns + STRING_CONSTANT
Distance : 6

79
Tree	bundler . mockCompiler . needsManagement ( null )
Code	bundler . mockCompiler . needsManagement ( null )
Distance : 6

80
Tree	retType . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Code	retType . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Distance : 8

81
Tree	varsInFunctionBody . needsManagement ( null ) < else
Code	varsInFunctionBody . needsManagement ( null ) < else
Distance : 6

82
Tree	retType . needsManagement ( assignment.oldName ) == options.dependencyOptions . needsManagement ()
Code	retType . needsManagement ( assignment.oldName ) == options.dependencyOptions . needsManagement ()
Distance : 9

83
Tree	null != this . checkTypes . needsManagement ( useSitesByName , this . templateLineno )
Code	null != this . checkTypes . needsManagement ( useSitesByName , this . templateLineno )
Distance : 12

84
Tree	statements . needsManagement ( polyfillName ) == options.dependencyOptions . () ()
Code	statements . needsManagement ( polyfillName ) == options.dependencyOptions . () ()
Distance : 9

85
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT TypeInferenceMode.NEITHER
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT TypeInferenceMode.NEITHER
Distance : 5

86
Tree	retType > varsInFunctionBody + STRING_CONSTANT
Code	retType > varsInFunctionBody + STRING_CONSTANT
Distance : 6

87
Tree	this . optimizePropertyIndex . needsManagement ( templateTypes , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( templateTypes , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

88
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT super
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT super
Distance : 5

89
Tree	options.dependencyOptions < retType == NUMBER_CONSTANT
Code	options.dependencyOptions < retType == NUMBER_CONSTANT
Distance : 5

90
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT :
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT :
Distance : 5

91
Tree	this . optimizePropertyIndex . needsManagement ( useSitesByName , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( useSitesByName , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

92
Tree	null != this . cache . needsManagement () == NUMBER_CONSTANT
Code	null != this . cache . needsManagement () == NUMBER_CONSTANT
Distance : 7

93
Tree	this . optimizePropertyIndex . needsManagement ( templateTypes , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( templateTypes , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

94
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT :
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT :
Distance : 6

95
Tree	this . optimizePropertyIndex . needsManagement ( useSitesByName , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( useSitesByName , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

96
Tree	options.dependencyOptions != default: == NUMBER_CONSTANT
Code	options.dependencyOptions != default: == NUMBER_CONSTANT
Distance : 5

97
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT super
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT super
Distance : 6

98
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT TypeInferenceMode.NEITHER
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT TypeInferenceMode.NEITHER
Distance : 6

99
Tree	options.dependencyOptions < Objects == NUMBER_CONSTANT
Code	options.dependencyOptions < Objects == NUMBER_CONSTANT
Distance : 5

100
Tree	null != namedExport . needsManagement ( refName . class )
Code	null != namedExport . needsManagement ( refName . class )
Distance : 8

101
Tree	options.dependencyOptions < noSideEffectExterns == NUMBER_CONSTANT
Code	options.dependencyOptions < noSideEffectExterns == NUMBER_CONSTANT
Distance : 5

102
Tree	null != this . checkTypes . needsManagement () == NUMBER_CONSTANT
Code	null != this . checkTypes . needsManagement () == NUMBER_CONSTANT
Distance : 7

103
Tree	bundler . needsManagement ( null ) > NUMBER_CONSTANT
Code	bundler . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

104
Tree	options.dependencyOptions < constructorNameNode
Code	options.dependencyOptions < constructorNameNode
Distance : 5

105
Tree	this . optimizePropertyIndex != options.dependencyOptions
Code	this . optimizePropertyIndex != options.dependencyOptions
Distance : 5

106
Tree	null != previousMap . needsManagement ( refName . class )
Code	null != previousMap . needsManagement ( refName . class )
Distance : 8

107
Tree	null != namedExport . needsManagement ( naf . class )
Code	null != namedExport . needsManagement ( naf . class )
Distance : 8

108
Tree	statements . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	statements . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

109
Tree	statements . needsManagement ( null ) > NUMBER_CONSTANT
Code	statements . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

110
Tree	this . definitionNodeByDefinitionSite . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . definitionNodeByDefinitionSite . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

111
Tree	varsInFunctionBody . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	varsInFunctionBody . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

112
Tree	retType < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

113
Tree	retType < noSideEffectExterns == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType < noSideEffectExterns == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

114
Tree	bundler < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	bundler < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

115
Tree	bundler < noSideEffectExterns == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	bundler < noSideEffectExterns == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

116
Tree	this . optimizePropertyIndex . needsManagement ( symbols , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( symbols , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

117
Tree	curScope + STRING_CONSTANT
Code	curScope + STRING_CONSTANT
Distance : 6

118
Tree	this . optimizePropertyIndex . needsManagement ( refName , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( refName , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

119
Tree	this . optimizePropertyIndex . needsManagement ( refName , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( refName , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

120
Tree	null != previousMap . needsManagement ( null )
Code	null != previousMap . needsManagement ( null )
Distance : 6

121
Tree	retType . needsManagement ( polyfillName . class ) < else
Code	retType . needsManagement ( polyfillName . class ) < else
Distance : 8

122
Tree	null != namedExport . needsManagement ( null )
Code	null != namedExport . needsManagement ( null )
Distance : 6

123
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 5

124
Tree	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.skipAllPasses
Code	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.skipAllPasses
Distance : 4

125
Tree	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass TypeInferenceMode.NEITHER
Code	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass TypeInferenceMode.NEITHER
Distance : 4

126
Tree	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.skipAllPasses super
Code	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.skipAllPasses super
Distance : 5

127
Tree	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.skipAllPasses :
Code	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.skipAllPasses :
Distance : 5

========================================================================


========================================================================
Example Number: 19
Parent Code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs , root ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverse}) (214{val=(}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverseRoots}) (214{val=(}) (800{val=externs}) (234{val=,}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/30/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 136
Wrong
========================================================================
False

0
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( root ) ; }
Distance : 4

1
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( root ) ; }
Distance : 5

2
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( externs ) ; }
Distance : 4

3
Tree	{ ( new NodeTraversal ( compiler , null , true ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , true ) ) . traverseRoots ( root ) ; }
Distance : 5

4
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( root ) ; }
Distance : 5

5
Tree	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverseRoots ( root ) ; }
Distance : 7

6
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , null , false ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , null , false ) . traverseRoots ( root ) , null ) ; }
Distance : 9

7
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 11

8
Tree	{ compiler . traverse ( compiler . traverse ( Locale.US ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( Locale.US ) , null ) ; }
Distance : 11

9
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 5

10
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , null ) ; }
Distance : 9

11
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 7

12
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , - ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , - ) ; }
Distance : 4

13
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( root ) ; }
Distance : 6

14
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( root ) ; }
Distance : 4

15
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Distance : 11

16
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , - ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , - ) ; }
Distance : 7

17
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , - ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , - ) ; }
Distance : 7

18
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 11

19
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , StringBuilder ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , StringBuilder ) ) . traverseRoots ( root ) ; }
Distance : 4

20
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , null ) ; }
Distance : 9

21
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 13

22
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , shouldPreserve ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , shouldPreserve ) ; }
Distance : 6

23
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , CHAR_CONS ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , CHAR_CONS ) ; }
Distance : 7

24
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Distance : 8

25
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverseRoots ( root ) ; }
Distance : 4

26
Tree	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverseRoots ( root ) ; }
Distance : 7

27
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , ToStringContext.TO_STRING ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , ToStringContext.TO_STRING ) ) . traverseRoots ( externs ) ; }
Distance : 4

28
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , null , true ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , null , true ) . traverseRoots ( root ) , null ) ; }
Distance : 9

29
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( externs ) ; }
Distance : 5

30
Tree	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 5

31
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , null ) ; }
Distance : 8

32
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 13

33
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( true ) ) ; }
Distance : 10

34
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( externs ) ; }
Distance : 4

35
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Distance : 8

36
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( externs ) ; }
Distance : 5

37
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , FunctionVisitor ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , FunctionVisitor ) ) . traverseRoots ( root ) ; }
Distance : 4

38
Tree	{ traverse ( compiler , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverse ( compiler , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Distance : 10

39
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , null ) ; }
Distance : 8

40
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; }
Distance : 5

41
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 7

42
Tree	{ compiler . traverse ( compiler . traverseRoots ( null , true ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverseRoots ( null , true ) , null ) ; }
Distance : 12

43
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , invalidDeref ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , invalidDeref ) ; }
Distance : 7

44
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , CHAR_CONS ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , CHAR_CONS ) ; }
Distance : 7

45
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , shouldPreserve ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , shouldPreserve ) ; }
Distance : 6

46
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Distance : 13

47
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , invalidDeref ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , invalidDeref ) ; }
Distance : 7

48
Tree	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , > ) ; }
Code	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , > ) ; }
Distance : 11

49
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root , root ) ) ; }
Distance : 9

50
Tree	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverseRoots ( externs ) ; }
Distance : 7

51
Tree	{ compiler . traverseRoots ( compiler . traverseRoots ( null , true ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverseRoots ( null , true ) , null ) ; }
Distance : 12

52
Tree	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 5

53
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , null , true ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , null , true ) . traverseRoots ( root ) , null ) ; }
Distance : 9

54
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( externs , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( externs , root ) ) ; }
Distance : 7

55
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , [] ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , [] ) ; }
Distance : 4

56
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , parts.length ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , parts.length ) ; }
Distance : 4

57
Tree	{ compiler . traverse ( compiler . traverse ( null , true ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( null , true ) , null ) ; }
Distance : 12

58
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( ! ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( ! ) ; }
Distance : 13

59
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 4

60
Tree	{ compiler . traverseRoots ( compiler . traverse ( null , true ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( null , true ) , null ) ; }
Distance : 12

61
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverse ( externs ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverse ( externs ) ; }
Distance : 13

62
Tree	{ compiler . traverse ( traverseRoots ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( traverseRoots ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Distance : 15

63
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 6

64
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( root ) ; }
Distance : 4

65
Tree	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Code	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Distance : 12

66
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Distance : 9

67
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Distance : 9

68
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 10

69
Tree	{ ( new NodeTraversal ( compiler , null , true ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , true ) ) . traverseRoots ( externs ) ; }
Distance : 5

70
Tree	{ compiler . traverseRoots ( traverse ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( traverse ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Distance : 15

71
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root ) , null ) ; }
Distance : 8

72
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Distance : 9

73
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Distance : 11

74
Tree	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root ) ) ; }
Code	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root ) ) ; }
Distance : 11

75
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Distance : 6

76
Tree	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

77
Tree	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 11

78
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Distance : 9

79
Tree	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root ) ) ; }
Code	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root ) ) ; }
Distance : 11

80
Tree	{ compiler . traverseRoots ( compiler . traverse ( Locale.US ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( Locale.US ) , null ) ; }
Distance : 11

81
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) , null ) ; }
Distance : 8

82
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( true ) ) ; }
Distance : 9

83
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root , root ) ) ; }
Distance : 8

84
Tree	{ compiler . traverseRoots ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ compiler . traverseRoots ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

85
Tree	{ compiler . traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ compiler . traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

86
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( externs ) ; }
Distance : 6

87
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( root ) ; }
Distance : 4

88
Tree	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , false ) ; }
Code	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , false ) ; }
Distance : 11

89
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , ToStringContext.TO_STRING ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , ToStringContext.TO_STRING ) ) . traverseRoots ( root ) ; }
Distance : 4

90
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Distance : 9

91
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , else ) ; }
Distance : 6

92
Tree	{ compiler . traverseRoots ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ compiler . traverseRoots ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

93
Tree	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Code	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Distance : 12

94
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( null ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( null ) ; }
Distance : 11

95
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Distance : 6

96
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Distance : 9

97
Tree	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( true ) ) ; }
Code	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( true ) ) ; }
Distance : 9

98
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , else ) ; }
Distance : 6

99
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , false ) ; }
Distance : 6

100
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 6

101
Tree	{ compiler . traverse ( traverse ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( traverse ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Distance : 15

102
Tree	{ traverse ( traverse ( NUMBER_CONSTANT , true ) , > ) ; }
Code	{ traverse ( traverse ( NUMBER_CONSTANT , true ) , > ) ; }
Distance : 11

103
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 10

104
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Distance : 6

105
Tree	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root , root ) ) ; }
Code	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root , root ) ) ; }
Distance : 8

106
Tree	{ compiler . traverseRoots ( compiler . traverse ( AbstractCompiler.READ_ERROR ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( AbstractCompiler.READ_ERROR ) , null ) ; }
Distance : 11

107
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverseRoots ( true ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverseRoots ( true ) ; }
Distance : 9

108
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , else ) ; }
Distance : 7

109
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) , null ) ; }
Distance : 9

110
Tree	{ compiler . traverseRoots ( compiler . traverse ( Nullability.IMPLICIT ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( Nullability.IMPLICIT ) , null ) ; }
Distance : 11

111
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( false ) ) ; }
Distance : 9

112
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 5

113
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Distance : 9

114
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( externs , root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( externs , root ) . traverseRoots ( externs ) ; }
Distance : 12

115
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
Distance : 3

116
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( root ) ; }
Distance : 2

117
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( root ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( root ) ; }
Distance : 10

118
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , else ) ; }
Distance : 7

119
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( true ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( true ) , null ) ; }
Distance : 8

120
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 13

121
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , > ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , > ) ; }
Distance : 6

122
Tree	{ traverse ( compiler , traverseRoots ( NUMBER_CONSTANT , true ) ) ; }
Code	{ traverse ( compiler , traverseRoots ( NUMBER_CONSTANT , true ) ) ; }
Distance : 10

123
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) , null ) ; }
Distance : 9

124
Tree	{ compiler . traverseRoots ( traverseRoots ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( traverseRoots ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Distance : 15

125
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( true ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( true ) , null ) ; }
Distance : 8

126
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Distance : 6

127
Tree	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverseRoots ( externs ) ; }
Distance : 7

128
Tree	{ compiler . traverseRoots ( new NodeTraversal ( root , null , true ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( root , null , true ) . traverseRoots ( root ) , null ) ; }
Distance : 10

129
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Distance : 6

130
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , MISPLACED_ANNOTATION ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , MISPLACED_ANNOTATION ) ; }
Distance : 6

131
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 13

132
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs ) ; }
Distance : 2

133
Tree	{ traverse ( compiler , traverse ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverse ( compiler , traverse ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

134
Tree	{ traverseRoots ( compiler , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverseRoots ( compiler , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Distance : 10

135
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( externs ) ; }
Distance : 3

========================================================================


========================================================================
Example Number: 20
Parent Code is: 
Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Child code is: 
Node catchBody = blockUnchecked ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=block}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=blockUnchecked}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/27/parent/src_com_google_javascript_rhino_IR.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Node catchBody = block ( Token.SHEQ , Feature.STRING_CONTINUATION ) . block ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ , Feature.STRING_CONTINUATION ) . block ( catchBody ) ;
Distance : 6

1
Tree	Node catchBody = block ( Token.SHEQ , NodeUtil.isNameDeclaration ) . block ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ , NodeUtil.isNameDeclaration ) . block ( catchBody ) ;
Distance : 6

2
Tree	Node catchBody = catchBody . block ( catchNode , true ) ;
Code	Node catchBody = catchBody . block ( catchNode , true ) ;
Distance : 7

3
Tree	Node catchBody = this . catchBody . block ( catchBody , TypeInferenceMode.NEITHER ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , TypeInferenceMode.NEITHER ) ;
Distance : 8

4
Tree	Node catchBody = new Node () . block ( catchNode ) ;
Code	Node catchBody = new Node () . block ( catchNode ) ;
Distance : 5

5
Tree	Node catchBody = catchBody ( catchBody , ) ) ;
Code	Node catchBody = catchBody ( catchBody , ) ) ;
Distance : 7

6
Tree	Node catchBody = block ( catchNode , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody , catchBody ) ;
Distance : 6

7
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

8
Tree	Node catchBody = block ( catchBody ) . block ( Token.ROOT ) ;
Code	Node catchBody = block ( catchBody ) . block ( Token.ROOT ) ;
Distance : 4

9
Tree	Node catchBody = block ( catchNode , true ) ;
Code	Node catchBody = block ( catchNode , true ) ;
Distance : 6

10
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( TokenType.OPEN_ANGLE ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( TokenType.OPEN_ANGLE ) ;
Distance : 3

11
Tree	Node catchBody = block . block ( this , catchBody ) ;
Code	Node catchBody = block . block ( this , catchBody ) ;
Distance : 8

12
Tree	Node catchBody = block ( STRING_CONSTANT ) . block ( catchNode ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . block ( catchNode ) ;
Distance : 3

13
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

14
Tree	Node catchBody = catchBody . block ( this , catchBody ) ;
Code	Node catchBody = catchBody . block ( this , catchBody ) ;
Distance : 8

15
Tree	Node catchBody = block ( catchBody , Node ) ;
Code	Node catchBody = block ( catchBody , Node ) ;
Distance : 7

16
Tree	Node catchBody = catchBody . block ( catchBody , ) ) ;
Code	Node catchBody = catchBody . block ( catchBody , ) ) ;
Distance : 8

17
Tree	Node catchBody = catchBody ( catchNode , catchBody ) ;
Code	Node catchBody = catchBody ( catchNode , catchBody ) ;
Distance : 6

18
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

19
Tree	Node catchBody = catchBody . block ( JSTypeNative.NULL_VOID ) ;
Code	Node catchBody = catchBody . block ( JSTypeNative.NULL_VOID ) ;
Distance : 6

20
Tree	Node catchBody = block ( catchBody , catchBody , false ) ;
Code	Node catchBody = block ( catchBody , catchBody , false ) ;
Distance : 7

21
Tree	Node catchBody = block ( catchNode , catchBody , false ) ;
Code	Node catchBody = block ( catchNode , catchBody , false ) ;
Distance : 6

22
Tree	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Distance : 5

23
Tree	Node catchBody = block ( catchBody ) . block ( JSTypeNative.VOID_TYPE ) ;
Code	Node catchBody = block ( catchBody ) . block ( JSTypeNative.VOID_TYPE ) ;
Distance : 4

24
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

25
Tree	Node catchBody = catchBody . block ( currentScript.defaultExportLocalName ) ;
Code	Node catchBody = catchBody . block ( currentScript.defaultExportLocalName ) ;
Distance : 6

26
Tree	Node catchBody = this . catchBody . block ( catchNode ) ;
Code	Node catchBody = this . catchBody . block ( catchNode ) ;
Distance : 5

27
Tree	Node catchBody = catchBody . block ( catchBody , NodeUtil.isNameDeclaration ) ;
Code	Node catchBody = catchBody . block ( catchBody , NodeUtil.isNameDeclaration ) ;
Distance : 8

28
Tree	Node catchBody = catchBody . block ( JSTypeNative.NO_OBJECT_TYPE ) ;
Code	Node catchBody = catchBody . block ( JSTypeNative.NO_OBJECT_TYPE ) ;
Distance : 6

29
Tree	Node catchBody = block ( STRING_CONSTANT ) . block ( catchBody ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . block ( catchBody ) ;
Distance : 4

30
Tree	Node catchBody = block ( catchNode ( catchBody ) ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) ) ;
Distance : 6

31
Tree	Node catchBody = block ( catchNode , this . catchNode ) ;
Code	Node catchBody = block ( catchNode , this . catchNode ) ;
Distance : 5

32
Tree	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Distance : 4

33
Tree	Node catchBody = this . catchBody . block () ;
Code	Node catchBody = this . catchBody . block () ;
Distance : 8

34
Tree	Node catchBody = this . catchBody . block ( catchBody , NodeUtil.isNameDeclaration ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , NodeUtil.isNameDeclaration ) ;
Distance : 8

35
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

36
Tree	Node catchBody = block ( catchBody ) . block ( TokenType.OPEN_ANGLE ) ;
Code	Node catchBody = block ( catchBody ) . block ( TokenType.OPEN_ANGLE ) ;
Distance : 4

37
Tree	Node catchBody = this . catchBody . block ( catchBody , Es6ToEs3Converter.CANNOT_CONVERT_YET ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , Es6ToEs3Converter.CANNOT_CONVERT_YET ) ;
Distance : 8

38
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Distance : 6

39
Tree	Node catchBody = block ( catchNode , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody ) ;
Distance : 6

40
Tree	Node catchBody = block ( catchBody , this . catchNode ) ;
Code	Node catchBody = block ( catchBody , this . catchNode ) ;
Distance : 6

41
Tree	Node catchBody = catchBody . block ( catchBody , Node ) ;
Code	Node catchBody = catchBody . block ( catchBody , Node ) ;
Distance : 8

42
Tree	Node catchBody = catchBody . block () ;
Code	Node catchBody = catchBody . block () ;
Distance : 8

43
Tree	Node catchBody = catchBody . block ( catchBody , true ) ;
Code	Node catchBody = catchBody . block ( catchBody , true ) ;
Distance : 8

44
Tree	Node catchBody = block ( Token.SHEQ ) . block ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ ) . block ( catchBody ) ;
Distance : 4

45
Tree	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Distance : 6

46
Tree	Node catchBody = new Node ( catchBody , catchBody ) . block ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . block ( catchBody ) ;
Distance : 7

47
Tree	Node catchBody = block ( catchBody , this . catchBody ) ;
Code	Node catchBody = block ( catchBody , this . catchBody ) ;
Distance : 7

48
Tree	Node catchBody = block ( block ( catchBody ) ) ;
Code	Node catchBody = block ( block ( catchBody ) ) ;
Distance : 7

49
Tree	Node catchBody = block ( catchNode , false ) ;
Code	Node catchBody = block ( catchNode , false ) ;
Distance : 6

50
Tree	Node catchBody = catchBody . block ( STRING_CONSTANT , catchBody ) ;
Code	Node catchBody = catchBody . block ( STRING_CONSTANT , catchBody ) ;
Distance : 8

51
Tree	Node catchBody = block ( catchBody ) . block () ;
Code	Node catchBody = block ( catchBody ) . block () ;
Distance : 6

52
Tree	Node catchBody = catchBody . block ( catchNode , false ) ;
Code	Node catchBody = catchBody . block ( catchNode , false ) ;
Distance : 7

53
Tree	Node catchBody = block ( catchBody , ) ) ;
Code	Node catchBody = block ( catchBody , ) ) ;
Distance : 7

54
Tree	Node catchBody = block ( copyInformationFrom ( catchNode ) , STRING_CONSTANT , catchBody . block () ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchNode ) , STRING_CONSTANT , catchBody . block () ) ;
Distance : 10

55
Tree	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Distance : 6

56
Tree	Node catchBody = new Node ( catchBody , ) ) . block ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , ) ) . block ( catchBody ) ;
Distance : 7

57
Tree	Node catchBody = catchBody . block ( this , catchBody ) ;
Code	Node catchBody = catchBody . block ( this , catchBody ) ;
Distance : 8

58
Tree	Node catchBody = block ( catchNode , copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( catchNode , copyInformationFrom ( catchBody ) ) ;
Distance : 5

59
Tree	Node catchBody = block ( catchNode , ) , catchBody ) ;
Code	Node catchBody = block ( catchNode , ) , catchBody ) ;
Distance : 6

60
Tree	Node catchBody = this . catchBody . block ( catchBody ) ;
Code	Node catchBody = this . catchBody . block ( catchBody ) ;
Distance : 6

61
Tree	Node catchBody = block ( catchBody , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	Node catchBody = block ( catchBody , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 7

62
Tree	Node catchBody = block . block ( catchNode ) ;
Code	Node catchBody = block . block ( catchNode ) ;
Distance : 5

63
Tree	Node catchBody = this . block . block () ;
Code	Node catchBody = this . block . block () ;
Distance : 8

64
Tree	Node catchBody = catchBody . block ( block ( catchBody ) ) ;
Code	Node catchBody = catchBody . block ( block ( catchBody ) ) ;
Distance : 8

65
Tree	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 6

66
Tree	Node catchBody = block () ;
Code	Node catchBody = block () ;
Distance : 9

67
Tree	Node catchBody = block ( Token.SHEQ ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ ) . copyInformationFrom ( catchBody ) ;
Distance : 3

68
Tree	Node catchBody = copyInformationFrom () ;
Code	Node catchBody = copyInformationFrom () ;
Distance : 8

69
Tree	Node catchBody = catchBody ( catchNode , catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchNode , catchBody , catchBody ) ;
Distance : 6

70
Tree	Node catchBody = block ( catchNode , ) , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode , ) , catchBody , catchBody ) ;
Distance : 6

71
Tree	Node catchBody = block . block ( catchBody ) ;
Code	Node catchBody = block . block ( catchBody ) ;
Distance : 6

72
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 7

73
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

74
Tree	Node catchBody = block ( copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchNode ) ) ;
Distance : 5

75
Tree	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

76
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

77
Tree	Node catchBody = block ( catchNode ) . block ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchNode ) . block ( STRING_CONSTANT ) ;
Distance : 3

78
Tree	Node catchBody = block () . block ( catchBody ) ;
Code	Node catchBody = block () . block ( catchBody ) ;
Distance : 6

79
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

80
Tree	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

81
Tree	Node catchBody = block ( catchNode ) . block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchBody , catchBody ) ;
Distance : 5

82
Tree	Node catchBody = block ( catchBody , ) , catchBody ) ;
Code	Node catchBody = block ( catchBody , ) , catchBody ) ;
Distance : 7

83
Tree	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Distance : 7

84
Tree	Node catchBody = block ( catchBody , false ) ;
Code	Node catchBody = block ( catchBody , false ) ;
Distance : 7

85
Tree	Node catchBody = block ( catchNode ( catchBody ) , STRING_CONSTANT , catchBody . block () ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) , STRING_CONSTANT , catchBody . block () ) ;
Distance : 10

86
Tree	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Distance : 7

87
Tree	Node catchBody = catchBody ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = catchBody ( catchNode ) . block ( catchBody ) ;
Distance : 3

88
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

89
Tree	Node catchBody = catchBody . block ( STRING_CONSTANT , catchBody ) ;
Code	Node catchBody = catchBody . block ( STRING_CONSTANT , catchBody ) ;
Distance : 8

90
Tree	Node catchBody = catchBody . block ( catchBody , Es6ToEs3Converter.CANNOT_CONVERT_YET ) ;
Code	Node catchBody = catchBody . block ( catchBody , Es6ToEs3Converter.CANNOT_CONVERT_YET ) ;
Distance : 8

91
Tree	Node catchBody = block () ;
Code	Node catchBody = block () ;
Distance : 9

92
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchBody ) ;
Distance : 5

93
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

94
Tree	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 5

95
Tree	Node catchBody = catchBody . block ( catchNode ( catchBody ) ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchBody ) ) ;
Distance : 8

96
Tree	Node catchBody = child.parent . block ( catchBody ) ;
Code	Node catchBody = child.parent . block ( catchBody ) ;
Distance : 6

97
Tree	Node catchBody = block ( Token.SHEQ , TokenType.OPEN_PAREN ) . block ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ , TokenType.OPEN_PAREN ) . block ( catchBody ) ;
Distance : 6

98
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

99
Tree	Node catchBody = metadata.superClassNameNode . block ( catchBody ) ;
Code	Node catchBody = metadata.superClassNameNode . block ( catchBody ) ;
Distance : 6

100
Tree	Node catchBody = newName . block ( catchBody ) ;
Code	Node catchBody = newName . block ( catchBody ) ;
Distance : 6

101
Tree	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Distance : 5

102
Tree	Node catchBody = this . catchBody . block () . block ( catchBody ) ;
Code	Node catchBody = this . catchBody . block () . block ( catchBody ) ;
Distance : 8

103
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

104
Tree	Node catchBody = catchBody . block ( catchNode , NodeUtil.isNameDeclaration ) ;
Code	Node catchBody = catchBody . block ( catchNode , NodeUtil.isNameDeclaration ) ;
Distance : 7

105
Tree	Node catchBody = catchBody ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) ;
Distance : 7

106
Tree	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 6

107
Tree	Node catchBody = block ( catchNode , this . catchBody ) ;
Code	Node catchBody = block ( catchNode , this . catchBody ) ;
Distance : 6

108
Tree	Node catchBody = block ( catchNode , NodeUtil.isNameDeclaration ) ;
Code	Node catchBody = block ( catchNode , NodeUtil.isNameDeclaration ) ;
Distance : 6

109
Tree	Node catchBody = block () ;
Code	Node catchBody = block () ;
Distance : 9

110
Tree	Node catchBody = catchBody . block ( catchBody , ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , ) , catchBody ) ;
Distance : 9

111
Tree	Node catchBody = block ( catchBody , catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody , catchBody ) ;
Distance : 8

112
Tree	Node catchBody = catchBody . block ( Token.SHEQ ) ;
Code	Node catchBody = catchBody . block ( Token.SHEQ ) ;
Distance : 6

113
Tree	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 7

114
Tree	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Distance : 3

115
Tree	Node catchBody = block . block ( catchBody ) ;
Code	Node catchBody = block . block ( catchBody ) ;
Distance : 6

116
Tree	Node catchBody = block ( catchBody , catchNode ( catchBody ) ) ;
Code	Node catchBody = block ( catchBody , catchNode ( catchBody ) ) ;
Distance : 7

117
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

118
Tree	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom () ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom () ;
Distance : 8

119
Tree	Node catchBody = block ( catchBody , NodeUtil.isNameDeclaration ) ;
Code	Node catchBody = block ( catchBody , NodeUtil.isNameDeclaration ) ;
Distance : 7

120
Tree	Node catchBody = block . catchBody ( catchBody ) ;
Code	Node catchBody = block . catchBody ( catchBody ) ;
Distance : 6

121
Tree	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 5

122
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

123
Tree	Node catchBody = block . block () ;
Code	Node catchBody = block . block () ;
Distance : 8

124
Tree	Node catchBody = catchBody . block ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode ) ;
Distance : 5

125
Tree	Node catchBody = catchBody ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) . block ( catchBody ) ;
Distance : 4

126
Tree	Node catchBody = this . catchBody . block () ;
Code	Node catchBody = this . catchBody . block () ;
Distance : 8

127
Tree	Node catchBody = block ( catchBody , true ) ;
Code	Node catchBody = block ( catchBody , true ) ;
Distance : 7

128
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchBody ) ;
Distance : 5

129
Tree	Node catchBody = catchBody . block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody , catchBody ) ;
Distance : 9

130
Tree	Node catchBody = catchBody . block () . block ( catchBody ) ;
Code	Node catchBody = catchBody . block () . block ( catchBody ) ;
Distance : 6

131
Tree	Node catchBody = block ( catchBody ) . block ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchBody ) . block ( STRING_CONSTANT ) ;
Distance : 4

132
Tree	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Distance : 3

133
Tree	Node catchBody = this . block . block () ;
Code	Node catchBody = this . block . block () ;
Distance : 8

134
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Distance : 3

135
Tree	Node catchBody = block ( catchNode , catchNode , false ) ;
Code	Node catchBody = block ( catchNode , catchNode , false ) ;
Distance : 6

136
Tree	Node catchBody = block . block ( STRING_CONSTANT , catchBody ) ;
Code	Node catchBody = block . block ( STRING_CONSTANT , catchBody ) ;
Distance : 8

137
Tree	Node catchBody = catchBody . catchBody ( catchNode ) ;
Code	Node catchBody = catchBody . catchBody ( catchNode ) ;
Distance : 5

138
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Distance : 3

139
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

140
Tree	Node catchBody = catchBody ( catchNode ) ;
Code	Node catchBody = catchBody ( catchNode ) ;
Distance : 6

141
Tree	Node catchBody = catchBody . block ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . block ( catchBody ) ;
Distance : 6

142
Tree	Node catchBody = catchBody . block ( block ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( block ( catchNode ) , catchBody ) ;
Distance : 9

143
Tree	Node catchBody = catchBody . block ( block ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( block ( catchBody ) , catchBody ) ;
Distance : 9

144
Tree	Node catchBody = block ( catchBody ) . block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchBody , catchBody ) ;
Distance : 6

145
Tree	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Distance : 7

146
Tree	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Distance : 4

147
Tree	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 8

148
Tree	Node catchBody = block ( functionContext.function ) . block ( catchBody ) ;
Code	Node catchBody = block ( functionContext.function ) . block ( catchBody ) ;
Distance : 4

149
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) ) ;
Distance : 7

150
Tree	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Distance : 8

151
Tree	Node catchBody = block ( Token.SHEQ , Node ) . block ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ , Node ) . block ( catchBody ) ;
Distance : 6

152
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

153
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

154
Tree	Node catchBody = new Node ( catchBody , catchBody ) . block () ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . block () ;
Distance : 9

155
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

156
Tree	Node catchBody = catchBody . block ( catchNode , catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode , catchBody , catchBody ) ;
Distance : 8

157
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 9

158
Tree	Node catchBody = catchBody . block ( catchNode , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode , catchBody ) ;
Distance : 7

159
Tree	Node catchBody = catchBody . block ( catchBody , false ) ;
Code	Node catchBody = catchBody . block ( catchBody , false ) ;
Distance : 8

160
Tree	Node catchBody = catchBody . block ( block ( catchNode ) ) ;
Code	Node catchBody = catchBody . block ( block ( catchNode ) ) ;
Distance : 7

161
Tree	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Distance : 3

162
Tree	Node catchBody = catchBody . block () ;
Code	Node catchBody = catchBody . block () ;
Distance : 8

163
Tree	Node catchBody = block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 6

164
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

165
Tree	Node catchBody = block . block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block . block ( catchBody , catchBody , catchBody ) ;
Distance : 9

166
Tree	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 7

167
Tree	Node catchBody = block ( catchBody ) . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block () . copyInformationFrom ( catchBody ) ;
Distance : 6

168
Tree	Node catchBody = catchBody ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchBody ) ;
Distance : 7

169
Tree	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 6

170
Tree	Node catchBody = block ( catchBody ) . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block () . copyInformationFrom ( catchBody ) ;
Distance : 6

171
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) , STRING_CONSTANT , catchBody . block () ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) , STRING_CONSTANT , catchBody . block () ) ;
Distance : 11

172
Tree	Node catchBody = catchBody . block ( this , catchNode ) ;
Code	Node catchBody = catchBody . block ( this , catchNode ) ;
Distance : 7

173
Tree	Node catchBody = block . block () ;
Code	Node catchBody = block . block () ;
Distance : 8

174
Tree	Node catchBody = block ( catchNode , catchNode ) ;
Code	Node catchBody = block ( catchNode , catchNode ) ;
Distance : 5

175
Tree	Node catchBody = catchBody ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchBody , catchBody ) ;
Distance : 7

176
Tree	Node catchBody = new Node ( catchBody , catchNode ) . block () ;
Code	Node catchBody = new Node ( catchBody , catchNode ) . block () ;
Distance : 8

177
Tree	Node catchBody = this . catchBody . block ( catchBody ) ;
Code	Node catchBody = this . catchBody . block ( catchBody ) ;
Distance : 6

178
Tree	Node catchBody = catchBody . block ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ) . block ( catchBody ) ;
Distance : 5

179
Tree	Node catchBody = this . catchBody . block ( catchBody , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 8

180
Tree	Node catchBody = block ( catchBody , catchNode , false ) ;
Code	Node catchBody = block ( catchBody , catchNode , false ) ;
Distance : 7

181
Tree	Node catchBody = this . block . block ( catchBody ) ;
Code	Node catchBody = this . block . block ( catchBody ) ;
Distance : 6

182
Tree	Node catchBody = block . block ( catchBody , catchBody ) ;
Code	Node catchBody = block . block ( catchBody , catchBody ) ;
Distance : 8

183
Tree	Node catchBody = block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Distance : 7

184
Tree	Node catchBody = block ( catchNode ) . block () ;
Code	Node catchBody = block ( catchNode ) . block () ;
Distance : 5

185
Tree	Node catchBody = block ( catchBody , ) , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , ) , catchBody , catchBody ) ;
Distance : 7

186
Tree	Node catchBody = new Node ( catchNode , catchBody ) . block () ;
Code	Node catchBody = new Node ( catchNode , catchBody ) . block () ;
Distance : 8

187
Tree	Node catchBody = new Node () . block ( catchBody ) ;
Code	Node catchBody = new Node () . block ( catchBody ) ;
Distance : 6

188
Tree	Node catchBody = block ( catchBody , copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom ( catchBody ) ) ;
Distance : 6

189
Tree	Node catchBody = block ( block ( catchBody ) , catchBody ) ;
Code	Node catchBody = block ( block ( catchBody ) , catchBody ) ;
Distance : 7

190
Tree	Node catchBody = block ( metadata.superClassNameNode ) . block ( catchBody ) ;
Code	Node catchBody = block ( metadata.superClassNameNode ) . block ( catchBody ) ;
Distance : 4

191
Tree	Node catchBody = catchBody . catchBody ( catchBody ) ;
Code	Node catchBody = catchBody . catchBody ( catchBody ) ;
Distance : 6

192
Tree	Node catchBody = catchBody . block ( STRING_CONSTANT , catchNode ) ;
Code	Node catchBody = catchBody . block ( STRING_CONSTANT , catchNode ) ;
Distance : 7

193
Tree	Node catchBody = block ( catchNode , catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody , catchBody , catchBody ) ;
Distance : 7

194
Tree	Node catchBody = block ( catchBody ) . block () . block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block () . block ( catchBody ) ;
Distance : 7

195
Tree	Node catchBody = block ( block ( catchBody ) , STRING_CONSTANT , catchBody . block () ) ;
Code	Node catchBody = block ( block ( catchBody ) , STRING_CONSTANT , catchBody . block () ) ;
Distance : 11

196
Tree	Node catchBody = catchBody ( catchBody , catchNode , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchNode , catchBody ) ;
Distance : 7

197
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 6

198
Tree	Node catchBody = block ( catchBody , copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom ( catchNode ) ) ;
Distance : 5

199
Tree	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 21
Parent Code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.ON_EX , finallyNode ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.UNCOND}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.ON_EX}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/14/parent/src_com_google_javascript_jscomp_ControlFlowAnalysis.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , fromNode ) ; } }
Distance : 11

1
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , Feature.LET_DECLARATIONS , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , Feature.LET_DECLARATIONS , fromNode ) ; } }
Distance : 10

2
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , Feature.LET_DECLARATIONS , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , Feature.LET_DECLARATIONS , fromNode ) ; } }
Distance : 11

3
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

4
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 5

5
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 6

6
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

7
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

8
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

9
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

10
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Distance : 4

11
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 7

12
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Distance : 5

13
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 8

14
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Distance : 4

15
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Distance : 5

16
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

17
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

18
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

19
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 6

20
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 12

21
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 12

22
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

23
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

24
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 6

25
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode ) ; } }
Distance : 9

26
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode ) ; } }
Distance : 8

27
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

28
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

29
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

30
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

31
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

32
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

33
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

34
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 5

35
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 6

36
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 12

37
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

38
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 6

39
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Distance : 7

40
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , Branch.UNCOND ) ; } }
Distance : 9

41
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

42
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

43
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 4

44
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 5

45
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , Branch.UNCOND ) ; } }
Distance : 8

46
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

47
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

48
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 6

49
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode ) ; } }
Distance : 7

50
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode ) ; } }
Distance : 8

51
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

52
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 8

53
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

54
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

55
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 7

56
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , finallyNode ) ; } }
Distance : 5

57
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , finallyNode ) ; } }
Distance : 6

58
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 13

59
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 14

60
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 4

61
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 5

62
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 13

63
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 14

64
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 8

65
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 10

66
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 9

67
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 11

68
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 7

69
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 8

70
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 5

71
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

72
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 8

73
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 8

74
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

75
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

76
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

77
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 5

78
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

79
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

80
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 12

81
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

82
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Distance : 8

83
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Distance : 7

84
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 8

85
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

86
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 7

87
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 11

88
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

89
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 7

90
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 5

91
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

92
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

93
Tree	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 9

94
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

95
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

96
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 4

97
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 5

98
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 4

99
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

100
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 7

101
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 7

102
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

103
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

104
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

105
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

106
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

107
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

108
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 10

109
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 8

110
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

111
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 7

112
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 9

113
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 7

114
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 6

115
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

116
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

117
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

118
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Node ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Node ) ; } }
Distance : 6

119
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 7

120
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 9

121
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 10

122
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 6

123
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 7

124
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

125
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

126
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Node ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Node ) ; } }
Distance : 7

127
Tree	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 8

128
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 7

129
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

130
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 8

131
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , fromNode ) ; } }
Distance : 9

132
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 8

133
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , fromNode ) ; } }
Distance : 8

134
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 6

135
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 7

136
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 9

137
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Distance : 6

138
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

139
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

140
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 7

141
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 8

142
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

143
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

144
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 9

145
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 10

146
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , Node ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , Node ) ; } }
Distance : 7

147
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

148
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 4

149
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , for ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , for ) ; } }
Distance : 8

150
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

151
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { for . get ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { for . get ( STRING_CONSTANT ) ; } }
Distance : 11

152
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 9

153
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

154
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

155
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 3

156
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 4

157
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

158
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

159
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , fromNode ) ; } }
Distance : 10

160
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 9

161
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 9

162
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

163
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

164
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 9

165
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , Node ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , Node ) ; } }
Distance : 8

166
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 5

167
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 4

168
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , true ) ; } }
Distance : 6

169
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

170
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

171
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , true ) ; } }
Distance : 7

172
Tree	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 9

173
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 8

174
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 10

175
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Distance : 7

176
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 8

177
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 9

178
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

179
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

180
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 8

181
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 8

182
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

183
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

184
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 5

185
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

186
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

187
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

188
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

189
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

190
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 8

191
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 9

192
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

193
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

194
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

195
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

196
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

197
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

198
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

199
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

========================================================================


========================================================================
Example Number: 22
Parent Code is: 
{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ if ( recurse ) { return anyResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=allResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/10/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 192
Wrong
========================================================================
False

0
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 5

1
Tree	{ if ( options.skipNonTranspilationPasses ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( options.skipNonTranspilationPasses ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

2
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 7

3
Tree	{ if ( inheritedPropDef.methodType ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( inheritedPropDef.methodType ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

4
Tree	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

5
Tree	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else case }
Code	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else case }
Distance : 14

6
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 13

7
Tree	{ if ( n ) { return allResultsMatch ( n , n , false ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n , false ) ; } else { return n . n ( n ) ; } }
Distance : 8

8
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 12

9
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 9

10
Tree	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

11
Tree	{ if ( n ) { return recurse . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

12
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

13
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 9

14
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

15
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 5

16
Tree	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Distance : 14

17
Tree	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } }
Code	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } }
Distance : 9

18
Tree	{ if ( n ) { return allResultsMatch ( n , n , true ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n , true ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

19
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else else }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else else }
Distance : 15

20
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 8

21
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

22
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

23
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 13

24
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

25
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 9

26
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , inheritedPropDef.methodType ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , inheritedPropDef.methodType ) ; } }
Distance : 8

27
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 5

28
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 7

29
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 16

30
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 10

31
Tree	{ if ( recurse ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } }
Distance : 8

32
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 10

33
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 12

34
Tree	{ if ( n . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 13

35
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

36
Tree	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else if }
Code	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else if }
Distance : 14

37
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 15

38
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 7

39
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

40
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

41
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . n ( this , n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . n ( this , n ) ; } }
Distance : 10

42
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

43
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

44
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 8

45
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 13

46
Tree	{ if ( n . ) ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( n . ) ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 15

47
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 8

48
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 4

49
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Distance : 8

50
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 6

51
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

52
Tree	{ if ( n . ) ( n , n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( n . ) ( n , n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 12

53
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else else }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else else }
Distance : 14

54
Tree	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return true ; } }
Code	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return true ; } }
Distance : 9

55
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

56
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 7

57
Tree	{ if ( recurse . { ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . { ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 11

58
Tree	{ if ( n . { ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Code	{ if ( n . { ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Distance : 14

59
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 6

60
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

61
Tree	{ if ( leftOfArrow.type ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( leftOfArrow.type ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

62
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 7

63
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 7

64
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 6

65
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

66
Tree	{ if ( recurse . allResultsMatch ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

67
Tree	{ if ( n ) { return n . allResultsMatch ( n , pair.env ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , pair.env ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

68
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 15

69
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

70
Tree	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

71
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 6

72
Tree	{ if ( recurse . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 14

73
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 7

74
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 8

75
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 7

76
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 9

77
Tree	{ if ( recurse . recurse ( n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . recurse ( n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

78
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

79
Tree	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else else }
Distance : 14

80
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 10

81
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 13

82
Tree	{ if ( n . recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Code	{ if ( n . recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Distance : 15

83
Tree	{ if ( alreadyRemoved ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( alreadyRemoved ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

84
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 8

85
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else case }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else case }
Distance : 12

86
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 16

87
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

88
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Distance : 8

89
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

90
Tree	{ if ( leftOfArrow.type ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( leftOfArrow.type ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

91
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Distance : 15

92
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

93
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 8

94
Tree	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

95
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 7

96
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 13

97
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 13

98
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 10

99
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 13

100
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 6

101
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 10

102
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 8

103
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 6

104
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 13

105
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , options.renamePrefixNamespace ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , options.renamePrefixNamespace ) ; } }
Distance : 10

106
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

107
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . MAY_BE_STRING_PREDICATE () ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . MAY_BE_STRING_PREDICATE () ; } }
Distance : 8

108
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 5

109
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 7

110
Tree	{ if ( n . recurse ( n , n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . recurse ( n , n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

111
Tree	{ if ( n . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( n . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 13

112
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 8

113
Tree	{ if ( recurse . allResultsMatch ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

114
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 10

115
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

116
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 10

117
Tree	{ if ( recurse . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 14

118
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

119
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 10

120
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 10

121
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Distance : 17

122
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 13

123
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Distance : 10

124
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Distance : 7

125
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Distance : 16

126
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 7

127
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 7

128
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

129
Tree	{ if ( recurse ) { return n . allResultsMatch ( this ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( this ) ; } else { return n . n ( n ) ; } }
Distance : 8

130
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , EquivalenceMethod.DATA_FLOW ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , EquivalenceMethod.DATA_FLOW ) ; } }
Distance : 10

131
Tree	{ if ( n . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Code	{ if ( n . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Distance : 15

132
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 7

133
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , EquivalenceMethod.DATA_FLOW ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , EquivalenceMethod.DATA_FLOW ) ; } }
Distance : 8

134
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Distance : 7

135
Tree	{ if ( n ) { return n . allResultsMatch ( this ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( this ) ; } else { return n . n ( n ) ; } }
Distance : 9

136
Tree	{ if ( options.skipNonTranspilationPasses ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( options.skipNonTranspilationPasses ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

137
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

138
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 3

139
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

140
Tree	{ if ( n ) { return n . allResultsMatch ( n , EquivalenceMethod.DATA_FLOW ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , EquivalenceMethod.DATA_FLOW ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

141
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 13

142
Tree	{ if ( recurse ) { return allResultsMatch ( n , n , false ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n , false ) ; } else { return n . n ( n ) ; } }
Distance : 7

143
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

144
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 7

145
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Distance : 10

146
Tree	{ if ( alreadyRemoved ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( alreadyRemoved ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

147
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 6

148
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 8

149
Tree	{ if ( n . allResultsMatch ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( n . allResultsMatch ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 13

150
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , options.renamePrefixNamespace ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , options.renamePrefixNamespace ) ; } }
Distance : 8

151
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 7

152
Tree	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else else }
Code	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else else }
Distance : 14

153
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 10

154
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 9

155
Tree	{ if ( inheritedPropDef.methodType ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( inheritedPropDef.methodType ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

156
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

157
Tree	{ if ( recurse ) { return allResultsMatch ( n ( n ) ) ; } else { return true ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ( n ) ) ; } else { return true ; } }
Distance : 8

158
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

159
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , inheritedPropDef.methodType ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , inheritedPropDef.methodType ) ; } }
Distance : 10

160
Tree	{ if ( n ) { return n . allResultsMatch ( n , inheritedPropDef.methodType ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , inheritedPropDef.methodType ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

161
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 1

162
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else if }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else if }
Distance : 15

163
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 8

164
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else if }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else if }
Distance : 15

165
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 8

166
Tree	{ if ( n . allResultsMatch ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( n . allResultsMatch ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 13

167
Tree	{ if ( n ) { return recurse . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

168
Tree	{ if ( n . ) ( n , MAY_BE_STRING_PREDICATE ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . ) ( n , MAY_BE_STRING_PREDICATE ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 11

169
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 10

170
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

171
Tree	{ if ( recurse . recurse ( n , n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . recurse ( n , n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 11

172
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Distance : 8

173
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

174
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Distance : 10

175
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

176
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else if }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else if }
Distance : 15

177
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

178
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 7

179
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 14

180
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

181
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 1

182
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

183
Tree	{ if ( n ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

184
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 13

185
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

186
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 9

187
Tree	{ if ( n ) { return n . allResultsMatch ( n , other.features ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , other.features ) ; } else { return n . n ( n ) ; } }
Distance : 8

188
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 9

189
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 9

190
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 8

191
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

========================================================================


========================================================================
Example Number: 23
Parent Code is: 
String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
-------------------------------------------------------------------------------
Child code is: 
String moduleName = guessCJSModuleName ( script . getSourceFileName () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (802{val=normalizeSourceName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/9/parent/src_com_google_javascript_jscomp_ProcessCommonJSModules.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 176
Wrong
========================================================================
False

0
Tree	String moduleName = moduleName ( script ) ;
Code	String moduleName = moduleName ( script ) ;
Distance : 4

1
Tree	String moduleName = moduleName ( script , script , moduleName ) ;
Code	String moduleName = moduleName ( script , script , moduleName ) ;
Distance : 5

2
Tree	String moduleName = guessCJSModuleName ( script , script ) ;
Code	String moduleName = guessCJSModuleName ( script , script ) ;
Distance : 3

3
Tree	String moduleName = moduleName ( script , script ) ;
Code	String moduleName = moduleName ( script , script ) ;
Distance : 4

4
Tree	String moduleName = guessCJSModuleName ( script , pair.env ) ;
Code	String moduleName = guessCJSModuleName ( script , pair.env ) ;
Distance : 3

5
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , recvLvalue.env ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , recvLvalue.env ) ;
Distance : 4

6
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , types ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , types ) ;
Distance : 5

7
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 5

8
Tree	String moduleName = guessCJSModuleName ( script , flags.outputWrapper ) ;
Code	String moduleName = guessCJSModuleName ( script , flags.outputWrapper ) ;
Distance : 3

9
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , Token.SHEQ ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , Token.SHEQ ) ;
Distance : 4

10
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , script ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , script ) ;
Distance : 5

11
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , getNominalTypeIfSingletonObj ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , getNominalTypeIfSingletonObj ) ;
Distance : 7

12
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , Token.ROOT ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , Token.ROOT ) ;
Distance : 7

13
Tree	String moduleName = guessCJSModuleName ( symbol , CHAR_CONS , - ) ;
Code	String moduleName = guessCJSModuleName ( symbol , CHAR_CONS , - ) ;
Distance : 5

14
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

15
Tree	String moduleName = guessCJSModuleName ( moduleName , NUMBER_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , NUMBER_CONSTANT ) ;
Distance : 4

16
Tree	String moduleName = guessCJSModuleName ( Feature.KEYWORDS_AS_PROPERTIES , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( Feature.KEYWORDS_AS_PROPERTIES , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

17
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , true , - ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , true , - ) ;
Distance : 5

18
Tree	String moduleName = getSourceFileName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 9

19
Tree	String script = moduleName ( script ) ;
Code	String script = moduleName ( script ) ;
Distance : 5

20
Tree	String moduleName = guessCJSModuleName ( assignment.oldName , script ) ;
Code	String moduleName = guessCJSModuleName ( assignment.oldName , script ) ;
Distance : 4

21
Tree	String moduleName = guessCJSModuleName ( Feature.KEYWORDS_AS_PROPERTIES , script ) ;
Code	String moduleName = guessCJSModuleName ( Feature.KEYWORDS_AS_PROPERTIES , script ) ;
Distance : 4

22
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 5

23
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

24
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , script ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , script ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

25
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

26
Tree	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

27
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , script ( script ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , script ( script ( script . getSourceFileName () ) ) ) ;
Distance : 8

28
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 8

29
Tree	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

30
Tree	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

31
Tree	String moduleName = guessCJSModuleName ( script , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , moduleName , moduleName ) ;
Distance : 4

32
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

33
Tree	String script = guessCJSModuleName ( script , script ) ;
Code	String script = guessCJSModuleName ( script , script ) ;
Distance : 4

34
Tree	String moduleName = guessCJSModuleName ( script ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

35
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 3

36
Tree	String script = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

37
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , loopNode.body ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , loopNode.body ) ;
Distance : 7

38
Tree	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 11

39
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , ResolutionMode.BROWSER ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , ResolutionMode.BROWSER ) ;
Distance : 7

40
Tree	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 8

41
Tree	String moduleName = script ( script ) ;
Code	String moduleName = script ( script ) ;
Distance : 4

42
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

43
Tree	String moduleName = guessCJSModuleName ( script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , moduleName ) ;
Distance : 3

44
Tree	String script = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

45
Tree	String moduleName = guessCJSModuleName ( script , script , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , script , moduleName , moduleName ) ;
Distance : 6

46
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , TokenType.OPEN_PAREN ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , TokenType.OPEN_PAREN ) ;
Distance : 4

47
Tree	String moduleName = guessCJSModuleName ( assignment.oldName ) ;
Code	String moduleName = guessCJSModuleName ( assignment.oldName ) ;
Distance : 4

48
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 11

49
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

50
Tree	String moduleName = guessCJSModuleName ( - , CHAR_CONS , - ) ;
Code	String moduleName = guessCJSModuleName ( - , CHAR_CONS , - ) ;
Distance : 5

51
Tree	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

52
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 8

53
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

54
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 6

55
Tree	String moduleName = guessCJSModuleName ( script , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	String moduleName = guessCJSModuleName ( script , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 3

56
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 10

57
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Distance : 7

58
Tree	String moduleName = guessCJSModuleName ( script , this . script ) ;
Code	String moduleName = guessCJSModuleName ( script , this . script ) ;
Distance : 4

59
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 6

60
Tree	String moduleName = guessCJSModuleName ( script , script , moduleName , script ) ;
Code	String moduleName = guessCJSModuleName ( script , script , moduleName , script ) ;
Distance : 6

61
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 3

62
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

63
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Distance : 6

64
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 9

65
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 6

66
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 4

67
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 6

68
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) ) ;
Distance : 4

69
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

70
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 5

71
Tree	String moduleName = getSourceFileName ( script ) ;
Code	String moduleName = getSourceFileName ( script ) ;
Distance : 4

72
Tree	String moduleName = getSourceFileName ( script , this . moduleName ) ;
Code	String moduleName = getSourceFileName ( script , this . moduleName ) ;
Distance : 5

73
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) ) ;
Distance : 6

74
Tree	String script = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

75
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 5

76
Tree	String moduleName = guessCJSModuleName ( script , moduleName , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , moduleName , moduleName , moduleName ) ;
Distance : 6

77
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

78
Tree	String moduleName = getSourceFileName ( script , script , false ) ;
Code	String moduleName = getSourceFileName ( script , script , false ) ;
Distance : 5

79
Tree	String moduleName = guessCJSModuleName ( script ( script ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( script ( script ) ) ) ;
Distance : 6

80
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) ) ;
Distance : 3

81
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , TokenType.OPEN_PAREN ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , TokenType.OPEN_PAREN ) ;
Distance : 4

82
Tree	String script = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Distance : 4

83
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

84
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 8

85
Tree	String moduleName = moduleName ( script , moduleName , moduleName ) ;
Code	String moduleName = moduleName ( script , moduleName , moduleName ) ;
Distance : 5

86
Tree	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

87
Tree	String moduleName = moduleName . guessCJSModuleName ( script , script , moduleName ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( script , script , moduleName ) ;
Distance : 6

88
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 3

89
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

90
Tree	String moduleName = moduleName ( script , script , script ) ;
Code	String moduleName = moduleName ( script , script , script ) ;
Distance : 5

91
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , ModuleLoader.JSC_BROWSER_BLACKLISTED_MARKER ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , ModuleLoader.JSC_BROWSER_BLACKLISTED_MARKER ) ;
Distance : 7

92
Tree	String moduleName = guessCJSModuleName ( googProvide , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( googProvide , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

93
Tree	String moduleName = getSourceFileName ( script , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , script , moduleName ) ;
Distance : 5

94
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Distance : 5

95
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 11

96
Tree	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

97
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 6

98
Tree	String moduleName = getSourceFileName ( script , this . script ) ;
Code	String moduleName = getSourceFileName ( script , this . script ) ;
Distance : 5

99
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 7

100
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

101
Tree	String moduleName = guessCJSModuleName ( script , recvLvalue.env ) ;
Code	String moduleName = guessCJSModuleName ( script , recvLvalue.env ) ;
Distance : 3

102
Tree	String moduleName = moduleName . getSourceFileName ( script , moduleName , moduleName ) ;
Code	String moduleName = moduleName . getSourceFileName ( script , moduleName , moduleName ) ;
Distance : 7

103
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

104
Tree	String script = guessCJSModuleName ( script ) ;
Code	String script = guessCJSModuleName ( script ) ;
Distance : 4

105
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 5

106
Tree	String moduleName = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 13

107
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , types ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , types ) ;
Distance : 7

108
Tree	String moduleName = moduleName . getSourceFileName ( script , script , moduleName ) ;
Code	String moduleName = moduleName . getSourceFileName ( script , script , moduleName ) ;
Distance : 7

109
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , var.name ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , var.name ) ;
Distance : 4

110
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

111
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

112
Tree	String moduleName = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

113
Tree	String moduleName = moduleName . getSourceFileName ( script , script , script ) ;
Code	String moduleName = moduleName . getSourceFileName ( script , script , script ) ;
Distance : 7

114
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

115
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

116
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 5

117
Tree	String script = guessCJSModuleName ( script , script , moduleName ) ;
Code	String script = guessCJSModuleName ( script , script , moduleName ) ;
Distance : 5

118
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , CompilerTestCase.LINE_JOINER ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , CompilerTestCase.LINE_JOINER ) ;
Distance : 4

119
Tree	String moduleName = getSourceFileName ( script . getSourceFileName () ) . moduleName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName () ) . moduleName ( STRING_CONSTANT ) ;
Distance : 6

120
Tree	String moduleName = getSourceFileName ( script , script ) ;
Code	String moduleName = getSourceFileName ( script , script ) ;
Distance : 4

121
Tree	String moduleName = guessCJSModuleName ( script , script , true ) ;
Code	String moduleName = guessCJSModuleName ( script , script , true ) ;
Distance : 4

122
Tree	String moduleName = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

123
Tree	String script = moduleName ( script , script ) ;
Code	String script = moduleName ( script , script ) ;
Distance : 5

124
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

125
Tree	String moduleName = getSourceFileName ( script , script , true ) ;
Code	String moduleName = getSourceFileName ( script , script , true ) ;
Distance : 5

126
Tree	String moduleName = guessCJSModuleName ( script , script , false ) ;
Code	String moduleName = guessCJSModuleName ( script , script , false ) ;
Distance : 4

127
Tree	String moduleName = guessCJSModuleName ( - , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	String moduleName = guessCJSModuleName ( - , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 4

128
Tree	String script = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

129
Tree	String script = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

130
Tree	String moduleName = moduleName ( moduleName , script ) ;
Code	String moduleName = moduleName ( moduleName , script ) ;
Distance : 5

131
Tree	String moduleName = guessCJSModuleName ( script ) ;
Code	String moduleName = guessCJSModuleName ( script ) ;
Distance : 3

132
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 4

133
Tree	String moduleName = guessCJSModuleName ( assignment.oldName , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( assignment.oldName , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

134
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

135
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , StrictModeCheck.DUPLICATE_CLASS_METHODS ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , StrictModeCheck.DUPLICATE_CLASS_METHODS ) ;
Distance : 4

136
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , script ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , script ) ;
Distance : 4

137
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , script ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , script ) ;
Distance : 6

138
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

139
Tree	String moduleName = guessCJSModuleName ( script , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , script , moduleName ) ;
Distance : 4

140
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , CHAR_CONS , - ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , CHAR_CONS , - ) ;
Distance : 5

141
Tree	String script = guessCJSModuleName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 9

142
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Distance : 4

143
Tree	String moduleName = guessCJSModuleName ( script , STRING_CONSTANT + moduleName + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script , STRING_CONSTANT + moduleName + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 8

144
Tree	String moduleName = getSourceFileName ( script , script , moduleName , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , script , moduleName , moduleName ) ;
Distance : 7

145
Tree	String moduleName = moduleName ( script , moduleName ) ;
Code	String moduleName = moduleName ( script , moduleName ) ;
Distance : 4

146
Tree	String moduleName = guessCJSModuleName ( googProvide ) ;
Code	String moduleName = guessCJSModuleName ( googProvide ) ;
Distance : 4

147
Tree	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Distance : 3

148
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 6

149
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 10

150
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

151
Tree	String moduleName = moduleName ( moduleName ) ;
Code	String moduleName = moduleName ( moduleName ) ;
Distance : 5

152
Tree	String moduleName = guessCJSModuleName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 8

153
Tree	String moduleName = guessCJSModuleName ( googProvide , script ) ;
Code	String moduleName = guessCJSModuleName ( googProvide , script ) ;
Distance : 4

154
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , getSourceFileName ( script ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , getSourceFileName ( script ( script . getSourceFileName () ) ) ) ;
Distance : 8

155
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST ) ;
Distance : 4

156
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

157
Tree	String moduleName = guessCJSModuleName ( Feature.KEYWORDS_AS_PROPERTIES ) ;
Code	String moduleName = guessCJSModuleName ( Feature.KEYWORDS_AS_PROPERTIES ) ;
Distance : 4

158
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

159
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

160
Tree	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

161
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 11

162
Tree	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Distance : 4

163
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

164
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 11

165
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , obj2.props ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , obj2.props ) ;
Distance : 4

166
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) ) ;
Distance : 4

167
Tree	String moduleName = guessCJSModuleName ( script , this . moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , this . moduleName ) ;
Distance : 4

168
Tree	String moduleName = guessCJSModuleName ( moduleName ) ;
Code	String moduleName = guessCJSModuleName ( moduleName ) ;
Distance : 4

169
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Distance : 6

170
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script ) ) ) ;
Distance : 6

171
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) ) ;
Distance : 6

172
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 11

173
Tree	String script = moduleName ( script , script , moduleName ) ;
Code	String script = moduleName ( script , script , moduleName ) ;
Distance : 6

174
Tree	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

175
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 24
Parent Code is: 
c . canInline ()
-------------------------------------------------------------------------------
Child code is: 
c . canInline ( t . getScope () )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (216{val=()})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (214{val=(}) (32 (800{val=t}) (235{val=.}) (802{val=getScope}) (216{val=()})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/3/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 176
Wrong
========================================================================
False

0
Tree	c ( c )
Code	c ( c )
Distance : 6

1
Tree	this
Code	this
Distance : 9

2
Tree	NodeUtil
Code	NodeUtil
Distance : 9

3
Tree	getScope ()
Code	getScope ()
Distance : 7

4
Tree	( ( c ) c ) . canInline ()
Code	( ( c ) c ) . canInline ()
Distance : 8

5
Tree	c
Code	c
Distance : 8

6
Tree	c . canInline ( c . getScope () , c . canInline () )
Code	c . canInline ( c . getScope () , c . canInline () )
Distance : 6

7
Tree	getScope ( c () , c . canInline () )
Code	getScope ( c () , c . canInline () )
Distance : 7

8
Tree	t . getScope ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Code	t . getScope ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Distance : 6

9
Tree	c . canInline ( t , c )
Code	c . canInline ( t , c )
Distance : 3

10
Tree	this . t . getScope ()
Code	this . t . getScope ()
Distance : 4

11
Tree	c . canInline () . () ()
Code	c . canInline () . () ()
Distance : 4

12
Tree	getScope ( t , c )
Code	getScope ( t , c )
Distance : 6

13
Tree	c . canInline ( c )
Code	c . canInline ( c )
Distance : 4

14
Tree	getScope ( c )
Code	getScope ( c )
Distance : 7

15
Tree	t . canInline ( STRING_CONSTANT )
Code	t . canInline ( STRING_CONSTANT )
Distance : 5

16
Tree	getScope ( c . canInline () )
Code	getScope ( c . canInline () )
Distance : 5

17
Tree	this . c . canInline ()
Code	this . c . canInline ()
Distance : 6

18
Tree	getScope () . () ( c )
Code	getScope () . () ( c )
Distance : 7

19
Tree	c . canInline () . getScope ()
Code	c . canInline () . getScope ()
Distance : 3

20
Tree	c . canInline ( c . getScope () )
Code	c . canInline ( c . getScope () )
Distance : 1

21
Tree	c . canInline ( c . canInline () )
Code	c . canInline ( c . canInline () )
Distance : 2

22
Tree	new c () . canInline ( t )
Code	new c () . canInline ( t )
Distance : 5

23
Tree	new c () . () ( c )
Code	new c () . () ( c )
Distance : 7

24
Tree	( ( t ) c ) . canInline ()
Code	( ( t ) c ) . canInline ()
Distance : 8

25
Tree	c . canInline ( Token.LABEL_NAME )
Code	c . canInline ( Token.LABEL_NAME )
Distance : 4

26
Tree	c . canInline ( Feature.KEYWORDS_AS_PROPERTIES )
Code	c . canInline ( Feature.KEYWORDS_AS_PROPERTIES )
Distance : 4

27
Tree	STRING_CONSTANT . canInline ( c . canInline () )
Code	STRING_CONSTANT . canInline ( c . canInline () )
Distance : 3

28
Tree	c . getScope ( c )
Code	c . getScope ( c )
Distance : 5

29
Tree	c . getScope ( t , c )
Code	c . getScope ( t , c )
Distance : 4

30
Tree	c . getScope () . getScope ()
Code	c . getScope () . getScope ()
Distance : 4

31
Tree	c . getScope () . () ()
Code	c . getScope () . () ()
Distance : 5

32
Tree	c . canInline ( c ) . getScope ()
Code	c . canInline ( c ) . getScope ()
Distance : 3

33
Tree	c . canInline ( new PropertyWrite ( c ) )
Code	c . canInline ( new PropertyWrite ( c ) )
Distance : 5

34
Tree	new IllegalStateException () . () ( c . canInline () )
Code	new IllegalStateException () . () ( c . canInline () )
Distance : 6

35
Tree	c . canInline ( null )
Code	c . canInline ( null )
Distance : 4

36
Tree	new c () . getScope ( c )
Code	new c () . getScope ( c )
Distance : 7

37
Tree	c . canInline ( NUMBER_CONSTANT )
Code	c . canInline ( NUMBER_CONSTANT )
Distance : 4

38
Tree	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Code	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Distance : 4

39
Tree	c . getScope ( c , c . canInline () )
Code	c . getScope ( c , c . canInline () )
Distance : 5

40
Tree	c . canInline ( PassNames.PARSE_INPUTS )
Code	c . canInline ( PassNames.PARSE_INPUTS )
Distance : 4

41
Tree	new throw ( c ) . canInline ()
Code	new throw ( c ) . canInline ()
Distance : 7

42
Tree	c ( t )
Code	c ( t )
Distance : 5

43
Tree	getScope ( c ) . getScope ()
Code	getScope ( c ) . getScope ()
Distance : 6

44
Tree	new IllegalStateException ( c ) . c ( c . canInline () )
Code	new IllegalStateException ( c ) . c ( c . canInline () )
Distance : 7

45
Tree	new throw () . () ( c . canInline () )
Code	new throw () . () ( c . canInline () )
Distance : 6

46
Tree	c . canInline ( c , Es6ToEs3Util.CANNOT_CONVERT_YET )
Code	c . canInline ( c , Es6ToEs3Util.CANNOT_CONVERT_YET )
Distance : 4

47
Tree	t ( c )
Code	t ( c )
Distance : 7

48
Tree	c . canInline ( c , false )
Code	c . canInline ( c , false )
Distance : 4

49
Tree	new functionBody ( c ) . canInline ()
Code	new functionBody ( c ) . canInline ()
Distance : 7

50
Tree	getScope ( STRING_CONSTANT )
Code	getScope ( STRING_CONSTANT )
Distance : 7

51
Tree	( ( c ) t ) . canInline ()
Code	( ( c ) t ) . canInline ()
Distance : 7

52
Tree	c . getScope ( c , c )
Code	c . getScope ( c , c )
Distance : 5

53
Tree	getScope () . getScope ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Code	getScope () . getScope ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Distance : 7

54
Tree	this . t . canInline ()
Code	this . t . canInline ()
Distance : 5

55
Tree	t ( t )
Code	t ( t )
Distance : 6

56
Tree	c . canInline ( c , new useSourceInfoForNewQName ( c ) )
Code	c . canInline ( c , new useSourceInfoForNewQName ( c ) )
Distance : 7

57
Tree	c . getScope () . () ( c )
Code	c . getScope () . () ( c )
Distance : 6

58
Tree	c ( c ) . c ()
Code	c ( c ) . c ()
Distance : 6

59
Tree	c . getScope ( t )
Code	c . getScope ( t )
Distance : 4

60
Tree	t . getScope ( null )
Code	t . getScope ( null )
Distance : 6

61
Tree	c ( t , c )
Code	c ( t , c )
Distance : 5

62
Tree	c . getScope ( c , true )
Code	c . getScope ( c , true )
Distance : 5

63
Tree	c . getScope ( c ) . c ()
Code	c . getScope ( c ) . c ()
Distance : 5

64
Tree	new c () . getScope ( t )
Code	new c () . getScope ( t )
Distance : 6

65
Tree	c . canInline ( new RemovableBuilder ( c ) )
Code	c . canInline ( new RemovableBuilder ( c ) )
Distance : 5

66
Tree	c . canInline ( c , new IllegalStateException ( c ) )
Code	c . canInline ( c , new IllegalStateException ( c ) )
Distance : 7

67
Tree	InvalidatingTypes.Builder . canInline ()
Code	InvalidatingTypes.Builder . canInline ()
Distance : 6

68
Tree	c . canInline ( currentScript.defaultExportLocalName )
Code	c . canInline ( currentScript.defaultExportLocalName )
Distance : 4

69
Tree	c () . getScope ( c )
Code	c () . getScope ( c )
Distance : 6

70
Tree	t . canInline ( null )
Code	t . canInline ( null )
Distance : 5

71
Tree	t . getScope ( NUMBER_CONSTANT )
Code	t . getScope ( NUMBER_CONSTANT )
Distance : 6

72
Tree	c . canInline ( t )
Code	c . canInline ( t )
Distance : 3

73
Tree	c . getScope ( c , Es6ToEs3Util.CANNOT_CONVERT_YET )
Code	c . getScope ( c , Es6ToEs3Util.CANNOT_CONVERT_YET )
Distance : 5

74
Tree	c ( c . getScope () )
Code	c ( c . getScope () )
Distance : 3

75
Tree	new CodePrinter.Builder ( c ) . canInline ()
Code	new CodePrinter.Builder ( c ) . canInline ()
Distance : 7

76
Tree	c . canInline ( c , c . getScope () )
Code	c . canInline ( c , c . getScope () )
Distance : 3

77
Tree	c . canInline ( c , c , c . getScope () )
Code	c . canInline ( c , c , c . getScope () )
Distance : 5

78
Tree	getScope () . () ( FeatureSet.ES6 )
Code	getScope () . () ( FeatureSet.ES6 )
Distance : 7

79
Tree	canInline ( c )
Code	canInline ( c )
Distance : 6

80
Tree	c . canInline ( c , renamer )
Code	c . canInline ( c , renamer )
Distance : 4

81
Tree	t . getScope ( STRING_CONSTANT )
Code	t . getScope ( STRING_CONSTANT )
Distance : 6

82
Tree	new functionBody ( c ) . canInline ( c )
Code	new functionBody ( c ) . canInline ( c )
Distance : 8

83
Tree	t . getScope ()
Code	t . getScope ()
Distance : 5

84
Tree	c . getScope ( c , c , c . getScope () )
Code	c . getScope ( c , c , c . getScope () )
Distance : 6

85
Tree	c . canInline () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Code	c . canInline () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Distance : 5

86
Tree	c . getScope ( c , c , c . canInline () )
Code	c . getScope ( c , c , c . canInline () )
Distance : 7

87
Tree	c . canInline ( c , true )
Code	c . canInline ( c , true )
Distance : 4

88
Tree	getScope ( t )
Code	getScope ( t )
Distance : 6

89
Tree	c . canInline () . getScope ( FeatureSet.ES6 )
Code	c . canInline () . getScope ( FeatureSet.ES6 )
Distance : 4

90
Tree	c . canInline ( c , new PeepholeFoldConstants ( c ) )
Code	c . canInline ( c , new PeepholeFoldConstants ( c ) )
Distance : 7

91
Tree	c . canInline ( getScope () , c . c () )
Code	c . canInline ( getScope () , c . c () )
Distance : 5

92
Tree	c . canInline () . canInline ( FeatureSet.ES6 )
Code	c . canInline () . canInline ( FeatureSet.ES6 )
Distance : 5

93
Tree	t . canInline ( NUMBER_CONSTANT )
Code	t . canInline ( NUMBER_CONSTANT )
Distance : 5

94
Tree	c . canInline () . getScope ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Code	c . canInline () . getScope ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Distance : 4

95
Tree	c . getScope () . getScope ( c )
Code	c . getScope () . getScope ( c )
Distance : 5

96
Tree	canInline ( c . canInline () )
Code	canInline ( c . canInline () )
Distance : 4

97
Tree	STRING_CONSTANT . getScope ( c . canInline () )
Code	STRING_CONSTANT . getScope ( c . canInline () )
Distance : 4

98
Tree	canInline () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Code	canInline () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Distance : 7

99
Tree	STRING_CONSTANT . getScope ( c . getScope () )
Code	STRING_CONSTANT . getScope ( c . getScope () )
Distance : 3

100
Tree	new functionBody ( c ) . canInline ( c . canInline () )
Code	new functionBody ( c ) . canInline ( c . canInline () )
Distance : 6

101
Tree	t . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Code	t . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Distance : 5

102
Tree	c . canInline ( canInline () , c . getScope () )
Code	c . canInline ( canInline () , c . getScope () )
Distance : 4

103
Tree	c . canInline ( c , c , c . canInline () )
Code	c . canInline ( c , c , c . canInline () )
Distance : 6

104
Tree	; . canInline ()
Code	; . canInline ()
Distance : 6

105
Tree	getScope ( STRING_CONSTANT ) block
Code	getScope ( STRING_CONSTANT ) block
Distance : 8

106
Tree	c . canInline () . getScope ( c )
Code	c . canInline () . getScope ( c )
Distance : 4

107
Tree	c . canInline ()
Code	c . canInline ()
Distance : 5

108
Tree	c . getScope ( STRING_CONSTANT )
Code	c . getScope ( STRING_CONSTANT )
Distance : 5

109
Tree	getScope () of
Code	getScope () of
Distance : 7

110
Tree	hasTypeCheckingRun . canInline ()
Code	hasTypeCheckingRun . canInline ()
Distance : 6

111
Tree	c . getScope ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Code	c . getScope ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Distance : 5

112
Tree	( ( c ) c ) . getScope ()
Code	( ( c ) c ) . getScope ()
Distance : 7

113
Tree	c ()
Code	c ()
Distance : 7

114
Tree	c . getScope ( null )
Code	c . getScope ( null )
Distance : 5

115
Tree	currentScript.declareLegacyNamespace . canInline ()
Code	currentScript.declareLegacyNamespace . canInline ()
Distance : 6

116
Tree	c . canInline ( STRING_CONSTANT )
Code	c . canInline ( STRING_CONSTANT )
Distance : 4

117
Tree	c . canInline ( c , c )
Code	c . canInline ( c , c )
Distance : 4

118
Tree	c . canInline ( new StringBuilder ( c ) )
Code	c . canInline ( new StringBuilder ( c ) )
Distance : 5

119
Tree	getScope ( c , c )
Code	getScope ( c , c )
Distance : 7

120
Tree	getScope () block
Code	getScope () block
Distance : 7

121
Tree	canInline ( c , c )
Code	canInline ( c , c )
Distance : 6

122
Tree	STRING_CONSTANT . canInline ( c . getScope () )
Code	STRING_CONSTANT . canInline ( c . getScope () )
Distance : 2

123
Tree	c . getScope ( NUMBER_CONSTANT )
Code	c . getScope ( NUMBER_CONSTANT )
Distance : 5

124
Tree	getScope ( c . getScope () )
Code	getScope ( c . getScope () )
Distance : 4

125
Tree	c ( t )
Code	c ( t )
Distance : 5

126
Tree	new IllegalStateException ( c ) . canInline ( c )
Code	new IllegalStateException ( c ) . canInline ( c )
Distance : 8

127
Tree	new IllegalStateException () . getScope ( c . canInline () )
Code	new IllegalStateException () . getScope ( c . canInline () )
Distance : 6

128
Tree	new IllegalStateException ( c ) . canInline ( c . getScope () )
Code	new IllegalStateException ( c ) . canInline ( c . getScope () )
Distance : 5

129
Tree	getScope () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Code	getScope () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Distance : 7

130
Tree	new throw ( c ) . canInline ( c )
Code	new throw ( c ) . canInline ( c )
Distance : 8

131
Tree	c ( STRING_CONSTANT )
Code	c ( STRING_CONSTANT )
Distance : 6

132
Tree	t . canInline ()
Code	t . canInline ()
Distance : 6

133
Tree	c () . () ()
Code	c () . () ()
Distance : 6

134
Tree	c ( c ) . getScope ()
Code	c ( c ) . getScope ()
Distance : 5

135
Tree	c . getScope ( c . canInline () )
Code	c . getScope ( c . canInline () )
Distance : 3

136
Tree	c . canInline ( c , c . canInline () )
Code	c . canInline ( c , c . canInline () )
Distance : 4

137
Tree	getScope () . getScope ( c )
Code	getScope () . getScope ( c )
Distance : 7

138
Tree	getScope () . getScope ()
Code	getScope () . getScope ()
Distance : 6

139
Tree	c . canInline ( c ) . canInline ()
Code	c . canInline ( c ) . canInline ()
Distance : 4

140
Tree	c () . getScope ()
Code	c () . getScope ()
Distance : 5

141
Tree	c . getScope ( c . getScope () )
Code	c . getScope ( c . getScope () )
Distance : 2

142
Tree	c . getScope ( new StringBuilder ( c ) )
Code	c . getScope ( new StringBuilder ( c ) )
Distance : 6

143
Tree	new CodePrinter.Builder ( c ) . canInline ( c )
Code	new CodePrinter.Builder ( c ) . canInline ( c )
Distance : 8

144
Tree	new IllegalStateException ( c ) . canInline ()
Code	new IllegalStateException ( c ) . canInline ()
Distance : 7

145
Tree	c . getScope ( c , false )
Code	c . getScope ( c , false )
Distance : 5

146
Tree	canInline () . () ( c )
Code	canInline () . () ( c )
Distance : 7

147
Tree	t . getScope ()
Code	t . getScope ()
Distance : 5

148
Tree	getScope () . () ()
Code	getScope () . () ()
Distance : 7

149
Tree	getScope ( c ) . c ()
Code	getScope ( c ) . c ()
Distance : 7

150
Tree	new functionBody () . () ( c . canInline () )
Code	new functionBody () . () ( c . canInline () )
Distance : 6

151
Tree	getScope ( getScope () , c . getScope () )
Code	getScope ( getScope () , c . getScope () )
Distance : 6

152
Tree	c . getScope ( c . canInline () , c . canInline () )
Code	c . getScope ( c . canInline () , c . canInline () )
Distance : 8

153
Tree	c () . () ( c . canInline () )
Code	c () . () ( c . canInline () )
Distance : 4

154
Tree	new throw ( c ) . canInline ( c . canInline () )
Code	new throw ( c ) . canInline ( c . canInline () )
Distance : 6

155
Tree	getScope ( getScope () , c . canInline () )
Code	getScope ( getScope () , c . canInline () )
Distance : 7

156
Tree	getScope () . () ( c . canInline () )
Code	getScope () . () ( c . canInline () )
Distance : 5

157
Tree	getScope () . () ( c . getScope () )
Code	getScope () . () ( c . getScope () )
Distance : 4

158
Tree	c . canInline ( c . canInline () , c . canInline () )
Code	c . canInline ( c . canInline () , c . canInline () )
Distance : 7

159
Tree	c . canInline ( canInline () , c . canInline () )
Code	c . canInline ( canInline () , c . canInline () )
Distance : 5

160
Tree	c . canInline () . () ( c )
Code	c . canInline () . () ( c )
Distance : 5

161
Tree	. ( getScope () , c . canInline () )
Code	. ( getScope () , c . canInline () )
Distance : 7

162
Tree	c . getScope ( c ) . getScope ()
Code	c . getScope ( c ) . getScope ()
Distance : 4

163
Tree	getScope ( STRING_CONSTANT ) of
Code	getScope ( STRING_CONSTANT ) of
Distance : 8

164
Tree	c . canInline ( c . canInline () , c . getScope () )
Code	c . canInline ( c . canInline () , c . getScope () )
Distance : 6

165
Tree	c . canInline ( c , inheritedPropDef.methodType )
Code	c . canInline ( c , inheritedPropDef.methodType )
Distance : 4

166
Tree	c . getScope ( c , c . getScope () )
Code	c . getScope ( c , c . getScope () )
Distance : 4

167
Tree	getScope () . getScope ( c . canInline () )
Code	getScope () . getScope ( c . canInline () )
Distance : 5

168
Tree	c . getScope ()
Code	c . getScope ()
Distance : 5

169
Tree	c . canInline ( getScope () , c . getScope () )
Code	c . canInline ( getScope () , c . getScope () )
Distance : 4

170
Tree	t . canInline ()
Code	t . canInline ()
Distance : 6

171
Tree	key
Code	key
Distance : 9

172
Tree	c . canInline ()
Code	c . canInline ()
Distance : 5

173
Tree	this . c . getScope ()
Code	this . c . getScope ()
Distance : 5

174
Tree	c . getScope ()
Code	c . getScope ()
Distance : 5

175
Tree	c . canInline ( c , new Compiler ( c ) )
Code	c . canInline ( c , new Compiler ( c ) )
Distance : 7

========================================================================


