========================================================================
Example Number: 1
Parent Code is: 
int len = thisBuf.length - strLen ;
-------------------------------------------------------------------------------
Child code is: 
int len = size - strLen + NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (40{val=thisBuf.length}) (201{val=-}) (800{val=strLen}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (27 (800{val=size}) (201{val=-}) (800{val=strLen})) (200{val=+}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/61/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 270
Wrong
========================================================================
False

0
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

1
Tree	int len = STRING_CONSTANT + len ;
Code	int len = STRING_CONSTANT + len ;
Distance : 4

2
Tree	int len = mValues () - strLen ;
Code	int len = mValues () - strLen ;
Distance : 4

3
Tree	int len = STRING_CONSTANT + strLen ;
Code	int len = STRING_CONSTANT + strLen ;
Distance : 4

4
Tree	int len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	int len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 3

5
Tree	int len = getProperNumerator () - strLen ;
Code	int len = getProperNumerator () - strLen ;
Distance : 4

6
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

7
Tree	int len = chars.length > > > NUMBER_CONSTANT ;
Code	int len = chars.length > > > NUMBER_CONSTANT ;
Distance : 4

8
Tree	int len = NUMBER_CONSTANT - strLen ;
Code	int len = NUMBER_CONSTANT - strLen ;
Distance : 3

9
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 5

10
Tree	int len = strLen ;
Code	int len = strLen ;
Distance : 4

11
Tree	boolean len = ( int ) len * len ;
Code	boolean len = ( int ) len * len ;
Distance : 7

12
Tree	int len = len / len - strLen ;
Code	int len = len / len - strLen ;
Distance : 5

13
Tree	char len = len - strLen ;
Code	char len = len - strLen ;
Distance : 4

14
Tree	int len = len / strLen - size ;
Code	int len = len / strLen - size ;
Distance : 4

15
Tree	double len = len - strLen ;
Code	double len = len - strLen ;
Distance : 4

16
Tree	int len = len / strLen - len ;
Code	int len = len / strLen - len ;
Distance : 4

17
Tree	int len = len + strLen + size + len ;
Code	int len = len + strLen + size + len ;
Distance : 5

18
Tree	int len = len + len + STRING_CONSTANT ;
Code	int len = len + len + STRING_CONSTANT ;
Distance : 4

19
Tree	long len = NUMBER_CONSTANT - strLen ;
Code	long len = NUMBER_CONSTANT - strLen ;
Distance : 4

20
Tree	boolean len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

21
Tree	int len = size % NUMBER_CONSTANT ;
Code	int len = size % NUMBER_CONSTANT ;
Distance : 3

22
Tree	int len = len / size + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len / size + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 8

23
Tree	int len = len + STRING_CONSTANT + len ;
Code	int len = len + STRING_CONSTANT + len ;
Distance : 4

24
Tree	long len = NUMBER_CONSTANT * = ;
Code	long len = NUMBER_CONSTANT * = ;
Distance : 6

25
Tree	int len = ( boolean ) len * len ;
Code	int len = ( boolean ) len * len ;
Distance : 6

26
Tree	int size = NUMBER_CONSTANT * = ;
Code	int size = NUMBER_CONSTANT * = ;
Distance : 6

27
Tree	int len = size / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = size / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 8

28
Tree	int len = NUMBER_CONSTANT * strLen * len * = ;
Code	int len = NUMBER_CONSTANT * strLen * len * = ;
Distance : 6

29
Tree	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

30
Tree	boolean len = thisBuf.length + NUMBER_CONSTANT ;
Code	boolean len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

31
Tree	short len = thisBuf.length - strLen ;
Code	short len = thisBuf.length - strLen ;
Distance : 4

32
Tree	int len = len / strLen + len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len / strLen + len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

33
Tree	int len = NUMBER_CONSTANT * size * strLen * = ;
Code	int len = NUMBER_CONSTANT * size * strLen * = ;
Distance : 5

34
Tree	boolean len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	boolean len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

35
Tree	long len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	long len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

36
Tree	int len = size + STRING_CONSTANT + = ;
Code	int len = size + STRING_CONSTANT + = ;
Distance : 3

37
Tree	byte len = thisBuf.length - strLen ;
Code	byte len = thisBuf.length - strLen ;
Distance : 4

38
Tree	double len = thisBuf.length - strLen ;
Code	double len = thisBuf.length - strLen ;
Distance : 4

39
Tree	boolean len = len / strLen ;
Code	boolean len = len / strLen ;
Distance : 5

40
Tree	int len = thisBuf.length - len ;
Code	int len = thisBuf.length - len ;
Distance : 4

41
Tree	char len = thisBuf.length - strLen ;
Code	char len = thisBuf.length - strLen ;
Distance : 4

42
Tree	void len = NUMBER_CONSTANT * int ;
Code	void len = NUMBER_CONSTANT * int ;
Distance : 6

43
Tree	boolean len = thisBuf.length - strLen ;
Code	boolean len = thisBuf.length - strLen ;
Distance : 4

44
Tree	int len = len + strLen + strLen + size ;
Code	int len = len + strLen + strLen + size ;
Distance : 5

45
Tree	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

46
Tree	int len = thisBuf.length - size ;
Code	int len = thisBuf.length - size ;
Distance : 4

47
Tree	int len = len / size - strLen ;
Code	int len = len / size - strLen ;
Distance : 4

48
Tree	byte len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	byte len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

49
Tree	int len = thisBuf.length - strLen ;
Code	int len = thisBuf.length - strLen ;
Distance : 3

50
Tree	int strLen = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	int strLen = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 6

51
Tree	int len = len + size + STRING_CONSTANT ;
Code	int len = len + size + STRING_CONSTANT ;
Distance : 4

52
Tree	int len = len + final () + strLen ;
Code	int len = len + final () + strLen ;
Distance : 5

53
Tree	boolean len = STRING_CONSTANT + len ;
Code	boolean len = STRING_CONSTANT + len ;
Distance : 5

54
Tree	int len = NUMBER_CONSTANT * len * strLen * = ;
Code	int len = NUMBER_CONSTANT * len * strLen * = ;
Distance : 6

55
Tree	double len = STRING_CONSTANT + len ;
Code	double len = STRING_CONSTANT + len ;
Distance : 5

56
Tree	int len = len && chars.length ;
Code	int len = len && chars.length ;
Distance : 5

57
Tree	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

58
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

59
Tree	int strLen = thisBuf.length - strLen ;
Code	int strLen = thisBuf.length - strLen ;
Distance : 4

60
Tree	int len = len - len ;
Code	int len = len - len ;
Distance : 4

61
Tree	int len = unmodifiableSet > > > NUMBER_CONSTANT ;
Code	int len = unmodifiableSet > > > NUMBER_CONSTANT ;
Distance : 4

62
Tree	int len = STRING_CONSTANT + size ;
Code	int len = STRING_CONSTANT + size ;
Distance : 4

63
Tree	int len = len / size ;
Code	int len = len / size ;
Distance : 5

64
Tree	int len = len && length ;
Code	int len = len && length ;
Distance : 5

65
Tree	boolean len = len ;
Code	boolean len = len ;
Distance : 6

66
Tree	int len = chars.length () - strLen ;
Code	int len = chars.length () - strLen ;
Distance : 4

67
Tree	short len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	short len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

68
Tree	int len = len / strLen - strLen ;
Code	int len = len / strLen - strLen ;
Distance : 4

69
Tree	int len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

70
Tree	void len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	void len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

71
Tree	int len = len : NUMBER_CONSTANT ;
Code	int len = len : NUMBER_CONSTANT ;
Distance : 4

72
Tree	int strLen = NUMBER_CONSTANT - strLen ;
Code	int strLen = NUMBER_CONSTANT - strLen ;
Distance : 4

73
Tree	boolean len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	boolean len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

74
Tree	char len = NUMBER_CONSTANT * = ;
Code	char len = NUMBER_CONSTANT * = ;
Distance : 6

75
Tree	char len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	char len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

76
Tree	int len = len % NUMBER_CONSTANT ;
Code	int len = len % NUMBER_CONSTANT ;
Distance : 4

77
Tree	int len = len + length () + strLen ;
Code	int len = len + length () + strLen ;
Distance : 5

78
Tree	int len = NUMBER_CONSTANT - size ;
Code	int len = NUMBER_CONSTANT - size ;
Distance : 4

79
Tree	int len = size / strLen - strLen ;
Code	int len = size / strLen - strLen ;
Distance : 3

80
Tree	int len = len + size + strLen + strLen ;
Code	int len = len + size + strLen + strLen ;
Distance : 4

81
Tree	short len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	short len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

82
Tree	int len = CHAR_CONS > > > NUMBER_CONSTANT ;
Code	int len = CHAR_CONS > > > NUMBER_CONSTANT ;
Distance : 4

83
Tree	byte len = len % NUMBER_CONSTANT ;
Code	byte len = len % NUMBER_CONSTANT ;
Distance : 5

84
Tree	int len = len class NUMBER_CONSTANT ;
Code	int len = len class NUMBER_CONSTANT ;
Distance : 4

85
Tree	int len = len && unmodifiableSet ;
Code	int len = len && unmodifiableSet ;
Distance : 5

86
Tree	boolean len = size % NUMBER_CONSTANT ;
Code	boolean len = size % NUMBER_CONSTANT ;
Distance : 4

87
Tree	int len = len / len ;
Code	int len = len / len ;
Distance : 5

88
Tree	int len = len - NUMBER_CONSTANT ;
Code	int len = len - NUMBER_CONSTANT ;
Distance : 3

89
Tree	byte len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	byte len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

90
Tree	int len = @ > > > NUMBER_CONSTANT ;
Code	int len = @ > > > NUMBER_CONSTANT ;
Distance : 4

91
Tree	int len = len ;
Code	int len = len ;
Distance : 5

92
Tree	int len = forDigit () - strLen ;
Code	int len = forDigit () - strLen ;
Distance : 4

93
Tree	int len = ( char ) size * len ;
Code	int len = ( char ) size * len ;
Distance : 6

94
Tree	int len = greatestCommonDivisor () - strLen ;
Code	int len = greatestCommonDivisor () - strLen ;
Distance : 4

95
Tree	char len = len ;
Code	char len = len ;
Distance : 6

96
Tree	int len = indexOfDifference () - strLen ;
Code	int len = indexOfDifference () - strLen ;
Distance : 4

97
Tree	char len = len / strLen ;
Code	char len = len / strLen ;
Distance : 5

98
Tree	int len = validateRange () - strLen ;
Code	int len = validateRange () - strLen ;
Distance : 4

99
Tree	int len = newCalendar () - strLen ;
Code	int len = newCalendar () - strLen ;
Distance : 4

100
Tree	int len = len * NUMBER_CONSTANT ;
Code	int len = len * NUMBER_CONSTANT ;
Distance : 4

101
Tree	char len = thisBuf.length + NUMBER_CONSTANT ;
Code	char len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

102
Tree	boolean len = NUMBER_CONSTANT - strLen ;
Code	boolean len = NUMBER_CONSTANT - strLen ;
Distance : 4

103
Tree	int len = size - NUMBER_CONSTANT ;
Code	int len = size - NUMBER_CONSTANT ;
Distance : 2

104
Tree	char len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	char len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

105
Tree	double len = NUMBER_CONSTANT * = ;
Code	double len = NUMBER_CONSTANT * = ;
Distance : 6

106
Tree	int len = len + stub () + strLen ;
Code	int len = len + stub () + strLen ;
Distance : 5

107
Tree	short len = len % NUMBER_CONSTANT ;
Code	short len = len % NUMBER_CONSTANT ;
Distance : 5

108
Tree	char len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 6

109
Tree	int len = len && greatestCommonDivisor ;
Code	int len = len && greatestCommonDivisor ;
Distance : 5

110
Tree	int strLen = len % NUMBER_CONSTANT ;
Code	int strLen = len % NUMBER_CONSTANT ;
Distance : 5

111
Tree	int len = ( int ) len * len ;
Code	int len = ( int ) len * len ;
Distance : 6

112
Tree	int len = len && <= ;
Code	int len = len && <= ;
Distance : 5

113
Tree	int len = unmodifiableSet () - strLen ;
Code	int len = unmodifiableSet () - strLen ;
Distance : 4

114
Tree	char len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

115
Tree	double len = thisBuf.length + NUMBER_CONSTANT ;
Code	double len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

116
Tree	char len = len > > NUMBER_CONSTANT ;
Code	char len = len > > NUMBER_CONSTANT ;
Distance : 5

117
Tree	int len = size / len ;
Code	int len = size / len ;
Distance : 4

118
Tree	int len = len >= NUMBER_CONSTANT ;
Code	int len = len >= NUMBER_CONSTANT ;
Distance : 4

119
Tree	int strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

120
Tree	int size = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int size = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

121
Tree	int len = len && final ;
Code	int len = len && final ;
Distance : 5

122
Tree	int len = len + strLen + len + strLen ;
Code	int len = len + strLen + len + strLen ;
Distance : 5

123
Tree	int len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

124
Tree	int len = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES > > > NUMBER_CONSTANT ;
Code	int len = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES > > > NUMBER_CONSTANT ;
Distance : 4

125
Tree	int len = len / strLen ;
Code	int len = len / strLen ;
Distance : 4

126
Tree	int len = ( int ) len * size ;
Code	int len = ( int ) len * size ;
Distance : 6

127
Tree	byte len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	byte len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 6

128
Tree	boolean len = NUMBER_CONSTANT * = ;
Code	boolean len = NUMBER_CONSTANT * = ;
Distance : 6

129
Tree	int len = NUMBER_CONSTANT * size * size * = ;
Code	int len = NUMBER_CONSTANT * size * size * = ;
Distance : 6

130
Tree	short len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	short len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

131
Tree	int len = len / NUMBER_CONSTANT ;
Code	int len = len / NUMBER_CONSTANT ;
Distance : 4

132
Tree	double len = len > > NUMBER_CONSTANT ;
Code	double len = len > > NUMBER_CONSTANT ;
Distance : 5

133
Tree	char len = STRING_CONSTANT + len ;
Code	char len = STRING_CONSTANT + len ;
Distance : 5

134
Tree	byte len = NUMBER_CONSTANT * = ;
Code	byte len = NUMBER_CONSTANT * = ;
Distance : 6

135
Tree	int len = len + getProperNumerator () + strLen ;
Code	int len = len + getProperNumerator () + strLen ;
Distance : 5

136
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT - size ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT - size ;
Distance : 6

137
Tree	int len = len / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

138
Tree	byte len = thisBuf.length + NUMBER_CONSTANT ;
Code	byte len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

139
Tree	boolean len = size ;
Code	boolean len = size ;
Distance : 5

140
Tree	int len = len - size ;
Code	int len = len - size ;
Distance : 4

141
Tree	int len = throws > > > NUMBER_CONSTANT ;
Code	int len = throws > > > NUMBER_CONSTANT ;
Distance : 4

142
Tree	int strLen = len ;
Code	int strLen = len ;
Distance : 6

143
Tree	char len = len + strLen + STRING_CONSTANT ;
Code	char len = len + strLen + STRING_CONSTANT ;
Distance : 4

144
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - size ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - size ;
Distance : 5

145
Tree	int len = strLen + strLen + STRING_CONSTANT ;
Code	int len = strLen + strLen + STRING_CONSTANT ;
Distance : 3

146
Tree	int len = len + chars.length () + strLen ;
Code	int len = len + chars.length () + strLen ;
Distance : 5

147
Tree	double len = len ;
Code	double len = len ;
Distance : 6

148
Tree	int len = len + unmodifiableSet () + strLen ;
Code	int len = len + unmodifiableSet () + strLen ;
Distance : 5

149
Tree	boolean len = size > > NUMBER_CONSTANT ;
Code	boolean len = size > > NUMBER_CONSTANT ;
Distance : 4

150
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 5

151
Tree	double len = len + strLen + STRING_CONSTANT ;
Code	double len = len + strLen + STRING_CONSTANT ;
Distance : 4

152
Tree	int len = len + greatestCommonDivisor () + strLen ;
Code	int len = len + greatestCommonDivisor () + strLen ;
Distance : 5

153
Tree	int len = ( byte ) len * len ;
Code	int len = ( byte ) len * len ;
Distance : 6

154
Tree	byte len = STRING_CONSTANT + len ;
Code	byte len = STRING_CONSTANT + len ;
Distance : 5

155
Tree	int len = len + getIndex () + strLen ;
Code	int len = len + getIndex () + strLen ;
Distance : 5

156
Tree	int strLen = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int strLen = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

157
Tree	int len = NUMBER_CONSTANT * strLen * strLen * = ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * = ;
Distance : 6

158
Tree	double len = NUMBER_CONSTANT * strLen * strLen * = ;
Code	double len = NUMBER_CONSTANT * strLen * strLen * = ;
Distance : 7

159
Tree	boolean len = NUMBER_CONSTANT * strLen * size * = ;
Code	boolean len = NUMBER_CONSTANT * strLen * size * = ;
Distance : 7

160
Tree	short len = len > > NUMBER_CONSTANT ;
Code	short len = len > > NUMBER_CONSTANT ;
Distance : 5

161
Tree	int len = newStringBuilder () - strLen ;
Code	int len = newStringBuilder () - strLen ;
Distance : 4

162
Tree	int len = thisBuf.length + NUMBER_CONSTANT ;
Code	int len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 3

163
Tree	int len = size > > NUMBER_CONSTANT ;
Code	int len = size > > NUMBER_CONSTANT ;
Distance : 3

164
Tree	int len = set.length > > > NUMBER_CONSTANT ;
Code	int len = set.length > > > NUMBER_CONSTANT ;
Distance : 4

165
Tree	boolean len = STRING_CONSTANT + strLen ;
Code	boolean len = STRING_CONSTANT + strLen ;
Distance : 5

166
Tree	int len = strLen % NUMBER_CONSTANT ;
Code	int len = strLen % NUMBER_CONSTANT ;
Distance : 3

167
Tree	short len = thisBuf.length + NUMBER_CONSTANT ;
Code	short len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

168
Tree	boolean len = len / strLen - strLen ;
Code	boolean len = len / strLen - strLen ;
Distance : 5

169
Tree	int len = ( int ) len * strLen ;
Code	int len = ( int ) len * strLen ;
Distance : 6

170
Tree	long len = thisBuf.length - strLen ;
Code	long len = thisBuf.length - strLen ;
Distance : 4

171
Tree	int len = NUMBER_CONSTANT * strLen * size * = ;
Code	int len = NUMBER_CONSTANT * strLen * size * = ;
Distance : 6

172
Tree	int len = size * NUMBER_CONSTANT ;
Code	int len = size * NUMBER_CONSTANT ;
Distance : 3

173
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

174
Tree	int len = extends > > > NUMBER_CONSTANT ;
Code	int len = extends > > > NUMBER_CONSTANT ;
Distance : 4

175
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

176
Tree	int len = size / strLen ;
Code	int len = size / strLen ;
Distance : 3

177
Tree	short len = NUMBER_CONSTANT * = ;
Code	short len = NUMBER_CONSTANT * = ;
Distance : 6

178
Tree	int len = len + mValues () + strLen ;
Code	int len = len + mValues () + strLen ;
Distance : 5

179
Tree	boolean len = len / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = len / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 10

180
Tree	int len = strLen / strLen - strLen ;
Code	int len = strLen / strLen - strLen ;
Distance : 4

181
Tree	byte len = len > > NUMBER_CONSTANT ;
Code	byte len = len > > NUMBER_CONSTANT ;
Distance : 5

182
Tree	int len = strLen / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = strLen / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

183
Tree	int len = len > > NUMBER_CONSTANT ;
Code	int len = len > > NUMBER_CONSTANT ;
Distance : 4

184
Tree	int strLen = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	int strLen = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

185
Tree	int len = length > > > NUMBER_CONSTANT ;
Code	int len = length > > > NUMBER_CONSTANT ;
Distance : 4

186
Tree	int len = len + strLen + STRING_CONSTANT ;
Code	int len = len + strLen + STRING_CONSTANT ;
Distance : 3

187
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 6

188
Tree	int len = ( char ) len * len ;
Code	int len = ( char ) len * len ;
Distance : 6

189
Tree	int len = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

190
Tree	boolean len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

191
Tree	double len = NUMBER_CONSTANT - strLen ;
Code	double len = NUMBER_CONSTANT - strLen ;
Distance : 4

192
Tree	int size = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int size = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

193
Tree	int len = strLen / strLen ;
Code	int len = strLen / strLen ;
Distance : 4

194
Tree	int size = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	int size = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

195
Tree	int len = mValues > > > NUMBER_CONSTANT ;
Code	int len = mValues > > > NUMBER_CONSTANT ;
Distance : 4

196
Tree	void len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	void len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

197
Tree	int strLen = len > > NUMBER_CONSTANT ;
Code	int strLen = len > > NUMBER_CONSTANT ;
Distance : 5

198
Tree	int len = size + size + STRING_CONSTANT ;
Code	int len = size + size + STRING_CONSTANT ;
Distance : 3

199
Tree	short len = NUMBER_CONSTANT - strLen ;
Code	short len = NUMBER_CONSTANT - strLen ;
Distance : 4

200
Tree	char len = len % NUMBER_CONSTANT ;
Code	char len = len % NUMBER_CONSTANT ;
Distance : 5

201
Tree	double len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

202
Tree	int len = size + len + STRING_CONSTANT ;
Code	int len = size + len + STRING_CONSTANT ;
Distance : 3

203
Tree	int len = size / size ;
Code	int len = size / size ;
Distance : 4

204
Tree	byte len = len - strLen ;
Code	byte len = len - strLen ;
Distance : 4

205
Tree	boolean len = len > > NUMBER_CONSTANT ;
Code	boolean len = len > > NUMBER_CONSTANT ;
Distance : 5

206
Tree	long len = thisBuf.length + NUMBER_CONSTANT ;
Code	long len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

207
Tree	int len = len + strLen + strLen + strLen ;
Code	int len = len + strLen + strLen + strLen ;
Distance : 5

208
Tree	int len = strLen > > NUMBER_CONSTANT ;
Code	int len = strLen > > NUMBER_CONSTANT ;
Distance : 4

209
Tree	boolean len = STRING_CONSTANT + size ;
Code	boolean len = STRING_CONSTANT + size ;
Distance : 5

210
Tree	int len = NUMBER_CONSTANT - len ;
Code	int len = NUMBER_CONSTANT - len ;
Distance : 4

211
Tree	double len = len / strLen ;
Code	double len = len / strLen ;
Distance : 5

212
Tree	boolean len = len + STRING_CONSTANT + = ;
Code	boolean len = len + STRING_CONSTANT + = ;
Distance : 5

213
Tree	short len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	short len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

214
Tree	int size = thisBuf.length + NUMBER_CONSTANT ;
Code	int size = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

215
Tree	boolean len = len % NUMBER_CONSTANT ;
Code	boolean len = len % NUMBER_CONSTANT ;
Distance : 5

216
Tree	int len = size - strLen ;
Code	int len = size - strLen ;
Distance : 2

217
Tree	int len = len % NUMBER_CONSTANT ;
Code	int len = len % NUMBER_CONSTANT ;
Distance : 4

218
Tree	void len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	void len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

219
Tree	int len = size - size ;
Code	int len = size - size ;
Distance : 3

220
Tree	char len = len + STRING_CONSTANT + thisBuf.length ;
Code	char len = len + STRING_CONSTANT + thisBuf.length ;
Distance : 5

221
Tree	int strLen = thisBuf.length + NUMBER_CONSTANT ;
Code	int strLen = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

222
Tree	double len = len % NUMBER_CONSTANT ;
Code	double len = len % NUMBER_CONSTANT ;
Distance : 5

223
Tree	int len = size / size - strLen ;
Code	int len = size / size - strLen ;
Distance : 4

224
Tree	int len = len - strLen ;
Code	int len = len - strLen ;
Distance : 3

225
Tree	int len = size + length () + strLen ;
Code	int len = size + length () + strLen ;
Distance : 4

226
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

227
Tree	char len = NUMBER_CONSTANT - strLen ;
Code	char len = NUMBER_CONSTANT - strLen ;
Distance : 4

228
Tree	int len = len / size + len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len / size + len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

229
Tree	double len = len + STRING_CONSTANT + = ;
Code	double len = len + STRING_CONSTANT + = ;
Distance : 5

230
Tree	int len = len && extends ;
Code	int len = len && extends ;
Distance : 5

231
Tree	int strLen = NUMBER_CONSTANT * = ;
Code	int strLen = NUMBER_CONSTANT * = ;
Distance : 6

232
Tree	int len = NUMBER_CONSTANT * = ;
Code	int len = NUMBER_CONSTANT * = ;
Distance : 5

233
Tree	int len = len <> NUMBER_CONSTANT ;
Code	int len = len <> NUMBER_CONSTANT ;
Distance : 4

234
Tree	int len = size + strLen + strLen + len ;
Code	int len = size + strLen + strLen + len ;
Distance : 4

235
Tree	int len = len && parse ;
Code	int len = len && parse ;
Distance : 5

236
Tree	int len = size + strLen + STRING_CONSTANT ;
Code	int len = size + strLen + STRING_CONSTANT ;
Distance : 2

237
Tree	boolean len = len + strLen + STRING_CONSTANT ;
Code	boolean len = len + strLen + STRING_CONSTANT ;
Distance : 4

238
Tree	byte len = len + STRING_CONSTANT + = ;
Code	byte len = len + STRING_CONSTANT + = ;
Distance : 5

239
Tree	int len = len && mValues ;
Code	int len = len && mValues ;
Distance : 5

240
Tree	void len = thisBuf.length + NUMBER_CONSTANT ;
Code	void len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

241
Tree	int len = size ;
Code	int len = size ;
Distance : 4

242
Tree	int len = ( double ) len * len ;
Code	int len = ( double ) len * len ;
Distance : 6

243
Tree	int len = len && ? ;
Code	int len = len && ? ;
Distance : 5

244
Tree	char len = STRING_CONSTANT + strLen ;
Code	char len = STRING_CONSTANT + strLen ;
Distance : 5

245
Tree	boolean len = size + STRING_CONSTANT + thisBuf.length ;
Code	boolean len = size + STRING_CONSTANT + thisBuf.length ;
Distance : 4

246
Tree	boolean len = len - strLen ;
Code	boolean len = len - strLen ;
Distance : 4

247
Tree	int len = strLen - strLen ;
Code	int len = strLen - strLen ;
Distance : 3

248
Tree	int len = size + strLen + strLen + strLen ;
Code	int len = size + strLen + strLen + strLen ;
Distance : 4

249
Tree	short len = len + STRING_CONSTANT + = ;
Code	short len = len + STRING_CONSTANT + = ;
Distance : 5

250
Tree	int len = strLen + STRING_CONSTANT + = ;
Code	int len = strLen + STRING_CONSTANT + = ;
Distance : 4

251
Tree	int len = len + strLen + len + len ;
Code	int len = len + strLen + len + len ;
Distance : 5

252
Tree	int len = len / len + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len / len + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

253
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

254
Tree	int strLen = len + STRING_CONSTANT + = ;
Code	int strLen = len + STRING_CONSTANT + = ;
Distance : 5

255
Tree	byte len = NUMBER_CONSTANT - strLen ;
Code	byte len = NUMBER_CONSTANT - strLen ;
Distance : 4

256
Tree	short len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	short len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 6

257
Tree	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

258
Tree	double len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	double len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

259
Tree	byte len = len ;
Code	byte len = len ;
Distance : 6

260
Tree	int strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

261
Tree	int len = size / size + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = size / size + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 8

262
Tree	int len = len + strLen + strLen + len ;
Code	int len = len + strLen + strLen + len ;
Distance : 5

263
Tree	int len = ( int ) size * len ;
Code	int len = ( int ) size * len ;
Distance : 6

264
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

265
Tree	double len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 6

266
Tree	int len = len + strLen + size + strLen ;
Code	int len = len + strLen + size + strLen ;
Distance : 5

267
Tree	int len = len / strLen + size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len / strLen + size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

268
Tree	char len = len / strLen - strLen ;
Code	char len = len / strLen - strLen ;
Distance : 5

269
Tree	short len = len ;
Code	short len = len ;
Distance : 6

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (800{val=size})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 350
Wrong
========================================================================
False

0
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 2

1
Tree	i != null
Code	i != null
Distance : 2

2
Tree	i < Rule ()
Code	i < Rule ()
Distance : 2

3
Tree	i == null
Code	i == null
Distance : 2

4
Tree	i < < NUMBER_CONSTANT
Code	i < < NUMBER_CONSTANT
Distance : 2

5
Tree	i + NUMBER_CONSTANT
Code	i + NUMBER_CONSTANT
Distance : 2

6
Tree	i < rhs.length ()
Code	i < rhs.length ()
Distance : 2

7
Tree	i < getPos ()
Code	i < getPos ()
Distance : 2

8
Tree	i == < < -
Code	i == < < -
Distance : 3

9
Tree	i == <
Code	i == <
Distance : 2

10
Tree	i == < < >=
Code	i == < < >=
Distance : 3

11
Tree	this . charAt () != i
Code	this . charAt () != i
Distance : 6

12
Tree	i == null i *
Code	i == null i *
Distance : 4

13
Tree	i . emptyMap () i nextInt ( i )
Code	i . emptyMap () i nextInt ( i )
Distance : 8

14
Tree	i . emptyMap () i ordinal ( i )
Code	i . emptyMap () i ordinal ( i )
Distance : 8

15
Tree	i == < thisBuf.length class
Code	i == < thisBuf.length class
Distance : 3

16
Tree	List () != <
Code	List () != <
Distance : 4

17
Tree	size < <
Code	size < <
Distance : 2

18
Tree	i == null i [
Code	i == null i [
Distance : 4

19
Tree	i != null i <>
Code	i != null i <>
Distance : 4

20
Tree	i == < < !=
Code	i == < < !=
Distance : 3

21
Tree	i == < thisBuf.length ==
Code	i == < thisBuf.length ==
Distance : 3

22
Tree	i == < thisBuf.length ]
Code	i == < thisBuf.length ]
Distance : 3

23
Tree	size == i
Code	size == i
Distance : 3

24
Tree	i == < thisBuf.length *
Code	i == < thisBuf.length *
Distance : 3

25
Tree	i == < !=
Code	i == < !=
Distance : 2

26
Tree	i == < pattern
Code	i == < pattern
Distance : 2

27
Tree	i == < CharSequence
Code	i == < CharSequence
Distance : 2

28
Tree	i == < T
Code	i == < T
Distance : 2

29
Tree	i == < Calendar
Code	i == < Calendar
Distance : 2

30
Tree	i < thisBuf.length !=
Code	i < thisBuf.length !=
Distance : 2

31
Tree	i < < pattern
Code	i < < pattern
Distance : 2

32
Tree	i > NUMBER_CONSTANT T
Code	i > NUMBER_CONSTANT T
Distance : 3

33
Tree	i < < toString
Code	i < < toString
Distance : 2

34
Tree	i < thisBuf.length Calendar
Code	i < thisBuf.length Calendar
Distance : 2

35
Tree	size != thisBuf.length
Code	size != thisBuf.length
Distance : 3

36
Tree	DiffResult () != i
Code	DiffResult () != i
Distance : 4

37
Tree	i / size
Code	i / size
Distance : 1

38
Tree	pos ( i ) != <
Code	pos ( i ) != <
Distance : 5

39
Tree	final () == i
Code	final () == i
Distance : 4

40
Tree	i < vetoableChange ()
Code	i < vetoableChange ()
Distance : 2

41
Tree	final () == size
Code	final () == size
Distance : 3

42
Tree	STRING_CONSTANT + i . isMatch ()
Code	STRING_CONSTANT + i . isMatch ()
Distance : 5

43
Tree	STRING_CONSTANT + i . getIndex ()
Code	STRING_CONSTANT + i . getIndex ()
Distance : 5

44
Tree	this == i
Code	this == i
Distance : 3

45
Tree	DiffResult () == i
Code	DiffResult () == i
Distance : 4

46
Tree	STRING_CONSTANT + i . arraycopy ()
Code	STRING_CONSTANT + i . arraycopy ()
Distance : 5

47
Tree	STRING_CONSTANT + i . getSimpleName ()
Code	STRING_CONSTANT + i . getSimpleName ()
Distance : 5

48
Tree	add () == i
Code	add () == i
Distance : 4

49
Tree	NestableException () == i
Code	NestableException () == i
Distance : 4

50
Tree	classes () == i
Code	classes () == i
Distance : 4

51
Tree	i == size
Code	i == size
Distance : 1

52
Tree	i . codePointAt () != i
Code	i . codePointAt () != i
Distance : 5

53
Tree	List ( i ) == size
Code	List ( i ) == size
Distance : 4

54
Tree	add ( i ) == size
Code	add ( i ) == size
Distance : 4

55
Tree	NestableException ( i ) == size
Code	NestableException ( i ) == size
Distance : 4

56
Tree	final ( i ) == i
Code	final ( i ) == i
Distance : 5

57
Tree	classes ( i ) == size
Code	classes ( i ) == size
Distance : 4

58
Tree	i / removeAccentsSUN ()
Code	i / removeAccentsSUN ()
Distance : 3

59
Tree	pos ( i ) == size
Code	pos ( i ) == size
Distance : 4

60
Tree	NestableException ( i ) != <
Code	NestableException ( i ) != <
Distance : 5

61
Tree	final () != i
Code	final () != i
Distance : 4

62
Tree	classes ( i ) != <
Code	classes ( i ) != <
Distance : 5

63
Tree	final ( i ) i addToken ( i )
Code	final ( i ) i addToken ( i )
Distance : 8

64
Tree	final ( i ) i toArray ( i )
Code	final ( i ) i toArray ( i )
Distance : 8

65
Tree	i . emptyMap ( i ) != <
Code	i . emptyMap ( i ) != <
Distance : 7

66
Tree	this == i T
Code	this == i T
Distance : 4

67
Tree	i / isOSVersionMatch ()
Code	i / isOSVersionMatch ()
Distance : 3

68
Tree	i < < ex
Code	i < < ex
Distance : 2

69
Tree	i != null < >=
Code	i != null < >=
Distance : 3

70
Tree	i == < && i MutableInt
Code	i == < && i MutableInt
Distance : 4

71
Tree	i + NUMBER_CONSTANT CharSequence
Code	i + NUMBER_CONSTANT CharSequence
Distance : 3

72
Tree	i + NUMBER_CONSTANT pattern
Code	i + NUMBER_CONSTANT pattern
Distance : 3

73
Tree	i + NUMBER_CONSTANT toString
Code	i + NUMBER_CONSTANT toString
Distance : 3

74
Tree	i < < toString
Code	i < < toString
Distance : 2

75
Tree	i < i pattern
Code	i < i pattern
Distance : 2

76
Tree	i < < CharSequence
Code	i < < CharSequence
Distance : 2

77
Tree	i < i !=
Code	i < i !=
Distance : 2

78
Tree	< i < ex
Code	< i < ex
Distance : 2

79
Tree	i + NUMBER_CONSTANT Calendar
Code	i + NUMBER_CONSTANT Calendar
Distance : 3

80
Tree	i + NUMBER_CONSTANT ex
Code	i + NUMBER_CONSTANT ex
Distance : 3

81
Tree	i + NUMBER_CONSTANT ]
Code	i + NUMBER_CONSTANT ]
Distance : 3

82
Tree	this . i == size MutableInt
Code	this . i == size MutableInt
Distance : 4

83
Tree	i && i == < cs
Code	i && i == < cs
Distance : 4

84
Tree	i && i == < byte
Code	i && i == < byte
Distance : 4

85
Tree	this . i == size byte
Code	this . i == size byte
Distance : 4

86
Tree	i i < length
Code	i i < length
Distance : 2

87
Tree	this . i == size {}
Code	this . i == size {}
Distance : 4

88
Tree	i i i mutNum
Code	i i i mutNum
Distance : 3

89
Tree	this . i == size obj
Code	this . i == size obj
Distance : 4

90
Tree	this . i == size isEquals
Code	this . i == size isEquals
Distance : 4

91
Tree	i == < && i {}
Code	i == < && i {}
Distance : 4

92
Tree	i < < Calendar
Code	i < < Calendar
Distance : 2

93
Tree	i < < ex
Code	i < < ex
Distance : 2

94
Tree	i && i == < isEquals
Code	i && i == < isEquals
Distance : 4

95
Tree	i == < && i obj
Code	i == < && i obj
Distance : 4

96
Tree	i == < && i cs
Code	i == < && i cs
Distance : 4

97
Tree	< i < buffer
Code	< i < buffer
Distance : 2

98
Tree	i && i == < MutableInt
Code	i && i == < MutableInt
Distance : 4

99
Tree	i == < && i isEquals
Code	i == < && i isEquals
Distance : 4

100
Tree	i / size byte
Code	i / size byte
Distance : 2

101
Tree	< i < Date
Code	< i < Date
Distance : 2

102
Tree	i + NUMBER_CONSTANT !=
Code	i + NUMBER_CONSTANT !=
Distance : 3

103
Tree	i < < NUMBER_CONSTANT toString
Code	i < < NUMBER_CONSTANT toString
Distance : 3

104
Tree	i < < NUMBER_CONSTANT Calendar
Code	i < < NUMBER_CONSTANT Calendar
Distance : 3

105
Tree	i < < NUMBER_CONSTANT ex
Code	i < < NUMBER_CONSTANT ex
Distance : 3

106
Tree	i < < NUMBER_CONSTANT ]
Code	i < < NUMBER_CONSTANT ]
Distance : 3

107
Tree	i / size cs
Code	i / size cs
Distance : 2

108
Tree	STRING_CONSTANT + i . ordinal ()
Code	STRING_CONSTANT + i . ordinal ()
Distance : 5

109
Tree	size == <
Code	size == <
Distance : 3

110
Tree	getLocale () != i
Code	getLocale () != i
Distance : 4

111
Tree	i . codePointAt () i getLeftElement ( i )
Code	i . codePointAt () i getLeftElement ( i )
Distance : 8

112
Tree	size != super();
Code	size != super();
Distance : 3

113
Tree	size + i + STRING_CONSTANT
Code	size + i + STRING_CONSTANT
Distance : 4

114
Tree	i . emptyMap () . currentTimeMillis () != i
Code	i . emptyMap () . currentTimeMillis () != i
Distance : 8

115
Tree	size == return;
Code	size == return;
Distance : 3

116
Tree	i == null i ?
Code	i == null i ?
Distance : 4

117
Tree	i . emptyMap () i getVariableResolver ( i )
Code	i . emptyMap () i getVariableResolver ( i )
Distance : 8

118
Tree	i . getIndex ( i ) != <
Code	i . getIndex ( i ) != <
Distance : 7

119
Tree	i != null thisBuf.length !=
Code	i != null thisBuf.length !=
Distance : 4

120
Tree	i == null i -
Code	i == null i -
Distance : 4

121
Tree	i != null thisBuf.length ==
Code	i != null thisBuf.length ==
Distance : 4

122
Tree	STRING_CONSTANT + size . isMatch ()
Code	STRING_CONSTANT + size . isMatch ()
Distance : 5

123
Tree	final () i getLeftElement ( i )
Code	final () i getLeftElement ( i )
Distance : 6

124
Tree	i == null thisBuf.length :
Code	i == null thisBuf.length :
Distance : 4

125
Tree	size / i
Code	size / i
Distance : 3

126
Tree	i > NUMBER_CONSTANT CharSequence
Code	i > NUMBER_CONSTANT CharSequence
Distance : 3

127
Tree	List () == i
Code	List () == i
Distance : 4

128
Tree	i < < ]
Code	i < < ]
Distance : 2

129
Tree	i < StrategyAndWidth ()
Code	i < StrategyAndWidth ()
Distance : 2

130
Tree	STRING_CONSTANT + i . numberOfTrailingZeros ()
Code	STRING_CONSTANT + i . numberOfTrailingZeros ()
Distance : 5

131
Tree	i < normalArgsLen ()
Code	i < normalArgsLen ()
Distance : 2

132
Tree	i < Builder ()
Code	i < Builder ()
Distance : 2

133
Tree	STRING_CONSTANT + i . emptyMap ()
Code	STRING_CONSTANT + i . emptyMap ()
Distance : 5

134
Tree	SuppressWarnings () == i
Code	SuppressWarnings () == i
Distance : 4

135
Tree	i < SplitState.SPLIT ()
Code	i < SplitState.SPLIT ()
Distance : 2

136
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 3

137
Tree	i < thisBuf ()
Code	i < thisBuf ()
Distance : 2

138
Tree	i . codePointAt () i getVariableResolver ( i )
Code	i . codePointAt () i getVariableResolver ( i )
Distance : 8

139
Tree	i < Method ()
Code	i < Method ()
Distance : 2

140
Tree	STRING_CONSTANT + size . numberOfTrailingZeros ()
Code	STRING_CONSTANT + size . numberOfTrailingZeros ()
Distance : 5

141
Tree	i > NUMBER_CONSTANT pattern
Code	i > NUMBER_CONSTANT pattern
Distance : 3

142
Tree	size == continue;
Code	size == continue;
Distance : 3

143
Tree	this . i . ordinal () != i
Code	this . i . ordinal () != i
Distance : 7

144
Tree	this . size . emptyMap () != <
Code	this . size . emptyMap () != <
Distance : 7

145
Tree	this . i . arraycopy () != i
Code	this . i . arraycopy () != i
Distance : 7

146
Tree	add () != i
Code	add () != i
Distance : 4

147
Tree	i && i == <
Code	i && i == <
Distance : 4

148
Tree	this . i . currentTimeMillis () != i
Code	this . i . currentTimeMillis () != i
Distance : 7

149
Tree	this . i . putAll () != <
Code	this . i . putAll () != <
Distance : 7

150
Tree	this . i . numberOfTrailingZeros () != i
Code	this . i . numberOfTrailingZeros () != i
Distance : 7

151
Tree	size != null < :
Code	size != null < :
Distance : 4

152
Tree	i . emptyMap () . ordinal () != <
Code	i . emptyMap () . ordinal () != <
Distance : 8

153
Tree	i && size == <
Code	i && size == <
Distance : 3

154
Tree	i < < T
Code	i < < T
Distance : 2

155
Tree	i == < < :
Code	i == < < :
Distance : 3

156
Tree	i / i
Code	i / i
Distance : 2

157
Tree	i == continue;
Code	i == continue;
Distance : 2

158
Tree	size != continue;
Code	size != continue;
Distance : 3

159
Tree	size == < && i
Code	size == < && i
Distance : 4

160
Tree	this . i . emptyMap () != <
Code	this . i . emptyMap () != <
Distance : 7

161
Tree	this . getClass () != i
Code	this . getClass () != i
Distance : 6

162
Tree	i != null thisBuf.length *
Code	i != null thisBuf.length *
Distance : 4

163
Tree	i == < ex
Code	i == < ex
Distance : 2

164
Tree	i . codePointAt () . getSimpleName () != i
Code	i . codePointAt () . getSimpleName () != i
Distance : 8

165
Tree	i == < && size
Code	i == < && size
Distance : 2

166
Tree	i . emptyMap () . getSimpleName () != i
Code	i . emptyMap () . getSimpleName () != i
Distance : 8

167
Tree	size == < && size
Code	size == < && size
Distance : 3

168
Tree	i == size byte
Code	i == size byte
Distance : 2

169
Tree	i . codePointAt () . ordinal () != i
Code	i . codePointAt () . ordinal () != i
Distance : 8

170
Tree	i . nextInt () != i
Code	i . nextInt () != i
Distance : 5

171
Tree	i . numberOfTrailingZeros () != i
Code	i . numberOfTrailingZeros () != i
Distance : 5

172
Tree	final () i delete ( i )
Code	final () i delete ( i )
Distance : 6

173
Tree	final () i Locale.US ( i )
Code	final () i Locale.US ( i )
Distance : 6

174
Tree	i . emptyMap () . nextInt () != i
Code	i . emptyMap () . nextInt () != i
Distance : 8

175
Tree	this . replace () != i
Code	this . replace () != i
Distance : 6

176
Tree	this . i . isMatch () != <
Code	this . i . isMatch () != <
Distance : 7

177
Tree	i . emptyMap () . getComponentType () != i
Code	i . emptyMap () . getComponentType () != i
Distance : 8

178
Tree	this . valueOf () != <
Code	this . valueOf () != <
Distance : 6

179
Tree	i . currentTimeMillis () != i
Code	i . currentTimeMillis () != i
Distance : 5

180
Tree	final () i srcListeners ( i )
Code	final () i srcListeners ( i )
Distance : 6

181
Tree	i == super();
Code	i == super();
Distance : 2

182
Tree	this . vetoableChange () != i
Code	this . vetoableChange () != i
Distance : 6

183
Tree	i . codePointAt () . nextInt () != i
Code	i . codePointAt () . nextInt () != i
Distance : 8

184
Tree	i . newTextToken () != i
Code	i . newTextToken () != i
Distance : 5

185
Tree	size != return;
Code	size != return;
Distance : 3

186
Tree	this . size == i
Code	this . size == i
Distance : 4

187
Tree	pos () == i
Code	pos () == i
Distance : 4

188
Tree	i != thisBuf.length
Code	i != thisBuf.length
Distance : 2

189
Tree	i . toTitleCase () != <
Code	i . toTitleCase () != <
Distance : 5

190
Tree	this . add () != i
Code	this . add () != i
Distance : 6

191
Tree	i + size + STRING_CONSTANT isEquals
Code	i + size + STRING_CONSTANT isEquals
Distance : 4

192
Tree	i + size + STRING_CONSTANT MutableInt
Code	i + size + STRING_CONSTANT MutableInt
Distance : 4

193
Tree	final ( i ) i createMessageFormat ( i )
Code	final ( i ) i createMessageFormat ( i )
Distance : 8

194
Tree	i + size + STRING_CONSTANT {}
Code	i + size + STRING_CONSTANT {}
Distance : 4

195
Tree	this . getRightElement () != i
Code	this . getRightElement () != i
Distance : 6

196
Tree	final ( i ) i getVariableResolver ( i )
Code	final ( i ) i getVariableResolver ( i )
Distance : 8

197
Tree	List ( i ) != <
Code	List ( i ) != <
Distance : 5

198
Tree	i + size + STRING_CONSTANT obj
Code	i + size + STRING_CONSTANT obj
Distance : 4

199
Tree	< == null cs
Code	< == null cs
Distance : 4

200
Tree	SuppressWarnings () != i
Code	SuppressWarnings () != i
Distance : 4

201
Tree	i == null < !=
Code	i == null < !=
Distance : 3

202
Tree	this . equals () != i
Code	this . equals () != i
Distance : 6

203
Tree	i == null short
Code	i == null short
Distance : 3

204
Tree	this . getStringBuffer () != <
Code	this . getStringBuffer () != <
Distance : 6

205
Tree	< == null MutableInt
Code	< == null MutableInt
Distance : 4

206
Tree	i == null obj
Code	i == null obj
Distance : 3

207
Tree	i != null i ]
Code	i != null i ]
Distance : 4

208
Tree	final () i emptyMap ( i )
Code	final () i emptyMap ( i )
Distance : 6

209
Tree	i == < && i
Code	i == < && i
Distance : 3

210
Tree	i == null i +=
Code	i == null i +=
Distance : 4

211
Tree	NestableException () != i
Code	NestableException () != i
Distance : 4

212
Tree	STRING_CONSTANT + i . invoke ()
Code	STRING_CONSTANT + i . invoke ()
Distance : 5

213
Tree	final () i getDaemonFlag ( i )
Code	final () i getDaemonFlag ( i )
Distance : 6

214
Tree	final ( i ) i removeAccentsSUN ( i )
Code	final ( i ) i removeAccentsSUN ( i )
Distance : 8

215
Tree	i == size isEquals
Code	i == size isEquals
Distance : 2

216
Tree	i != null i -
Code	i != null i -
Distance : 4

217
Tree	i . emptyMap () i toNoNullStringArray ( i )
Code	i . emptyMap () i toNoNullStringArray ( i )
Distance : 8

218
Tree	final () i ordinal ( i )
Code	final () i ordinal ( i )
Distance : 6

219
Tree	i > NUMBER_CONSTANT !=
Code	i > NUMBER_CONSTANT !=
Distance : 3

220
Tree	i > NUMBER_CONSTANT ]
Code	i > NUMBER_CONSTANT ]
Distance : 3

221
Tree	i > NUMBER_CONSTANT ex
Code	i > NUMBER_CONSTANT ex
Distance : 3

222
Tree	i . ordinal ( i ) != <
Code	i . ordinal ( i ) != <
Distance : 7

223
Tree	i != return;
Code	i != return;
Distance : 2

224
Tree	i . codePointAt () . getComponentType () != i
Code	i . codePointAt () . getComponentType () != i
Distance : 8

225
Tree	final ( i ) i isOSVersionMatch ( i )
Code	final ( i ) i isOSVersionMatch ( i )
Distance : 8

226
Tree	i > NUMBER_CONSTANT Calendar
Code	i > NUMBER_CONSTANT Calendar
Distance : 3

227
Tree	size / size
Code	size / size
Distance : 2

228
Tree	i < < CharSequence
Code	i < < CharSequence
Distance : 2

229
Tree	add ( i ) != <
Code	add ( i ) != <
Distance : 5

230
Tree	i > NUMBER_CONSTANT toString
Code	i > NUMBER_CONSTANT toString
Distance : 3

231
Tree	i . toCharArray ( i ) != <
Code	i . toCharArray ( i ) != <
Distance : 7

232
Tree	this . i . destroy () != i
Code	this . i . destroy () != i
Distance : 7

233
Tree	size == super();
Code	size == super();
Distance : 3

234
Tree	i == size MutableInt
Code	i == size MutableInt
Distance : 2

235
Tree	this . i == size cs
Code	this . i == size cs
Distance : 4

236
Tree	i != null thisBuf.length +=
Code	i != null thisBuf.length +=
Distance : 4

237
Tree	i + NUMBER_CONSTANT T
Code	i + NUMBER_CONSTANT T
Distance : 3

238
Tree	i == size {}
Code	i == size {}
Distance : 2

239
Tree	i == null -
Code	i == null -
Distance : 3

240
Tree	i == i
Code	i == i
Distance : 2

241
Tree	i / createMessageFormat ()
Code	i / createMessageFormat ()
Distance : 3

242
Tree	i / PAD_LIMIT ()
Code	i / PAD_LIMIT ()
Distance : 3

243
Tree	this . getTaskCount () != i
Code	this . getTaskCount () != i
Distance : 6

244
Tree	< i < [
Code	< i < [
Distance : 2

245
Tree	i < <
Code	i < <
Distance : 1

246
Tree	size == size
Code	size == size
Distance : 2

247
Tree	i . emptyMap () i getRightElement ( i )
Code	i . emptyMap () i getRightElement ( i )
Distance : 8

248
Tree	classes () != i
Code	classes () != i
Distance : 4

249
Tree	size < <
Code	size < <
Distance : 2

250
Tree	i < < NUMBER_CONSTANT CharSequence
Code	i < < NUMBER_CONSTANT CharSequence
Distance : 3

251
Tree	getLocale () == i
Code	getLocale () == i
Distance : 4

252
Tree	i < < NUMBER_CONSTANT pattern
Code	i < < NUMBER_CONSTANT pattern
Distance : 3

253
Tree	i == size cs
Code	i == size cs
Distance : 2

254
Tree	pos () != i
Code	pos () != i
Distance : 4

255
Tree	i == continue;
Code	i == continue;
Distance : 2

256
Tree	DiffResult ( i ) == size
Code	DiffResult ( i ) == size
Distance : 4

257
Tree	i && i == < {}
Code	i && i == < {}
Distance : 4

258
Tree	i == size obj
Code	i == size obj
Distance : 2

259
Tree	< i < StringUtils
Code	< i < StringUtils
Distance : 2

260
Tree	cloned.chars () != <
Code	cloned.chars () != <
Distance : 4

261
Tree	i / size isEquals
Code	i / size isEquals
Distance : 2

262
Tree	i / getVariableResolver ()
Code	i / getVariableResolver ()
Distance : 3

263
Tree	size && i == <
Code	size && i == <
Distance : 4

264
Tree	this . size == size
Code	this . size == size
Distance : 4

265
Tree	this . i . invoke () != <
Code	this . i . invoke () != <
Distance : 7

266
Tree	i == < ]
Code	i == < ]
Distance : 2

267
Tree	i / size MutableInt
Code	i / size MutableInt
Distance : 2

268
Tree	i / SplitState.SPLIT ()
Code	i / SplitState.SPLIT ()
Distance : 3

269
Tree	final ( i ) != <
Code	final ( i ) != <
Distance : 5

270
Tree	i / size {}
Code	i / size {}
Distance : 2

271
Tree	size && size == <
Code	size && size == <
Distance : 4

272
Tree	i . emptyMap () . getLeftElement () != <
Code	i . emptyMap () . getLeftElement () != <
Distance : 8

273
Tree	size == null
Code	size == null
Distance : 3

274
Tree	size < < NUMBER_CONSTANT
Code	size < < NUMBER_CONSTANT
Distance : 3

275
Tree	size + NUMBER_CONSTANT
Code	size + NUMBER_CONSTANT
Distance : 3

276
Tree	final ( i ) == size
Code	final ( i ) == size
Distance : 4

277
Tree	i / size obj
Code	i / size obj
Distance : 2

278
Tree	final () i getTypeArguments ( i )
Code	final () i getTypeArguments ( i )
Distance : 6

279
Tree	< == return;
Code	< == return;
Distance : 3

280
Tree	i . newTextToken ( i ) != <
Code	i . newTextToken ( i ) != <
Distance : 7

281
Tree	this == size
Code	this == size
Distance : 2

282
Tree	i . asList ( i ) != <
Code	i . asList ( i ) != <
Distance : 7

283
Tree	i == super();
Code	i == super();
Distance : 2

284
Tree	i == null i <=
Code	i == null i <=
Distance : 4

285
Tree	i . getIndex () != <
Code	i . getIndex () != <
Distance : 5

286
Tree	i . ordinal () != i
Code	i . ordinal () != i
Distance : 5

287
Tree	i == null thisBuf.length <>
Code	i == null thisBuf.length <>
Distance : 4

288
Tree	i + size + STRING_CONSTANT
Code	i + size + STRING_CONSTANT
Distance : 3

289
Tree	i . toCharArray () != <
Code	i . toCharArray () != <
Distance : 5

290
Tree	i == thisBuf.length && i byte
Code	i == thisBuf.length && i byte
Distance : 5

291
Tree	SuppressWarnings ( i ) == size
Code	SuppressWarnings ( i ) == size
Distance : 4

292
Tree	i . codePointAt () i nextInt ( i )
Code	i . codePointAt () i nextInt ( i )
Distance : 8

293
Tree	i == <
Code	i == <
Distance : 2

294
Tree	i . emptyMap () i getLeftElement ( i )
Code	i . emptyMap () i getLeftElement ( i )
Distance : 8

295
Tree	i . currentTimeMillis ( i ) != <
Code	i . currentTimeMillis ( i ) != <
Distance : 7

296
Tree	i && i == < obj
Code	i && i == < obj
Distance : 4

297
Tree	this . i == size
Code	this . i == size
Distance : 3

298
Tree	i < <
Code	i < <
Distance : 1

299
Tree	i + size + STRING_CONSTANT byte
Code	i + size + STRING_CONSTANT byte
Distance : 4

300
Tree	< i < !=
Code	< i < !=
Distance : 2

301
Tree	i . codePointAt () i ordinal ( i )
Code	i . codePointAt () i ordinal ( i )
Distance : 8

302
Tree	i i < toString
Code	i i < toString
Distance : 2

303
Tree	final () i codePointAt ( i )
Code	final () i codePointAt ( i )
Distance : 6

304
Tree	size != null
Code	size != null
Distance : 3

305
Tree	i == null
Code	i == null
Distance : 2

306
Tree	final () i build ( i )
Code	final () i build ( i )
Distance : 6

307
Tree	i + i + STRING_CONSTANT
Code	i + i + STRING_CONSTANT
Distance : 4

308
Tree	size + size + STRING_CONSTANT
Code	size + size + STRING_CONSTANT
Distance : 4

309
Tree	i . nextInt ( i ) != i
Code	i . nextInt ( i ) != i
Distance : 7

310
Tree	size == < thisBuf.length :
Code	size == < thisBuf.length :
Distance : 4

311
Tree	i < < NUMBER_CONSTANT !=
Code	i < < NUMBER_CONSTANT !=
Distance : 3

312
Tree	lastWasGap ( i ) != <
Code	lastWasGap ( i ) != <
Distance : 5

313
Tree	i . codePointAt ( i ) != <
Code	i . codePointAt ( i ) != <
Distance : 7

314
Tree	i + size + STRING_CONSTANT cs
Code	i + size + STRING_CONSTANT cs
Distance : 4

315
Tree	this . i == i
Code	this . i == i
Distance : 4

316
Tree	SuppressWarnings ( i ) i createMessageFormat ( i )
Code	SuppressWarnings ( i ) i createMessageFormat ( i )
Distance : 8

317
Tree	i . emptyMap () != <
Code	i . emptyMap () != <
Distance : 5

318
Tree	i != super();
Code	i != super();
Distance : 2

319
Tree	i == return;
Code	i == return;
Distance : 2

320
Tree	SuppressWarnings ( i ) != <
Code	SuppressWarnings ( i ) != <
Distance : 5

321
Tree	i / TimeZoneNumberRule.INSTANCE_COLON ()
Code	i / TimeZoneNumberRule.INSTANCE_COLON ()
Distance : 3

322
Tree	size == <
Code	size == <
Distance : 3

323
Tree	i / greatestCommonDivisor ()
Code	i / greatestCommonDivisor ()
Distance : 3

324
Tree	i / getDaemonFlag ()
Code	i / getDaemonFlag ()
Distance : 3

325
Tree	i == null i >=
Code	i == null i >=
Distance : 4

326
Tree	i < < NUMBER_CONSTANT T
Code	i < < NUMBER_CONSTANT T
Distance : 3

327
Tree	i / extractCauseUnchecked ()
Code	i / extractCauseUnchecked ()
Distance : 3

328
Tree	i != null i :
Code	i != null i :
Distance : 4

329
Tree	final ( i ) i PAD_LIMIT ( i )
Code	final ( i ) i PAD_LIMIT ( i )
Distance : 8

330
Tree	i != continue;
Code	i != continue;
Distance : 2

331
Tree	< i <
Code	< i <
Distance : 2

332
Tree	i == <
Code	i == <
Distance : 2

333
Tree	i < < ]
Code	i < < ]
Distance : 2

334
Tree	this == i ex
Code	this == i ex
Distance : 4

335
Tree	SuppressWarnings ( i ) i getVariableResolver ( i )
Code	SuppressWarnings ( i ) i getVariableResolver ( i )
Distance : 8

336
Tree	this == i CharSequence
Code	this == i CharSequence
Distance : 4

337
Tree	this == i pattern
Code	this == i pattern
Distance : 4

338
Tree	DiffResult ( i ) != <
Code	DiffResult ( i ) != <
Distance : 5

339
Tree	this == i toString
Code	this == i toString
Distance : 4

340
Tree	this == i Calendar
Code	this == i Calendar
Distance : 4

341
Tree	final ( i ) i getDenominator ( i )
Code	final ( i ) i getDenominator ( i )
Distance : 8

342
Tree	this == i ]
Code	this == i ]
Distance : 4

343
Tree	cloned.chars ( i ) == size
Code	cloned.chars ( i ) == size
Distance : 4

344
Tree	getLocale ( i ) != <
Code	getLocale ( i ) != <
Distance : 5

345
Tree	i . numberOfTrailingZeros ( i ) != <
Code	i . numberOfTrailingZeros ( i ) != <
Distance : 7

346
Tree	i == < toString
Code	i == < toString
Distance : 2

347
Tree	i == < thisBuf.length +=
Code	i == < thisBuf.length +=
Distance : 3

348
Tree	this == i !=
Code	this == i !=
Distance : 4

349
Tree	i < < T
Code	i < < T
Distance : 2

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < this . size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (22 (315{val=this}) (235{val=.}) (800{val=size}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 350
Wrong
========================================================================
False

0
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 4

1
Tree	i != null
Code	i != null
Distance : 4

2
Tree	i < Rule ()
Code	i < Rule ()
Distance : 3

3
Tree	i == null
Code	i == null
Distance : 4

4
Tree	i < < NUMBER_CONSTANT
Code	i < < NUMBER_CONSTANT
Distance : 3

5
Tree	i + NUMBER_CONSTANT
Code	i + NUMBER_CONSTANT
Distance : 4

6
Tree	i < rhs.length ()
Code	i < rhs.length ()
Distance : 3

7
Tree	i < getPos ()
Code	i < getPos ()
Distance : 3

8
Tree	i == < thisBuf.length -
Code	i == < thisBuf.length -
Distance : 4

9
Tree	i == <
Code	i == <
Distance : 4

10
Tree	i == < i >=
Code	i == < i >=
Distance : 4

11
Tree	this . charAt () != i
Code	this . charAt () != i
Distance : 6

12
Tree	i == null i *
Code	i == null i *
Distance : 4

13
Tree	i . emptyMap () i nextInt ( i )
Code	i . emptyMap () i nextInt ( i )
Distance : 8

14
Tree	i . emptyMap () i ordinal ( i )
Code	i . emptyMap () i ordinal ( i )
Distance : 8

15
Tree	i == < thisBuf.length class
Code	i == < thisBuf.length class
Distance : 4

16
Tree	List () != i
Code	List () != i
Distance : 5

17
Tree	size < <
Code	size < <
Distance : 4

18
Tree	i == null i [
Code	i == null i [
Distance : 4

19
Tree	i != null < <>
Code	i != null < <>
Distance : 4

20
Tree	i == < thisBuf.length !=
Code	i == < thisBuf.length !=
Distance : 4

21
Tree	i == < thisBuf.length ==
Code	i == < thisBuf.length ==
Distance : 4

22
Tree	i == < thisBuf.length ]
Code	i == < thisBuf.length ]
Distance : 4

23
Tree	size == i
Code	size == i
Distance : 5

24
Tree	i == < thisBuf.length *
Code	i == < thisBuf.length *
Distance : 4

25
Tree	i == < !=
Code	i == < !=
Distance : 4

26
Tree	i == < pattern
Code	i == < pattern
Distance : 4

27
Tree	i == < CharSequence
Code	i == < CharSequence
Distance : 4

28
Tree	i == < T
Code	i == < T
Distance : 4

29
Tree	i == < Calendar
Code	i == < Calendar
Distance : 4

30
Tree	i < < !=
Code	i < < !=
Distance : 3

31
Tree	i < < pattern
Code	i < < pattern
Distance : 3

32
Tree	i > NUMBER_CONSTANT T
Code	i > NUMBER_CONSTANT T
Distance : 4

33
Tree	i < < toString
Code	i < < toString
Distance : 3

34
Tree	i < < Calendar
Code	i < < Calendar
Distance : 3

35
Tree	size != thisBuf.length
Code	size != thisBuf.length
Distance : 5

36
Tree	DiffResult () != i
Code	DiffResult () != i
Distance : 5

37
Tree	i / size
Code	i / size
Distance : 3

38
Tree	pos ( i ) != <
Code	pos ( i ) != <
Distance : 6

39
Tree	final () == i
Code	final () == i
Distance : 5

40
Tree	i < vetoableChange ()
Code	i < vetoableChange ()
Distance : 3

41
Tree	final () == size
Code	final () == size
Distance : 4

42
Tree	STRING_CONSTANT + i . isMatch ()
Code	STRING_CONSTANT + i . isMatch ()
Distance : 5

43
Tree	STRING_CONSTANT + i . getIndex ()
Code	STRING_CONSTANT + i . getIndex ()
Distance : 5

44
Tree	this == i
Code	this == i
Distance : 4

45
Tree	DiffResult () == i
Code	DiffResult () == i
Distance : 5

46
Tree	STRING_CONSTANT + i . arraycopy ()
Code	STRING_CONSTANT + i . arraycopy ()
Distance : 5

47
Tree	STRING_CONSTANT + i . getSimpleName ()
Code	STRING_CONSTANT + i . getSimpleName ()
Distance : 5

48
Tree	add () == i
Code	add () == i
Distance : 5

49
Tree	NestableException () == i
Code	NestableException () == i
Distance : 5

50
Tree	classes () == i
Code	classes () == i
Distance : 5

51
Tree	i == size
Code	i == size
Distance : 3

52
Tree	i . codePointAt () != i
Code	i . codePointAt () != i
Distance : 5

53
Tree	List ( i ) == size
Code	List ( i ) == size
Distance : 5

54
Tree	add ( i ) == size
Code	add ( i ) == size
Distance : 5

55
Tree	NestableException ( i ) == size
Code	NestableException ( i ) == size
Distance : 5

56
Tree	final ( i ) == i
Code	final ( i ) == i
Distance : 6

57
Tree	classes ( i ) == size
Code	classes ( i ) == size
Distance : 5

58
Tree	i / removeAccentsSUN ()
Code	i / removeAccentsSUN ()
Distance : 4

59
Tree	pos ( i ) == size
Code	pos ( i ) == size
Distance : 5

60
Tree	NestableException ( i ) != <
Code	NestableException ( i ) != <
Distance : 6

61
Tree	final () != i
Code	final () != i
Distance : 5

62
Tree	classes ( i ) != <
Code	classes ( i ) != <
Distance : 6

63
Tree	final ( i ) i addToken ( i )
Code	final ( i ) i addToken ( i )
Distance : 8

64
Tree	final ( i ) i toArray ( i )
Code	final ( i ) i toArray ( i )
Distance : 8

65
Tree	i . emptyMap ( i ) != <
Code	i . emptyMap ( i ) != <
Distance : 7

66
Tree	this == i T
Code	this == i T
Distance : 5

67
Tree	i / isOSVersionMatch ()
Code	i / isOSVersionMatch ()
Distance : 4

68
Tree	i < < ex
Code	i < < ex
Distance : 3

69
Tree	i != null i >=
Code	i != null i >=
Distance : 4

70
Tree	i == < && i MutableInt
Code	i == < && i MutableInt
Distance : 4

71
Tree	i + NUMBER_CONSTANT CharSequence
Code	i + NUMBER_CONSTANT CharSequence
Distance : 4

72
Tree	i + NUMBER_CONSTANT pattern
Code	i + NUMBER_CONSTANT pattern
Distance : 4

73
Tree	i + NUMBER_CONSTANT toString
Code	i + NUMBER_CONSTANT toString
Distance : 4

74
Tree	i < < toString
Code	i < < toString
Distance : 3

75
Tree	i < < pattern
Code	i < < pattern
Distance : 3

76
Tree	i < < CharSequence
Code	i < < CharSequence
Distance : 3

77
Tree	i < < !=
Code	i < < !=
Distance : 3

78
Tree	i i < ex
Code	i i < ex
Distance : 4

79
Tree	i + NUMBER_CONSTANT Calendar
Code	i + NUMBER_CONSTANT Calendar
Distance : 4

80
Tree	i + NUMBER_CONSTANT ex
Code	i + NUMBER_CONSTANT ex
Distance : 4

81
Tree	i + NUMBER_CONSTANT ]
Code	i + NUMBER_CONSTANT ]
Distance : 4

82
Tree	this . i == size MutableInt
Code	this . i == size MutableInt
Distance : 5

83
Tree	i && i == < cs
Code	i && i == < cs
Distance : 5

84
Tree	i && i == < byte
Code	i && i == < byte
Distance : 5

85
Tree	this . i == size byte
Code	this . i == size byte
Distance : 5

86
Tree	i i < length
Code	i i < length
Distance : 4

87
Tree	this . i == size {}
Code	this . i == size {}
Distance : 5

88
Tree	< i < mutNum
Code	< i < mutNum
Distance : 4

89
Tree	this . i == size obj
Code	this . i == size obj
Distance : 5

90
Tree	this . i == size isEquals
Code	this . i == size isEquals
Distance : 5

91
Tree	i == < && i {}
Code	i == < && i {}
Distance : 4

92
Tree	i < < Calendar
Code	i < < Calendar
Distance : 3

93
Tree	i < < ex
Code	i < < ex
Distance : 3

94
Tree	i && i == < isEquals
Code	i && i == < isEquals
Distance : 5

95
Tree	i == < && i obj
Code	i == < && i obj
Distance : 4

96
Tree	i == < && i cs
Code	i == < && i cs
Distance : 4

97
Tree	i i thisBuf.length buffer
Code	i i thisBuf.length buffer
Distance : 4

98
Tree	i && i == < MutableInt
Code	i && i == < MutableInt
Distance : 5

99
Tree	i == < && i isEquals
Code	i == < && i isEquals
Distance : 4

100
Tree	i / size byte
Code	i / size byte
Distance : 4

101
Tree	i i < Date
Code	i i < Date
Distance : 4

102
Tree	i + NUMBER_CONSTANT !=
Code	i + NUMBER_CONSTANT !=
Distance : 4

103
Tree	i < < NUMBER_CONSTANT toString
Code	i < < NUMBER_CONSTANT toString
Distance : 3

104
Tree	i < < NUMBER_CONSTANT Calendar
Code	i < < NUMBER_CONSTANT Calendar
Distance : 3

105
Tree	i < < NUMBER_CONSTANT ex
Code	i < < NUMBER_CONSTANT ex
Distance : 3

106
Tree	i < < NUMBER_CONSTANT ]
Code	i < < NUMBER_CONSTANT ]
Distance : 3

107
Tree	i / size cs
Code	i / size cs
Distance : 4

108
Tree	STRING_CONSTANT + i . ordinal ()
Code	STRING_CONSTANT + i . ordinal ()
Distance : 5

109
Tree	size == <
Code	size == <
Distance : 5

110
Tree	getLocale () != i
Code	getLocale () != i
Distance : 5

111
Tree	i . codePointAt () i getLeftElement ( i )
Code	i . codePointAt () i getLeftElement ( i )
Distance : 8

112
Tree	size != super();
Code	size != super();
Distance : 5

113
Tree	size + i + STRING_CONSTANT
Code	size + i + STRING_CONSTANT
Distance : 5

114
Tree	i . emptyMap () . currentTimeMillis () != i
Code	i . emptyMap () . currentTimeMillis () != i
Distance : 7

115
Tree	size == return;
Code	size == return;
Distance : 5

116
Tree	i == null i ?
Code	i == null i ?
Distance : 4

117
Tree	i . emptyMap () i getVariableResolver ( i )
Code	i . emptyMap () i getVariableResolver ( i )
Distance : 8

118
Tree	i . getIndex ( i ) != i
Code	i . getIndex ( i ) != i
Distance : 7

119
Tree	i != null < !=
Code	i != null < !=
Distance : 4

120
Tree	i == null i -
Code	i == null i -
Distance : 4

121
Tree	i != null thisBuf.length ==
Code	i != null thisBuf.length ==
Distance : 4

122
Tree	STRING_CONSTANT + size . isMatch ()
Code	STRING_CONSTANT + size . isMatch ()
Distance : 5

123
Tree	final () i getLeftElement ( i )
Code	final () i getLeftElement ( i )
Distance : 6

124
Tree	i == null thisBuf.length :
Code	i == null thisBuf.length :
Distance : 4

125
Tree	size / i
Code	size / i
Distance : 5

126
Tree	i > NUMBER_CONSTANT CharSequence
Code	i > NUMBER_CONSTANT CharSequence
Distance : 4

127
Tree	List () == i
Code	List () == i
Distance : 5

128
Tree	i < i ]
Code	i < i ]
Distance : 3

129
Tree	i < StrategyAndWidth ()
Code	i < StrategyAndWidth ()
Distance : 3

130
Tree	STRING_CONSTANT + i . numberOfTrailingZeros ()
Code	STRING_CONSTANT + i . numberOfTrailingZeros ()
Distance : 5

131
Tree	i < normalArgsLen ()
Code	i < normalArgsLen ()
Distance : 3

132
Tree	i < Builder ()
Code	i < Builder ()
Distance : 3

133
Tree	STRING_CONSTANT + i . emptyMap ()
Code	STRING_CONSTANT + i . emptyMap ()
Distance : 5

134
Tree	SuppressWarnings () == i
Code	SuppressWarnings () == i
Distance : 5

135
Tree	i < SplitState.SPLIT ()
Code	i < SplitState.SPLIT ()
Distance : 3

136
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 5

137
Tree	i < thisBuf ()
Code	i < thisBuf ()
Distance : 3

138
Tree	i . codePointAt () i getVariableResolver ( i )
Code	i . codePointAt () i getVariableResolver ( i )
Distance : 8

139
Tree	i < Method ()
Code	i < Method ()
Distance : 3

140
Tree	STRING_CONSTANT + size . numberOfTrailingZeros ()
Code	STRING_CONSTANT + size . numberOfTrailingZeros ()
Distance : 5

141
Tree	i > NUMBER_CONSTANT pattern
Code	i > NUMBER_CONSTANT pattern
Distance : 4

142
Tree	size == continue;
Code	size == continue;
Distance : 5

143
Tree	this . i . ordinal () != i
Code	this . i . ordinal () != i
Distance : 7

144
Tree	this . size . emptyMap () != <
Code	this . size . emptyMap () != <
Distance : 7

145
Tree	this . i . arraycopy () != i
Code	this . i . arraycopy () != i
Distance : 7

146
Tree	add () != i
Code	add () != i
Distance : 5

147
Tree	i && i == <
Code	i && i == <
Distance : 4

148
Tree	this . i . currentTimeMillis () != i
Code	this . i . currentTimeMillis () != i
Distance : 7

149
Tree	this . i . putAll () != i
Code	this . i . putAll () != i
Distance : 7

150
Tree	this . i . numberOfTrailingZeros () != i
Code	this . i . numberOfTrailingZeros () != i
Distance : 7

151
Tree	size != null < :
Code	size != null < :
Distance : 5

152
Tree	i . emptyMap () . ordinal () != i
Code	i . emptyMap () . ordinal () != i
Distance : 7

153
Tree	i && size == <
Code	i && size == <
Distance : 4

154
Tree	i < < T
Code	i < < T
Distance : 3

155
Tree	i == < thisBuf.length :
Code	i == < thisBuf.length :
Distance : 4

156
Tree	i / i
Code	i / i
Distance : 4

157
Tree	i == continue;
Code	i == continue;
Distance : 4

158
Tree	size != continue;
Code	size != continue;
Distance : 5

159
Tree	size == < && i
Code	size == < && i
Distance : 5

160
Tree	this . i . emptyMap () != i
Code	this . i . emptyMap () != i
Distance : 7

161
Tree	this . getClass () != i
Code	this . getClass () != i
Distance : 6

162
Tree	i != null i *
Code	i != null i *
Distance : 4

163
Tree	i == < ex
Code	i == < ex
Distance : 4

164
Tree	i . codePointAt () . getSimpleName () != i
Code	i . codePointAt () . getSimpleName () != i
Distance : 7

165
Tree	i == < && size
Code	i == < && size
Distance : 3

166
Tree	i . emptyMap () . getSimpleName () != i
Code	i . emptyMap () . getSimpleName () != i
Distance : 7

167
Tree	size == < && size
Code	size == < && size
Distance : 4

168
Tree	i == size byte
Code	i == size byte
Distance : 4

169
Tree	i . codePointAt () . ordinal () != i
Code	i . codePointAt () . ordinal () != i
Distance : 7

170
Tree	i . nextInt () != <
Code	i . nextInt () != <
Distance : 5

171
Tree	i . numberOfTrailingZeros () != i
Code	i . numberOfTrailingZeros () != i
Distance : 5

172
Tree	final () i delete ( i )
Code	final () i delete ( i )
Distance : 6

173
Tree	final () i Locale.US ( i )
Code	final () i Locale.US ( i )
Distance : 6

174
Tree	i . emptyMap () . nextInt () != <
Code	i . emptyMap () . nextInt () != <
Distance : 7

175
Tree	this . replace () != i
Code	this . replace () != i
Distance : 6

176
Tree	this . i . isMatch () != i
Code	this . i . isMatch () != i
Distance : 7

177
Tree	i . emptyMap () . getComponentType () != i
Code	i . emptyMap () . getComponentType () != i
Distance : 7

178
Tree	this . valueOf () != i
Code	this . valueOf () != i
Distance : 6

179
Tree	i . currentTimeMillis () != i
Code	i . currentTimeMillis () != i
Distance : 5

180
Tree	final () i srcListeners ( i )
Code	final () i srcListeners ( i )
Distance : 6

181
Tree	i == super();
Code	i == super();
Distance : 4

182
Tree	this . vetoableChange () != i
Code	this . vetoableChange () != i
Distance : 6

183
Tree	i . codePointAt () . nextInt () != i
Code	i . codePointAt () . nextInt () != i
Distance : 7

184
Tree	i . newTextToken () != i
Code	i . newTextToken () != i
Distance : 5

185
Tree	size != return;
Code	size != return;
Distance : 5

186
Tree	this . size == i
Code	this . size == i
Distance : 4

187
Tree	pos () == i
Code	pos () == i
Distance : 5

188
Tree	i != <
Code	i != <
Distance : 4

189
Tree	i . toTitleCase () != i
Code	i . toTitleCase () != i
Distance : 5

190
Tree	this . add () != i
Code	this . add () != i
Distance : 6

191
Tree	i + size + STRING_CONSTANT isEquals
Code	i + size + STRING_CONSTANT isEquals
Distance : 5

192
Tree	i + size + STRING_CONSTANT MutableInt
Code	i + size + STRING_CONSTANT MutableInt
Distance : 5

193
Tree	final ( i ) i createMessageFormat ( i )
Code	final ( i ) i createMessageFormat ( i )
Distance : 8

194
Tree	i + size + STRING_CONSTANT {}
Code	i + size + STRING_CONSTANT {}
Distance : 5

195
Tree	this . getRightElement () != i
Code	this . getRightElement () != i
Distance : 6

196
Tree	final ( i ) i getVariableResolver ( i )
Code	final ( i ) i getVariableResolver ( i )
Distance : 8

197
Tree	List ( i ) != i
Code	List ( i ) != i
Distance : 6

198
Tree	i + size + STRING_CONSTANT obj
Code	i + size + STRING_CONSTANT obj
Distance : 5

199
Tree	< == null cs
Code	< == null cs
Distance : 4

200
Tree	SuppressWarnings () != i
Code	SuppressWarnings () != i
Distance : 5

201
Tree	i == null i !=
Code	i == null i !=
Distance : 4

202
Tree	this . equals () != i
Code	this . equals () != i
Distance : 6

203
Tree	< == null short
Code	< == null short
Distance : 4

204
Tree	this . getStringBuffer () != i
Code	this . getStringBuffer () != i
Distance : 6

205
Tree	i == null MutableInt
Code	i == null MutableInt
Distance : 4

206
Tree	< == null obj
Code	< == null obj
Distance : 4

207
Tree	i != null thisBuf.length ]
Code	i != null thisBuf.length ]
Distance : 4

208
Tree	final () i emptyMap ( i )
Code	final () i emptyMap ( i )
Distance : 6

209
Tree	i == < && i
Code	i == < && i
Distance : 4

210
Tree	i == null thisBuf.length +=
Code	i == null thisBuf.length +=
Distance : 4

211
Tree	NestableException () != i
Code	NestableException () != i
Distance : 5

212
Tree	STRING_CONSTANT + i . invoke ()
Code	STRING_CONSTANT + i . invoke ()
Distance : 5

213
Tree	final () i getDaemonFlag ( i )
Code	final () i getDaemonFlag ( i )
Distance : 6

214
Tree	final ( i ) i removeAccentsSUN ( i )
Code	final ( i ) i removeAccentsSUN ( i )
Distance : 8

215
Tree	i == size isEquals
Code	i == size isEquals
Distance : 4

216
Tree	i != null i -
Code	i != null i -
Distance : 4

217
Tree	i . emptyMap () < toNoNullStringArray ( i )
Code	i . emptyMap () < toNoNullStringArray ( i )
Distance : 7

218
Tree	final () i ordinal ( i )
Code	final () i ordinal ( i )
Distance : 6

219
Tree	i > NUMBER_CONSTANT !=
Code	i > NUMBER_CONSTANT !=
Distance : 4

220
Tree	i > NUMBER_CONSTANT ]
Code	i > NUMBER_CONSTANT ]
Distance : 4

221
Tree	i > NUMBER_CONSTANT ex
Code	i > NUMBER_CONSTANT ex
Distance : 4

222
Tree	i . ordinal ( i ) != <
Code	i . ordinal ( i ) != <
Distance : 7

223
Tree	i != return;
Code	i != return;
Distance : 4

224
Tree	i . codePointAt () . getComponentType () != i
Code	i . codePointAt () . getComponentType () != i
Distance : 7

225
Tree	final ( i ) i isOSVersionMatch ( i )
Code	final ( i ) i isOSVersionMatch ( i )
Distance : 8

226
Tree	i > NUMBER_CONSTANT Calendar
Code	i > NUMBER_CONSTANT Calendar
Distance : 4

227
Tree	size / size
Code	size / size
Distance : 4

228
Tree	i < < CharSequence
Code	i < < CharSequence
Distance : 3

229
Tree	add ( i ) != thisBuf.length
Code	add ( i ) != thisBuf.length
Distance : 6

230
Tree	i > NUMBER_CONSTANT toString
Code	i > NUMBER_CONSTANT toString
Distance : 4

231
Tree	i . toCharArray ( i ) != <
Code	i . toCharArray ( i ) != <
Distance : 7

232
Tree	this . i . destroy () != i
Code	this . i . destroy () != i
Distance : 7

233
Tree	size == super();
Code	size == super();
Distance : 5

234
Tree	i == size MutableInt
Code	i == size MutableInt
Distance : 4

235
Tree	this . i == size cs
Code	this . i == size cs
Distance : 5

236
Tree	i != null i +=
Code	i != null i +=
Distance : 4

237
Tree	i + NUMBER_CONSTANT T
Code	i + NUMBER_CONSTANT T
Distance : 4

238
Tree	i == size {}
Code	i == size {}
Distance : 4

239
Tree	i == null -
Code	i == null -
Distance : 4

240
Tree	i == i
Code	i == i
Distance : 4

241
Tree	i / createMessageFormat ()
Code	i / createMessageFormat ()
Distance : 4

242
Tree	i / PAD_LIMIT ()
Code	i / PAD_LIMIT ()
Distance : 4

243
Tree	this . getTaskCount () != i
Code	this . getTaskCount () != i
Distance : 6

244
Tree	< i < [
Code	< i < [
Distance : 4

245
Tree	i < <
Code	i < <
Distance : 3

246
Tree	size == size
Code	size == size
Distance : 4

247
Tree	i . emptyMap () i getRightElement ( i )
Code	i . emptyMap () i getRightElement ( i )
Distance : 8

248
Tree	classes () != i
Code	classes () != i
Distance : 5

249
Tree	size < <
Code	size < <
Distance : 4

250
Tree	i < < NUMBER_CONSTANT CharSequence
Code	i < < NUMBER_CONSTANT CharSequence
Distance : 3

251
Tree	getLocale () == i
Code	getLocale () == i
Distance : 5

252
Tree	i < < NUMBER_CONSTANT pattern
Code	i < < NUMBER_CONSTANT pattern
Distance : 3

253
Tree	i == size cs
Code	i == size cs
Distance : 4

254
Tree	pos () != i
Code	pos () != i
Distance : 5

255
Tree	i == continue;
Code	i == continue;
Distance : 4

256
Tree	DiffResult ( i ) == size
Code	DiffResult ( i ) == size
Distance : 5

257
Tree	i && i == i {}
Code	i && i == i {}
Distance : 5

258
Tree	i == size obj
Code	i == size obj
Distance : 4

259
Tree	i i thisBuf.length StringUtils
Code	i i thisBuf.length StringUtils
Distance : 4

260
Tree	cloned.chars () != i
Code	cloned.chars () != i
Distance : 5

261
Tree	i / size isEquals
Code	i / size isEquals
Distance : 4

262
Tree	i / getVariableResolver ()
Code	i / getVariableResolver ()
Distance : 4

263
Tree	size && i == <
Code	size && i == <
Distance : 5

264
Tree	this . size == size
Code	this . size == size
Distance : 4

265
Tree	this . i . invoke () != i
Code	this . i . invoke () != i
Distance : 7

266
Tree	i == < ]
Code	i == < ]
Distance : 4

267
Tree	i / size MutableInt
Code	i / size MutableInt
Distance : 4

268
Tree	i / SplitState.SPLIT ()
Code	i / SplitState.SPLIT ()
Distance : 4

269
Tree	final ( i ) != <
Code	final ( i ) != <
Distance : 6

270
Tree	i / size {}
Code	i / size {}
Distance : 4

271
Tree	size && size == <
Code	size && size == <
Distance : 5

272
Tree	i . emptyMap () . getLeftElement () != <
Code	i . emptyMap () . getLeftElement () != <
Distance : 7

273
Tree	size == null
Code	size == null
Distance : 5

274
Tree	size < < NUMBER_CONSTANT
Code	size < < NUMBER_CONSTANT
Distance : 4

275
Tree	size + NUMBER_CONSTANT
Code	size + NUMBER_CONSTANT
Distance : 5

276
Tree	final ( i ) == size
Code	final ( i ) == size
Distance : 5

277
Tree	i / size obj
Code	i / size obj
Distance : 4

278
Tree	final () i getTypeArguments ( i )
Code	final () i getTypeArguments ( i )
Distance : 6

279
Tree	i == return;
Code	i == return;
Distance : 4

280
Tree	i . newTextToken ( i ) != i
Code	i . newTextToken ( i ) != i
Distance : 7

281
Tree	this == size
Code	this == size
Distance : 3

282
Tree	i . asList ( i ) != <
Code	i . asList ( i ) != <
Distance : 7

283
Tree	i == super();
Code	i == super();
Distance : 4

284
Tree	i == null i <=
Code	i == null i <=
Distance : 4

285
Tree	i . getIndex () != i
Code	i . getIndex () != i
Distance : 5

286
Tree	i . ordinal () != i
Code	i . ordinal () != i
Distance : 5

287
Tree	i == null i <>
Code	i == null i <>
Distance : 4

288
Tree	i + size + STRING_CONSTANT
Code	i + size + STRING_CONSTANT
Distance : 4

289
Tree	i . toCharArray () != <
Code	i . toCharArray () != <
Distance : 5

290
Tree	i == < && i byte
Code	i == < && i byte
Distance : 4

291
Tree	SuppressWarnings ( i ) == size
Code	SuppressWarnings ( i ) == size
Distance : 5

292
Tree	i . codePointAt () i nextInt ( i )
Code	i . codePointAt () i nextInt ( i )
Distance : 8

293
Tree	i == <
Code	i == <
Distance : 4

294
Tree	i . emptyMap () i getLeftElement ( i )
Code	i . emptyMap () i getLeftElement ( i )
Distance : 8

295
Tree	i . currentTimeMillis ( i ) != <
Code	i . currentTimeMillis ( i ) != <
Distance : 7

296
Tree	i && i == < obj
Code	i && i == < obj
Distance : 5

297
Tree	this . i == size
Code	this . i == size
Distance : 4

298
Tree	i < <
Code	i < <
Distance : 3

299
Tree	i + size + STRING_CONSTANT byte
Code	i + size + STRING_CONSTANT byte
Distance : 5

300
Tree	i i < !=
Code	i i < !=
Distance : 4

301
Tree	i . codePointAt () < ordinal ( i )
Code	i . codePointAt () < ordinal ( i )
Distance : 7

302
Tree	i i < toString
Code	i i < toString
Distance : 4

303
Tree	final () i codePointAt ( i )
Code	final () i codePointAt ( i )
Distance : 6

304
Tree	size != null
Code	size != null
Distance : 5

305
Tree	< == null
Code	< == null
Distance : 4

306
Tree	final () i build ( i )
Code	final () i build ( i )
Distance : 6

307
Tree	i + i + STRING_CONSTANT
Code	i + i + STRING_CONSTANT
Distance : 4

308
Tree	size + size + STRING_CONSTANT
Code	size + size + STRING_CONSTANT
Distance : 5

309
Tree	i . nextInt ( i ) != <
Code	i . nextInt ( i ) != <
Distance : 7

310
Tree	size == < thisBuf.length :
Code	size == < thisBuf.length :
Distance : 5

311
Tree	i < < NUMBER_CONSTANT !=
Code	i < < NUMBER_CONSTANT !=
Distance : 3

312
Tree	lastWasGap ( i ) != <
Code	lastWasGap ( i ) != <
Distance : 6

313
Tree	i . codePointAt ( i ) != <
Code	i . codePointAt ( i ) != <
Distance : 7

314
Tree	i + size + STRING_CONSTANT cs
Code	i + size + STRING_CONSTANT cs
Distance : 5

315
Tree	this . i == i
Code	this . i == i
Distance : 5

316
Tree	SuppressWarnings ( i ) i createMessageFormat ( i )
Code	SuppressWarnings ( i ) i createMessageFormat ( i )
Distance : 8

317
Tree	i . emptyMap () != i
Code	i . emptyMap () != i
Distance : 5

318
Tree	i != super();
Code	i != super();
Distance : 4

319
Tree	i == return;
Code	i == return;
Distance : 4

320
Tree	SuppressWarnings ( i ) != <
Code	SuppressWarnings ( i ) != <
Distance : 6

321
Tree	i / TimeZoneNumberRule.INSTANCE_COLON ()
Code	i / TimeZoneNumberRule.INSTANCE_COLON ()
Distance : 4

322
Tree	size == <
Code	size == <
Distance : 5

323
Tree	i / greatestCommonDivisor ()
Code	i / greatestCommonDivisor ()
Distance : 4

324
Tree	i / getDaemonFlag ()
Code	i / getDaemonFlag ()
Distance : 4

325
Tree	i == null i >=
Code	i == null i >=
Distance : 4

326
Tree	i < < NUMBER_CONSTANT T
Code	i < < NUMBER_CONSTANT T
Distance : 3

327
Tree	i / extractCauseUnchecked ()
Code	i / extractCauseUnchecked ()
Distance : 4

328
Tree	i != null thisBuf.length :
Code	i != null thisBuf.length :
Distance : 4

329
Tree	final ( i ) i PAD_LIMIT ( i )
Code	final ( i ) i PAD_LIMIT ( i )
Distance : 8

330
Tree	i != continue;
Code	i != continue;
Distance : 4

331
Tree	< i <
Code	< i <
Distance : 4

332
Tree	< == <
Code	< == <
Distance : 4

333
Tree	i < < ]
Code	i < < ]
Distance : 3

334
Tree	this == i ex
Code	this == i ex
Distance : 5

335
Tree	SuppressWarnings ( i ) i getVariableResolver ( i )
Code	SuppressWarnings ( i ) i getVariableResolver ( i )
Distance : 8

336
Tree	this == i CharSequence
Code	this == i CharSequence
Distance : 5

337
Tree	this == i pattern
Code	this == i pattern
Distance : 5

338
Tree	DiffResult ( i ) != <
Code	DiffResult ( i ) != <
Distance : 6

339
Tree	this == i toString
Code	this == i toString
Distance : 5

340
Tree	this == i Calendar
Code	this == i Calendar
Distance : 5

341
Tree	final ( i ) i getDenominator ( i )
Code	final ( i ) i getDenominator ( i )
Distance : 8

342
Tree	this == i ]
Code	this == i ]
Distance : 5

343
Tree	cloned.chars ( i ) == size
Code	cloned.chars ( i ) == size
Distance : 5

344
Tree	getLocale ( i ) != <
Code	getLocale ( i ) != <
Distance : 6

345
Tree	i . numberOfTrailingZeros ( i ) != <
Code	i . numberOfTrailingZeros ( i ) != <
Distance : 7

346
Tree	i == < toString
Code	i == < toString
Distance : 4

347
Tree	i == < thisBuf.length +=
Code	i == < thisBuf.length +=
Distance : 4

348
Tree	this == i !=
Code	this == i !=
Distance : 5

349
Tree	i < < T
Code	i < < T
Distance : 3

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=strLen}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=width}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/59/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 370
Wrong
========================================================================
False

0
Tree	{ str . getChars ( null , strLen , buffer , strLen ) ; }
Code	{ str . getChars ( null , strLen , buffer , strLen ) ; }
Distance : 3

1
Tree	{ str . getChars ( null , strLen , buffer , size ) ; }
Code	{ str . getChars ( null , strLen , buffer , size ) ; }
Distance : 2

2
Tree	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Distance : 3

3
Tree	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

4
Tree	{ str . getChars ( null , buffer , buffer , size ) ; }
Code	{ str . getChars ( null , buffer , buffer , size ) ; }
Distance : 2

5
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

6
Tree	{ str . getChars ( null , strLen , size , buffer ) ; }
Code	{ str . getChars ( null , strLen , size , buffer ) ; }
Distance : 4

7
Tree	{ str . getChars ( null , buffer , buffer , strLen ) ; }
Code	{ str . getChars ( null , buffer , buffer , strLen ) ; }
Distance : 3

8
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

9
Tree	{ getChars ( str , strLen , buffer , ModifyType.ROUND ) ; }
Code	{ getChars ( str , strLen , buffer , ModifyType.ROUND ) ; }
Distance : 5

10
Tree	{ getChars ( str , strLen , buffer , strLen ) ; }
Code	{ getChars ( str , strLen , buffer , strLen ) ; }
Distance : 5

11
Tree	{ getChars ( str , strLen , buffer , StringUtils.EMPTY ) ; }
Code	{ getChars ( str , strLen , buffer , StringUtils.EMPTY ) ; }
Distance : 5

12
Tree	{ getChars ( str , StringUtils.EMPTY , false ) ; }
Code	{ getChars ( str , StringUtils.EMPTY , false ) ; }
Distance : 7

13
Tree	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

14
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

15
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

16
Tree	{ str . getChars ( true ) ; }
Code	{ str . getChars ( true ) ; }
Distance : 7

17
Tree	{ getChars ( str , strLen , buffer , size ) ; }
Code	{ getChars ( str , strLen , buffer , size ) ; }
Distance : 4

18
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

19
Tree	{ str . getChars ( false ) ; }
Code	{ str . getChars ( false ) ; }
Distance : 7

20
Tree	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

21
Tree	{ str . getChars ( strLen , strLen , buffer , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , strLen , buffer , STRING_CONSTANT ) ; }
Distance : 3

22
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

23
Tree	{ str . getChars ( this , strLen , buffer , size ) ; }
Code	{ str . getChars ( this , strLen , buffer , size ) ; }
Distance : 2

24
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

25
Tree	{ str . getChars ( null , str , buffer , strLen ) ; }
Code	{ str . getChars ( null , str , buffer , strLen ) ; }
Distance : 3

26
Tree	{ getChars ( str , strLen , buffer , Byte.MIN_VALUE ) ; }
Code	{ getChars ( str , strLen , buffer , Byte.MIN_VALUE ) ; }
Distance : 5

27
Tree	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

28
Tree	{ getChars ( str , strLen , buffer , strLen , size , size ) ; }
Code	{ getChars ( str , strLen , buffer , strLen , size , size ) ; }
Distance : 8

29
Tree	{ getChars ( str , strLen , buffer , size , size , size ) ; }
Code	{ getChars ( str , strLen , buffer , size , size , size ) ; }
Distance : 8

30
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ;
Distance : 4

31
Tree	{ getChars ( str , str , size ) ; }
Code	{ getChars ( str , str , size ) ; }
Distance : 6

32
Tree	{ size . getChars ( false ) ; }
Code	{ size . getChars ( false ) ; }
Distance : 8

33
Tree	str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ;
Distance : 4

34
Tree	{ str . getChars ( null , str , buffer , size ) ; }
Code	{ str . getChars ( null , str , buffer , size ) ; }
Distance : 2

35
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( strLen , buffer ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( strLen , buffer ) ; }
Distance : 6

36
Tree	{ str . getChars ( true , buffer ) ; }
Code	{ str . getChars ( true , buffer ) ; }
Distance : 5

37
Tree	{ getChars ( str , buffer , size ) ; }
Code	{ getChars ( str , buffer , size ) ; }
Distance : 5

38
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer ) ; }
Distance : 3

39
Tree	{ str . str ( strLen , size ) ; }
Code	{ str . str ( strLen , size ) ; }
Distance : 6

40
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , StringUtils.EMPTY ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , StringUtils.EMPTY ) ; }
Distance : 6

41
Tree	{ strLen . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Distance : 4

42
Tree	getChars ( str , strLen , buffer , CHAR_CONS ) ;
Code	getChars ( str , strLen , buffer , CHAR_CONS ) ;
Distance : 7

43
Tree	getChars ( str , strLen , buffer , Calendar.HOUR_OF_DAY ) ;
Code	getChars ( str , strLen , buffer , Calendar.HOUR_OF_DAY ) ;
Distance : 7

44
Tree	{ str . getChars ( strLen , strLen . getChars () , this ) ; }
Code	{ str . getChars ( strLen , strLen . getChars () , this ) ; }
Distance : 6

45
Tree	str . getChars ( NUMBER_CONSTANT , strLen , size , strLen ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , size , strLen ) ;
Distance : 5

46
Tree	{ str . str ( str , strLen ) ; }
Code	{ str . str ( str , strLen ) ; }
Distance : 7

47
Tree	{ str . getChars ( strLen , strLen , size , this , strLen ) ; }
Code	{ str . getChars ( strLen , strLen , size , this , strLen ) ; }
Distance : 6

48
Tree	{ getChars ( str , rhs.a , false ) ; }
Code	{ getChars ( str , rhs.a , false ) ; }
Distance : 7

49
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Distance : 2

50
Tree	buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ;
Code	buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ;
Distance : 5

51
Tree	getChars ( str , strLen , buffer , Calendar.FEBRUARY ) ;
Code	getChars ( str , strLen , buffer , Calendar.FEBRUARY ) ;
Distance : 7

52
Tree	{ getChars ( buffer , size , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( buffer , size , getChars () , STRING_CONSTANT ) ; }
Distance : 7

53
Tree	{ str . getChars ( strLen ? ++ : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? ++ : Boolean.TRUE ) ; }
Distance : 7

54
Tree	{ str . getChars ( Locale.ENGLISH , STRING_CONSTANT ) ; }
Code	{ str . getChars ( Locale.ENGLISH , STRING_CONSTANT ) ; }
Distance : 6

55
Tree	{ getChars ( STRING_CONSTANT , str , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , size ) ; }
Distance : 4

56
Tree	{ getChars ( null , Boolean.TYPE ) ; }
Code	{ getChars ( null , Boolean.TYPE ) ; }
Distance : 8

57
Tree	{ str . getChars ( strLen ? CharUtils.NUL : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? CharUtils.NUL : Boolean.TRUE ) ; }
Distance : 7

58
Tree	{ getChars ( str , strLen , buffer , size , size ) ; }
Code	{ getChars ( str , strLen , buffer , size , size ) ; }
Distance : 6

59
Tree	{ str . getChars ( strLen , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

60
Tree	{ getChars ( str , null ) ; }
Code	{ getChars ( str , null ) ; }
Distance : 8

61
Tree	{ getChars ( str , getChars () , null ) ; }
Code	{ getChars ( str , getChars () , null ) ; }
Distance : 7

62
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 4

63
Tree	{ strLen . getChars ( true , strLen ) ; }
Code	{ strLen . getChars ( true , strLen ) ; }
Distance : 7

64
Tree	{ str . getChars ( strLen ? Locale.ROOT : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? Locale.ROOT : Boolean.TRUE ) ; }
Distance : 7

65
Tree	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

66
Tree	{ str . getChars ( TimeZones.GMT_ID , STRING_CONSTANT ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , STRING_CONSTANT ) ; }
Distance : 6

67
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Distance : 6

68
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , tokens.length , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , tokens.length , NUMBER_CONSTANT ) ; }
Distance : 4

69
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 1

70
Tree	getChars ( str , strLen , buffer , Boolean.TYPE ) ;
Code	getChars ( str , strLen , buffer , Boolean.TYPE ) ;
Distance : 7

71
Tree	{ str . str ( strLen , buffer ) ; }
Code	{ str . str ( strLen , buffer ) ; }
Distance : 6

72
Tree	{ str . getChars ( trim , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( trim , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

73
Tree	{ buffer . str ( strLen , buffer ) ; }
Code	{ buffer . str ( strLen , buffer ) ; }
Distance : 7

74
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Distance : 6

75
Tree	{ strLen . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ strLen . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

76
Tree	{ str . getChars ( trim , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( trim , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

77
Tree	{ str . getChars ( StringUtils.EMPTY , StringUtils.EMPTY ) ; }
Code	{ str . getChars ( StringUtils.EMPTY , StringUtils.EMPTY ) ; }
Distance : 6

78
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , StringUtils.EMPTY ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , StringUtils.EMPTY ) ; }
Distance : 6

79
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , StringUtils.EMPTY , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , StringUtils.EMPTY , NUMBER_CONSTANT ) ; }
Distance : 4

80
Tree	{ getChars ( strLen , strLen , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( strLen , strLen , getChars () , STRING_CONSTANT ) ; }
Distance : 7

81
Tree	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

82
Tree	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

83
Tree	{ str . getChars ( size , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( size , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

84
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 2

85
Tree	{ str . getChars ( CHAR_CONS , StringUtils.EMPTY , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , StringUtils.EMPTY , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

86
Tree	{ str . getChars ( CHAR_CONS , array.length , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , array.length , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

87
Tree	{ strLen . getChars ( false ) ; }
Code	{ strLen . getChars ( false ) ; }
Distance : 8

88
Tree	{ getChars ( str , getChars () , super(); ) ; }
Code	{ getChars ( str , getChars () , super(); ) ; }
Distance : 7

89
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

90
Tree	{ getChars ( getNumerator , null ) ; }
Code	{ getChars ( getNumerator , null ) ; }
Distance : 8

91
Tree	{ getChars ( str , str , buffer , size , size ) ; }
Code	{ getChars ( str , str , buffer , size , size ) ; }
Distance : 6

92
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

93
Tree	{ getChars ( str , size , size ) ; }
Code	{ getChars ( str , size , size ) ; }
Distance : 6

94
Tree	{ buffer . getChars ( true , strLen ) ; }
Code	{ buffer . getChars ( true , strLen ) ; }
Distance : 7

95
Tree	{ str . getChars ( strLen ? Calendar.SUNDAY : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? Calendar.SUNDAY : Boolean.TRUE ) ; }
Distance : 7

96
Tree	{ getChars ( buffer , str , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( buffer , str , getChars () , STRING_CONSTANT ) ; }
Distance : 7

97
Tree	{ strLen . getChars ( true ) ; }
Code	{ strLen . getChars ( true ) ; }
Distance : 8

98
Tree	{ getChars ( System.out , null ) ; }
Code	{ getChars ( System.out , null ) ; }
Distance : 8

99
Tree	{ str . getChars ( CharUtils.CR , STRING_CONSTANT ) ; }
Code	{ str . getChars ( CharUtils.CR , STRING_CONSTANT ) ; }
Distance : 6

100
Tree	{ getChars ( str , strLen , buffer , Calendar.HOUR_OF_DAY ) ; }
Code	{ getChars ( str , strLen , buffer , Calendar.HOUR_OF_DAY ) ; }
Distance : 5

101
Tree	{ str . getChars ( strLen , buffer , size , this , CHAR_CONS ) ; }
Code	{ str . getChars ( strLen , buffer , size , this , CHAR_CONS ) ; }
Distance : 6

102
Tree	{ str . getChars ( str , strLen , buffer , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , strLen , buffer , STRING_CONSTANT ) ; }
Distance : 3

103
Tree	{ getChars ( STRING_CONSTANT , size , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , size , buffer , size ) ; }
Distance : 4

104
Tree	{ DateUtils.MILLIS_PER_MINUTE . getChars ( strLen , buffer ) ; }
Code	{ DateUtils.MILLIS_PER_MINUTE . getChars ( strLen , buffer ) ; }
Distance : 6

105
Tree	getChars ( str , strLen , buffer , Byte.MIN_VALUE ) ;
Code	getChars ( str , strLen , buffer , Byte.MIN_VALUE ) ;
Distance : 7

106
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 3

107
Tree	{ getChars ( str , strLen , buffer , CHAR_CONS ) ; }
Code	{ getChars ( str , strLen , buffer , CHAR_CONS ) ; }
Distance : 5

108
Tree	{ str . getChars ( false , strLen ) ; }
Code	{ str . getChars ( false , strLen ) ; }
Distance : 6

109
Tree	{ str . getChars ( trim , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( trim , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

110
Tree	{ str . str ( buffer , strLen ) ; }
Code	{ str . str ( buffer , strLen ) ; }
Distance : 6

111
Tree	{ str . getChars ( this , strLen , buffer , strLen ) ; }
Code	{ str . getChars ( this , strLen , buffer , strLen ) ; }
Distance : 3

112
Tree	getChars ( str , strLen , buffer , ModifyType.ROUND ) ;
Code	getChars ( str , strLen , buffer , ModifyType.ROUND ) ;
Distance : 7

113
Tree	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Code	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Distance : 6

114
Tree	buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Code	buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Distance : 5

115
Tree	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

116
Tree	{ str . getChars ( buffer , strLen , buffer , STRING_CONSTANT ) ; }
Code	{ str . getChars ( buffer , strLen , buffer , STRING_CONSTANT ) ; }
Distance : 3

117
Tree	{ str . getChars ( strLen , strLen , buffer , this , super ) ; }
Code	{ str . getChars ( strLen , strLen , buffer , this , super ) ; }
Distance : 5

118
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Distance : 2

119
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

120
Tree	{ getChars ( str , ? , false ) ; }
Code	{ getChars ( str , ? , false ) ; }
Distance : 7

121
Tree	{ str . getChars ( strLen , buffer , buffer , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , buffer , buffer , STRING_CONSTANT ) ; }
Distance : 3

122
Tree	{ str . getChars ( TimeZones.GMT_ID , StringUtils.EMPTY ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , StringUtils.EMPTY ) ; }
Distance : 6

123
Tree	{ getChars ( str , strLen , buffer , Calendar.FEBRUARY ) ; }
Code	{ getChars ( str , strLen , buffer , Calendar.FEBRUARY ) ; }
Distance : 5

124
Tree	{ str . getChars ( CHAR_CONS , Calendar.FEBRUARY , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , Calendar.FEBRUARY , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

125
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( str , buffer ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( str , buffer ) ; }
Distance : 6

126
Tree	{ str . getChars ( strLen , strLen , buffer , this , true ) ; }
Code	{ str . getChars ( strLen , strLen , buffer , this , true ) ; }
Distance : 5

127
Tree	{ str . getChars ( strLen ? Entities.HTML40_ARRAY_LENGTH : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? Entities.HTML40_ARRAY_LENGTH : Boolean.TRUE ) ; }
Distance : 7

128
Tree	{ str . getChars ( TimeZones.GMT_ID , Boolean.TYPE ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , Boolean.TYPE ) ; }
Distance : 6

129
Tree	{ getChars ( str , deepEmpty , false ) ; }
Code	{ getChars ( str , deepEmpty , false ) ; }
Distance : 7

130
Tree	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Distance : 6

131
Tree	{ getChars ( str , strLen , buffer , Boolean.TYPE ) ; }
Code	{ getChars ( str , strLen , buffer , Boolean.TYPE ) ; }
Distance : 5

132
Tree	{ str . getChars ( str , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

133
Tree	{ str . getChars ( buffer , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( buffer , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

134
Tree	{ getChars ( null , FastDateParser.JAPANESE_IMPERIAL ) ; }
Code	{ getChars ( null , FastDateParser.JAPANESE_IMPERIAL ) ; }
Distance : 8

135
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

136
Tree	{ str . getChars ( strLen ? StringUtils.EMPTY : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? StringUtils.EMPTY : Boolean.TRUE ) ; }
Distance : 7

137
Tree	{ str . str ( strLen , strLen ) ; }
Code	{ str . str ( strLen , strLen ) ; }
Distance : 7

138
Tree	{ str . getChars ( CHAR_CONS , JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

139
Tree	{ getChars ( str.buffer , null ) ; }
Code	{ getChars ( str.buffer , null ) ; }
Distance : 8

140
Tree	{ str . getChars ( this , strLen , size , size ) ; }
Code	{ str . getChars ( this , strLen , size , size ) ; }
Distance : 3

141
Tree	{ str . getChars ( trim , STRING_CONSTANT ) ; }
Code	{ str . getChars ( trim , STRING_CONSTANT ) ; }
Distance : 6

142
Tree	{ str . getChars ( strLen , buffer , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , buffer , size , STRING_CONSTANT ) ; }
Distance : 4

143
Tree	{ getChars ( null , sb.buffer.length ) ; }
Code	{ getChars ( null , sb.buffer.length ) ; }
Distance : 8

144
Tree	{ getChars ( buffer , buffer , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( buffer , buffer , getChars () , STRING_CONSTANT ) ; }
Distance : 7

145
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , strLen ) ; }
Distance : 2

146
Tree	{ str . getChars ( strLen , getChars () , this ) ; }
Code	{ str . getChars ( strLen , getChars () , this ) ; }
Distance : 5

147
Tree	{ getChars ( str , strLen , buffer , buffer ) ; }
Code	{ getChars ( str , strLen , buffer , buffer ) ; }
Distance : 5

148
Tree	{ getChars ( str , strLen , buffer , buffer , size , size ) ; }
Code	{ getChars ( str , strLen , buffer , buffer , size , size ) ; }
Distance : 8

149
Tree	{ getChars ( null , array.length ) ; }
Code	{ getChars ( null , array.length ) ; }
Distance : 8

150
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + strLen ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + strLen ) ; }
Distance : 6

151
Tree	{ entry.map . getChars ( strLen , buffer ) ; }
Code	{ entry.map . getChars ( strLen , buffer ) ; }
Distance : 6

152
Tree	{ getChars ( str , CharUtils.NUL , false ) ; }
Code	{ getChars ( str , CharUtils.NUL , false ) ; }
Distance : 7

153
Tree	{ getChars ( size , getChars () , null ) ; }
Code	{ getChars ( size , getChars () , null ) ; }
Distance : 7

154
Tree	{ str . str ( str , buffer ) ; }
Code	{ str . str ( str , buffer ) ; }
Distance : 6

155
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , buffer ) ; }
Distance : 3

156
Tree	{ str . getChars ( true ) ; }
Code	{ str . getChars ( true ) ; }
Distance : 7

157
Tree	{ getChars ( str , DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT , false ) ; }
Code	{ getChars ( str , DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT , false ) ; }
Distance : 7

158
Tree	{ str . getChars ( null , strLen , size , strLen ) ; }
Code	{ str . getChars ( null , strLen , size , strLen ) ; }
Distance : 4

159
Tree	{ getChars ( str , Calendar.SUNDAY , false ) ; }
Code	{ getChars ( str , Calendar.SUNDAY , false ) ; }
Distance : 7

160
Tree	{ buffer . getChars ( false , strLen ) ; }
Code	{ buffer . getChars ( false , strLen ) ; }
Distance : 7

161
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , Boolean.TYPE ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , Boolean.TYPE ) ; }
Distance : 6

162
Tree	{ str . getChars ( strLen ? Locale.ENGLISH : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? Locale.ENGLISH : Boolean.TRUE ) ; }
Distance : 7

163
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

164
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Distance : 4

165
Tree	{ getChars ( str , getChars () , null ) ; }
Code	{ getChars ( str , getChars () , null ) ; }
Distance : 7

166
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + strLen ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + strLen ) ; }
Distance : 6

167
Tree	{ System.out . getChars ( strLen , strLen ) ; }
Code	{ System.out . getChars ( strLen , strLen ) ; }
Distance : 7

168
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , ? , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , ? , NUMBER_CONSTANT ) ; }
Distance : 4

169
Tree	{ getChars ( null , StringUtils.EMPTY ) ; }
Code	{ getChars ( null , StringUtils.EMPTY ) ; }
Distance : 8

170
Tree	{ str . getChars ( this , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( this , strLen , buffer , buffer ) ; }
Distance : 3

171
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

172
Tree	{ str . getChars ( strLen , strLen , size , this , CHAR_CONS ) ; }
Code	{ str . getChars ( strLen , strLen , size , this , CHAR_CONS ) ; }
Distance : 6

173
Tree	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

174
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Distance : 4

175
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , Boolean.TYPE ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , Boolean.TYPE ) ; }
Distance : 6

176
Tree	{ str . getChars ( null , strLen , size , size ) ; }
Code	{ str . getChars ( null , strLen , size , size ) ; }
Distance : 3

177
Tree	{ buffer . getChars ( true ) ; }
Code	{ buffer . getChars ( true ) ; }
Distance : 8

178
Tree	{ str . getChars ( NUMBER_CONSTANT , size , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , size , buffer ) ; }
Distance : 3

179
Tree	buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 4

180
Tree	{ getChars ( str , size , buffer , strLen , size , size ) ; }
Code	{ getChars ( str , size , buffer , strLen , size , size ) ; }
Distance : 8

181
Tree	{ getChars ( str , strLen , buffer , buffer , size , strLen ) ; }
Code	{ getChars ( str , strLen , buffer , buffer , size , strLen ) ; }
Distance : 8

182
Tree	{ str . getChars ( CharUtils.NUL , StringUtils.EMPTY ) ; }
Code	{ str . getChars ( CharUtils.NUL , StringUtils.EMPTY ) ; }
Distance : 6

183
Tree	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

184
Tree	{ getChars ( str , CharUtils.CR , false ) ; }
Code	{ getChars ( str , CharUtils.CR , false ) ; }
Distance : 7

185
Tree	{ getChars ( str , size , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( str , size , getChars () , STRING_CONSTANT ) ; }
Distance : 7

186
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Distance : 3

187
Tree	{ getChars ( str , str , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( str , str , getChars () , STRING_CONSTANT ) ; }
Distance : 7

188
Tree	{ getChars ( null , Calendar.SUNDAY ) ; }
Code	{ getChars ( null , Calendar.SUNDAY ) ; }
Distance : 8

189
Tree	{ getChars ( str , buffer , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( str , buffer , getChars () , STRING_CONSTANT ) ; }
Distance : 7

190
Tree	{ str . getChars ( strLen , size . getChars () , this ) ; }
Code	{ str . getChars ( strLen , size . getChars () , this ) ; }
Distance : 6

191
Tree	{ buffer . getChars ( strLen , getChars () , this ) ; }
Code	{ buffer . getChars ( strLen , getChars () , this ) ; }
Distance : 6

192
Tree	{ str . getChars ( false , buffer ) ; }
Code	{ str . getChars ( false , buffer ) ; }
Distance : 5

193
Tree	{ str . getChars ( strLen , strLen , strLen , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , strLen , strLen , STRING_CONSTANT ) ; }
Distance : 4

194
Tree	{ str . getChars ( str , buffer . getChars () , this ) ; }
Code	{ str . getChars ( str , buffer . getChars () , this ) ; }
Distance : 6

195
Tree	{ size . getChars ( true ) ; }
Code	{ size . getChars ( true ) ; }
Distance : 8

196
Tree	{ str . getChars ( strLen , strLen , buffer , this , tokens.length ) ; }
Code	{ str . getChars ( strLen , strLen , buffer , this , tokens.length ) ; }
Distance : 5

197
Tree	{ getChars ( STRING_CONSTANT , str , buffer , buffer ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , buffer ) ; }
Distance : 5

198
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 5

199
Tree	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( Locale.ENGLISH , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

200
Tree	{ buffer . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ buffer . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

201
Tree	{ getChars ( null , JavaVersion.JAVA_1_5 ) ; }
Code	{ getChars ( null , JavaVersion.JAVA_1_5 ) ; }
Distance : 8

202
Tree	{ str . getChars ( trim , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( trim , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

203
Tree	{ getChars ( str , getChars () , continue; ) ; }
Code	{ getChars ( str , getChars () , continue; ) ; }
Distance : 7

204
Tree	{ str . getChars ( true , str ) ; }
Code	{ str . getChars ( true , str ) ; }
Distance : 6

205
Tree	{ getChars ( str , && , false ) ; }
Code	{ getChars ( str , && , false ) ; }
Distance : 7

206
Tree	{ buffer . getChars ( buffer , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ buffer . getChars ( buffer , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

207
Tree	{ getChars ( str , strLen , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( str , strLen , getChars () , STRING_CONSTANT ) ; }
Distance : 7

208
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( str , strLen ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( str , strLen ) ; }
Distance : 7

209
Tree	{ getChars ( str , strLen , strLen ) ; }
Code	{ getChars ( str , strLen , strLen ) ; }
Distance : 7

210
Tree	{ str . getChars ( buffer , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( buffer , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

211
Tree	{ getChars ( JavaVersion.JAVA_1_5 , null ) ; }
Code	{ getChars ( JavaVersion.JAVA_1_5 , null ) ; }
Distance : 8

212
Tree	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

213
Tree	{ getChars ( buffer , strLen , buffer ) ; }
Code	{ getChars ( buffer , strLen , buffer ) ; }
Distance : 6

214
Tree	{ getChars ( str , strLen , buffer , tokens.length ) ; }
Code	{ getChars ( str , strLen , buffer , tokens.length ) ; }
Distance : 5

215
Tree	{ getChars ( str , buffer , buffer , strLen , size ) ; }
Code	{ getChars ( str , buffer , buffer , strLen , size ) ; }
Distance : 6

216
Tree	{ getChars ( STRING_CONSTANT , buffer , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , buffer , buffer , size ) ; }
Distance : 4

217
Tree	{ str . getChars ( buffer , buffer . getChars () , this ) ; }
Code	{ str . getChars ( buffer , buffer . getChars () , this ) ; }
Distance : 6

218
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen ) ; }
Distance : 4

219
Tree	{ str . getChars ( strLen , str . getChars () , this ) ; }
Code	{ str . getChars ( strLen , str . getChars () , this ) ; }
Distance : 6

220
Tree	{ getChars ( STRING_CONSTANT , buffer , buffer , strLen ) ; }
Code	{ getChars ( STRING_CONSTANT , buffer , buffer , strLen ) ; }
Distance : 5

221
Tree	{ str . getChars ( str , getChars () , this ) ; }
Code	{ str . getChars ( str , getChars () , this ) ; }
Distance : 5

222
Tree	{ str . getChars ( false ) ; }
Code	{ str . getChars ( false ) ; }
Distance : 7

223
Tree	{ str . getChars ( strLen , strLen , buffer , this , CHAR_CONS ) ; }
Code	{ str . getChars ( strLen , strLen , buffer , this , CHAR_CONS ) ; }
Distance : 5

224
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } toString
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } toString
Distance : 8

225
Tree	{ getChars ( STRING_CONSTANT , size , buffer , strLen ) ; }
Code	{ getChars ( STRING_CONSTANT , size , buffer , strLen ) ; }
Distance : 5

226
Tree	{ strLen . getChars ( strLen , getChars () , this ) ; }
Code	{ strLen . getChars ( strLen , getChars () , this ) ; }
Distance : 6

227
Tree	{ getChars ( buffer , getChars () , null ) ; }
Code	{ getChars ( buffer , getChars () , null ) ; }
Distance : 7

228
Tree	{ getChars ( strLen , getChars () , super(); ) ; }
Code	{ getChars ( strLen , getChars () , super(); ) ; }
Distance : 7

229
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 2

230
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Distance : 2

231
Tree	{ str . getChars ( true , strLen ) ; }
Code	{ str . getChars ( true , strLen ) ; }
Distance : 6

232
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } length
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } length
Distance : 8

233
Tree	{ str . getChars ( str , strLen . getChars () , this ) ; }
Code	{ str . getChars ( str , strLen . getChars () , this ) ; }
Distance : 6

234
Tree	{ getChars ( trim , null ) ; }
Code	{ getChars ( trim , null ) ; }
Distance : 8

235
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Distance : 2

236
Tree	{ size . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ size . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

237
Tree	{ getChars ( null , CharUtils.NUL ) ; }
Code	{ getChars ( null , CharUtils.NUL ) ; }
Distance : 8

238
Tree	{ str . getChars ( strLen ? TimeZones.GMT_ID : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? TimeZones.GMT_ID : Boolean.TRUE ) ; }
Distance : 7

239
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Distance : 1

240
Tree	{ getChars ( Boolean.TRUE , null ) ; }
Code	{ getChars ( Boolean.TRUE , null ) ; }
Distance : 8

241
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } StringUtils
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } StringUtils
Distance : 8

242
Tree	{ getChars ( OPTION.semiColonRequired , null ) ; }
Code	{ getChars ( OPTION.semiColonRequired , null ) ; }
Distance : 8

243
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } buffer
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } buffer
Distance : 8

244
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } [
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } [
Distance : 8

245
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , buffer ) ; }
Distance : 3

246
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , strLen ) ; }
Distance : 3

247
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } !=
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } !=
Distance : 8

248
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } mutNum
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } mutNum
Distance : 8

249
Tree	{ str . getChars ( buffer , strLen . getChars () , this ) ; }
Code	{ str . getChars ( buffer , strLen . getChars () , this ) ; }
Distance : 6

250
Tree	{ str . getChars ( strLen ? CharUtils.CR : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? CharUtils.CR : Boolean.TRUE ) ; }
Distance : 7

251
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } ex
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } ex
Distance : 8

252
Tree	{ getChars ( str , size , buffer , size , size , size ) ; }
Code	{ getChars ( str , size , buffer , size , size , size ) ; }
Distance : 8

253
Tree	{ str . getChars ( Locale.ENGLISH , StringUtils.EMPTY ) ; }
Code	{ str . getChars ( Locale.ENGLISH , StringUtils.EMPTY ) ; }
Distance : 6

254
Tree	{ str . getChars ( this , strLen , size , strLen ) ; }
Code	{ str . getChars ( this , strLen , size , strLen ) ; }
Distance : 4

255
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Distance : 1

256
Tree	{ System.out . getChars ( strLen , buffer ) ; }
Code	{ System.out . getChars ( strLen , buffer ) ; }
Distance : 6

257
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

258
Tree	{ getChars ( str , strLen , buffer , size , strLen , size ) ; }
Code	{ getChars ( str , strLen , buffer , size , strLen , size ) ; }
Distance : 8

259
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Calendar.FEBRUARY , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Calendar.FEBRUARY , NUMBER_CONSTANT ) ; }
Distance : 4

260
Tree	{ str . getChars ( CHAR_CONS , sb.buffer.length , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , sb.buffer.length , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

261
Tree	{ str . getChars ( trim , StringUtils.EMPTY ) ; }
Code	{ str . getChars ( trim , StringUtils.EMPTY ) ; }
Distance : 6

262
Tree	{ str . getChars ( strLen ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 7

263
Tree	{ System.out . getChars ( str , buffer ) ; }
Code	{ System.out . getChars ( str , buffer ) ; }
Distance : 6

264
Tree	{ str . getChars ( strLen , buffer , buffer , this , CHAR_CONS ) ; }
Code	{ str . getChars ( strLen , buffer , buffer , this , CHAR_CONS ) ; }
Distance : 5

265
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Boolean.TYPE , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Boolean.TYPE , NUMBER_CONSTANT ) ; }
Distance : 4

266
Tree	{ str . getChars ( CHAR_CONS , Boolean.TYPE , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , Boolean.TYPE , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

267
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( strLen , strLen ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( strLen , strLen ) ; }
Distance : 7

268
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size ) ; }
Distance : 3

269
Tree	{ str . getChars ( Locale.ROOT , STRING_CONSTANT ) ; }
Code	{ str . getChars ( Locale.ROOT , STRING_CONSTANT ) ; }
Distance : 6

270
Tree	{ getChars ( str , strLen , size , strLen ) ; }
Code	{ getChars ( str , strLen , size , strLen ) ; }
Distance : 6

271
Tree	{ str . getChars ( StringUtils.EMPTY , STRING_CONSTANT ) ; }
Code	{ str . getChars ( StringUtils.EMPTY , STRING_CONSTANT ) ; }
Distance : 6

272
Tree	{ getChars ( str , strLen , buffer , strLen , strLen , size ) ; }
Code	{ getChars ( str , strLen , buffer , strLen , strLen , size ) ; }
Distance : 8

273
Tree	{ str . getChars ( CHAR_CONS , ] , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , ] , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

274
Tree	{ getChars ( str , size , buffer , strLen , size ) ; }
Code	{ getChars ( str , size , buffer , strLen , size ) ; }
Distance : 6

275
Tree	{ getChars ( str , size , buffer , size , size ) ; }
Code	{ getChars ( str , size , buffer , size , size ) ; }
Distance : 6

276
Tree	{ str . getChars ( true , NUMBER_CONSTANT , StringUtils.EMPTY , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( true , NUMBER_CONSTANT , StringUtils.EMPTY , NUMBER_CONSTANT ) ; }
Distance : 4

277
Tree	getChars ( str , strLen , buffer , strLen ) ;
Code	getChars ( str , strLen , buffer , strLen ) ;
Distance : 7

278
Tree	{ getChars ( str , strLen , buffer , strLen , size , strLen ) ; }
Code	{ getChars ( str , strLen , buffer , strLen , size , strLen ) ; }
Distance : 8

279
Tree	{ getChars ( str , strLen , buffer , size , strLen ) ; }
Code	{ getChars ( str , strLen , buffer , size , strLen ) ; }
Distance : 6

280
Tree	{ getChars ( null , Calendar.FEBRUARY ) ; }
Code	{ getChars ( null , Calendar.FEBRUARY ) ; }
Distance : 8

281
Tree	{ getChars ( str , strLen , buffer , strLen , strLen ) ; }
Code	{ getChars ( str , strLen , buffer , strLen , strLen ) ; }
Distance : 7

282
Tree	{ str . getChars ( CHAR_CONS , FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

283
Tree	{ getChars ( str , size , buffer , strLen ) ; }
Code	{ getChars ( str , size , buffer , strLen ) ; }
Distance : 5

284
Tree	{ getChars ( STRING_CONSTANT , str , buffer , strLen ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , strLen ) ; }
Distance : 5

285
Tree	{ getChars ( null , str ) ; }
Code	{ getChars ( null , str ) ; }
Distance : 8

286
Tree	{ str . getChars ( str.buffer , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str.buffer , STRING_CONSTANT ) ; }
Distance : 6

287
Tree	{ getChars ( Locale.ENGLISH , null ) ; }
Code	{ getChars ( Locale.ENGLISH , null ) ; }
Distance : 8

288
Tree	{ buffer . getChars ( this , strLen , buffer , size ) ; }
Code	{ buffer . getChars ( this , strLen , buffer , size ) ; }
Distance : 3

289
Tree	{ getChars ( str , strLen , buffer , buffer , size ) ; }
Code	{ getChars ( str , strLen , buffer , buffer , size ) ; }
Distance : 6

290
Tree	{ getChars ( str , str , buffer , size ) ; }
Code	{ getChars ( str , str , buffer , size ) ; }
Distance : 4

291
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Date
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Date
Distance : 8

292
Tree	{ getChars ( str , size , buffer , size ) ; }
Code	{ getChars ( str , size , buffer , size ) ; }
Distance : 4

293
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , STRING_CONSTANT ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , STRING_CONSTANT ) ; }
Distance : 6

294
Tree	{ getChars ( ArrayUtils.INDEX_NOT_FOUND , null ) ; }
Code	{ getChars ( ArrayUtils.INDEX_NOT_FOUND , null ) ; }
Distance : 8

295
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer ) ; }
Distance : 3

296
Tree	getChars ( str , strLen , buffer , StringUtils.EMPTY ) ;
Code	getChars ( str , strLen , buffer , StringUtils.EMPTY ) ;
Distance : 7

297
Tree	{ getChars ( str , strLen , buffer , size , size , strLen ) ; }
Code	{ getChars ( str , strLen , buffer , size , size , strLen ) ; }
Distance : 8

298
Tree	{ str . getChars ( this , strLen , buffer , str ) ; }
Code	{ str . getChars ( this , strLen , buffer , str ) ; }
Distance : 3

299
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 1

300
Tree	{ str . getChars ( this , strLen , strLen , size ) ; }
Code	{ str . getChars ( this , strLen , strLen , size ) ; }
Distance : 3

301
Tree	{ getChars ( str , buffer , buffer ) ; }
Code	{ getChars ( str , buffer , buffer ) ; }
Distance : 6

302
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , delimiters.length , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , delimiters.length , NUMBER_CONSTANT ) ; }
Distance : 4

303
Tree	{ str . getChars ( this , size , buffer , size ) ; }
Code	{ str . getChars ( this , size , buffer , size ) ; }
Distance : 2

304
Tree	{ getChars ( str , buffer , buffer , strLen ) ; }
Code	{ getChars ( str , buffer , buffer , strLen ) ; }
Distance : 5

305
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , size ) ; }
Distance : 4

306
Tree	{ getChars ( str , buffer , buffer , size ) ; }
Code	{ getChars ( str , buffer , buffer , size ) ; }
Distance : 4

307
Tree	{ str . getChars ( strLen , strLen , buffer , this , strLen ) ; }
Code	{ str . getChars ( strLen , strLen , buffer , this , strLen ) ; }
Distance : 5

308
Tree	{ str . getChars ( CHAR_CONS , CharUtils.NUL , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , CharUtils.NUL , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

309
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , strLen ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , strLen ) ; }
Distance : 5

310
Tree	{ buffer . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ buffer . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

311
Tree	getChars ( str , strLen , buffer , tokens.length ) ;
Code	getChars ( str , strLen , buffer , tokens.length ) ;
Distance : 7

312
Tree	{ str . getChars ( strLen , strLen , buffer , this , size ) ; }
Code	{ str . getChars ( strLen , strLen , buffer , this , size ) ; }
Distance : 4

313
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Distance : 4

314
Tree	{ getChars ( str , strLen , size ) ; }
Code	{ getChars ( str , strLen , size ) ; }
Distance : 6

315
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( buffer , buffer ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( buffer , buffer ) ; }
Distance : 6

316
Tree	{ str . str ( buffer , buffer ) ; }
Code	{ str . str ( buffer , buffer ) ; }
Distance : 6

317
Tree	{ getChars ( str , str , buffer , strLen , size ) ; }
Code	{ getChars ( str , str , buffer , strLen , size ) ; }
Distance : 6

318
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Distance : 2

319
Tree	{ getChars ( str , TimeUnit.MILLISECONDS , false ) ; }
Code	{ getChars ( str , TimeUnit.MILLISECONDS , false ) ; }
Distance : 7

320
Tree	{ str . getChars ( CharUtils.NUL , STRING_CONSTANT ) ; }
Code	{ str . getChars ( CharUtils.NUL , STRING_CONSTANT ) ; }
Distance : 6

321
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Calendar.SUNDAY , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Calendar.SUNDAY , NUMBER_CONSTANT ) ; }
Distance : 4

322
Tree	{ getChars ( str , strLen , buffer ) ; }
Code	{ getChars ( str , strLen , buffer ) ; }
Distance : 6

323
Tree	{ buffer . getChars ( false ) ; }
Code	{ buffer . getChars ( false ) ; }
Distance : 8

324
Tree	{ getChars ( str , strLen , buffer , strLen ) ; }
Code	{ getChars ( str , strLen , buffer , strLen ) ; }
Distance : 5

325
Tree	{ str . getChars ( this , strLen , size , buffer ) ; }
Code	{ str . getChars ( this , strLen , size , buffer ) ; }
Distance : 4

326
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , strLen ) ; }
Distance : 3

327
Tree	{ str . getChars ( strLen , size , buffer , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , size , buffer , STRING_CONSTANT ) ; }
Distance : 3

328
Tree	{ str . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

329
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , STRING_CONSTANT ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , STRING_CONSTANT ) ; }
Distance : 6

330
Tree	{ str . getChars ( true , size ) ; }
Code	{ str . getChars ( true , size ) ; }
Distance : 5

331
Tree	{ str . getChars ( trim , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( trim , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

332
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 7

333
Tree	{ str . strLen ( strLen , buffer ) ; }
Code	{ str . strLen ( strLen , buffer ) ; }
Distance : 6

334
Tree	{ size . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Distance : 4

335
Tree	{ str . buffer ( strLen , buffer ) ; }
Code	{ str . buffer ( strLen , buffer ) ; }
Distance : 6

336
Tree	{ str . getChars ( CHAR_CONS , Calendar.OCTOBER , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , Calendar.OCTOBER , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

337
Tree	{ str . getChars ( trim , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( trim , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

338
Tree	{ getChars ( str , str , buffer ) ; }
Code	{ getChars ( str , str , buffer ) ; }
Distance : 6

339
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

340
Tree	{ size . getChars ( true , strLen ) ; }
Code	{ size . getChars ( true , strLen ) ; }
Distance : 7

341
Tree	{ getChars ( str , str , buffer , strLen ) ; }
Code	{ getChars ( str , str , buffer , strLen ) ; }
Distance : 5

342
Tree	{ getChars ( str , strLen , buffer , size ) ; }
Code	{ getChars ( str , strLen , buffer , size ) ; }
Distance : 4

343
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 3

344
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

345
Tree	{ getChars ( str , size , buffer ) ; }
Code	{ getChars ( str , size , buffer ) ; }
Distance : 6

346
Tree	str . getChars ( NUMBER_CONSTANT , strLen , size , buffer ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , size , buffer ) ;
Distance : 5

347
Tree	{ getChars ( str , strLen , buffer , strLen , size ) ; }
Code	{ getChars ( str , strLen , buffer , strLen , size ) ; }
Distance : 6

348
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , str ) ; }
Distance : 4

349
Tree	{ getChars ( buffer , getChars () , super(); ) ; }
Code	{ getChars ( buffer , getChars () , super(); ) ; }
Distance : 7

350
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 2

351
Tree	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

352
Tree	{ str . getChars ( buffer , getChars () , this ) ; }
Code	{ str . getChars ( buffer , getChars () , this ) ; }
Distance : 5

353
Tree	{ buffer . getChars ( strLen , strLen . getChars () , this ) ; }
Code	{ buffer . getChars ( strLen , strLen . getChars () , this ) ; }
Distance : 7

354
Tree	{ str . getChars ( strLen , buffer . getChars () , this ) ; }
Code	{ str . getChars ( strLen , buffer . getChars () , this ) ; }
Distance : 6

355
Tree	{ str . getChars ( size , getChars () , this ) ; }
Code	{ str . getChars ( size , getChars () , this ) ; }
Distance : 5

356
Tree	getChars ( str , strLen , buffer , size ) ;
Code	getChars ( str , strLen , buffer , size ) ;
Distance : 6

357
Tree	{ size . getChars ( strLen , getChars () , this ) ; }
Code	{ size . getChars ( strLen , getChars () , this ) ; }
Distance : 6

358
Tree	{ str . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

359
Tree	{ str . getChars ( str , size . getChars () , this ) ; }
Code	{ str . getChars ( str , size . getChars () , this ) ; }
Distance : 6

360
Tree	{ getChars ( strLen , getChars () , null ) ; }
Code	{ getChars ( strLen , getChars () , null ) ; }
Distance : 7

361
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Distance : 2

362
Tree	{ getChars ( buffer , strLen , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( buffer , strLen , getChars () , STRING_CONSTANT ) ; }
Distance : 7

363
Tree	{ str . getChars ( strLen , getChars () , this ) ; }
Code	{ str . getChars ( strLen , getChars () , this ) ; }
Distance : 5

364
Tree	{ buffer . getChars ( str , getChars () , this ) ; }
Code	{ buffer . getChars ( str , getChars () , this ) ; }
Distance : 6

365
Tree	{ buffer . getChars ( buffer , getChars () , this ) ; }
Code	{ buffer . getChars ( buffer , getChars () , this ) ; }
Distance : 6

366
Tree	{ getChars ( str , str , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( str , str , getChars () , STRING_CONSTANT ) ; }
Distance : 7

367
Tree	{ getChars ( str , getChars () , return; ) ; }
Code	{ getChars ( str , getChars () , return; ) ; }
Distance : 7

368
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , strLen ) ; }
Distance : 2

369
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 2

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
{ return cAvailableLocaleSet . contains ( locale ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return availableLocaleList () . contains ( locale ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=cAvailableLocaleSet}) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=availableLocaleList}) (216{val=()})) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/57/parent/src_java_org_apache_commons_lang_LocaleUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 460
Wrong
========================================================================
False

0
Tree	{ return ( char ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( char ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

1
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

2
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

3
Tree	{ { ( locale ) ; return return; ; }
Code	{ { ( locale ) ; return return; ; }
Distance : 8

4
Tree	{ { ( locale ) ; return true ; }
Code	{ { ( locale ) ; return true ; }
Distance : 8

5
Tree	{ { ( locale ) ; return null ; }
Code	{ { ( locale ) ; return null ; }
Distance : 8

6
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

7
Tree	{ { ( locale ) ; return continue; ; }
Code	{ { ( locale ) ; return continue; ; }
Distance : 8

8
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

9
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Distance : 6

10
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

11
Tree	{ { ( locale ) ; return super(); ; }
Code	{ { ( locale ) ; return super(); ; }
Distance : 8

12
Tree	{ contains ( locale ) ; return null ; }
Code	{ contains ( locale ) ; return null ; }
Distance : 7

13
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) return; ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) return; ) ; }
Distance : 5

14
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Distance : 6

15
Tree	{ contains ( locale ) ; return true ; }
Code	{ contains ( locale ) ; return true ; }
Distance : 7

16
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

17
Tree	{ return locale . contains ( locale ) . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) . contains ( locale ) ; }
Distance : 6

18
Tree	{ return locale . locale ( locale ) ; }
Code	{ return locale . locale ( locale ) ; }
Distance : 3

19
Tree	{ return locale . contains ( new contains ( locale ) ) ; }
Code	{ return locale . contains ( new contains ( locale ) ) ; }
Distance : 6

20
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Distance : 6

21
Tree	{ return contains ( locale , cAvailableLocaleSet ) ; }
Code	{ return contains ( locale , cAvailableLocaleSet ) ; }
Distance : 5

22
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

23
Tree	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; }
Distance : 4

24
Tree	{ return cAvailableLocaleSet . contains ( locale , return ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , return ) ; }
Distance : 4

25
Tree	{ return locale . contains ( locale ) . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) . contains ( locale ) ; }
Distance : 6

26
Tree	{ return cAvailableLocaleSet . contains ( locale , { ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , { ) ; }
Distance : 4

27
Tree	{ return locale . contains ( locale , locale . contains () ) ; }
Code	{ return locale . contains ( locale , locale . contains () ) ; }
Distance : 7

28
Tree	{ return locale . contains ( locale , locale . contains () ) ; }
Code	{ return locale . contains ( locale , locale . contains () ) ; }
Distance : 7

29
Tree	{ return locale . contains ( locale ) . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) . contains ( locale ) ; }
Distance : 6

30
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Distance : 6

31
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Distance : 8

32
Tree	{ return locale . contains ( ( locale ) locale ) ; }
Code	{ return locale . contains ( ( locale ) locale ) ; }
Distance : 5

33
Tree	{ return locale . contains ( locale , locale . contains () ) ; }
Code	{ return locale . contains ( locale , locale . contains () ) ; }
Distance : 7

34
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

35
Tree	{ return locale . contains ( STRING_CONSTANT , locale ) ; }
Code	{ return locale . contains ( STRING_CONSTANT , locale ) ; }
Distance : 4

36
Tree	{ return locale . contains ( null ) ; }
Code	{ return locale . contains ( null ) ; }
Distance : 3

37
Tree	{ return new NumericEntityUnescaper ( locale ) ; }
Code	{ return new NumericEntityUnescaper ( locale ) ; }
Distance : 4

38
Tree	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

39
Tree	{ return new OctalUnescaper ( locale ) ; }
Code	{ return new OctalUnescaper ( locale ) ; }
Distance : 4

40
Tree	{ return new BasicThreadFactory ( locale ) ; }
Code	{ return new BasicThreadFactory ( locale ) ; }
Distance : 4

41
Tree	{ return ( void ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( void ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

42
Tree	{ return ModifyType.CEILING . contains ( locale ) ; }
Code	{ return ModifyType.CEILING . contains ( locale ) ; }
Distance : 2

43
Tree	{ return new contains ( locale ) ; }
Code	{ return new contains ( locale ) ; }
Distance : 3

44
Tree	{ return ( char ) contains ( locale ) ; }
Code	{ return ( char ) contains ( locale ) ; }
Distance : 3

45
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . contains ( locale ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . contains ( locale ) ; }
Distance : 2

46
Tree	{ return ( char ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( char ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

47
Tree	{ return null ; }
Code	{ return null ; }
Distance : 7

48
Tree	{ return contains () ; }
Code	{ return contains () ; }
Distance : 6

49
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 7

50
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

51
Tree	{ return new StringBuffer ( locale ) ; }
Code	{ return new StringBuffer ( locale ) ; }
Distance : 4

52
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

53
Tree	{ return ( void ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( void ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

54
Tree	{ return ( void ) contains ( locale ) ; }
Code	{ return ( void ) contains ( locale ) ; }
Distance : 3

55
Tree	{ return ( locale ) ) . contains () ; }
Code	{ return ( locale ) ) . contains () ; }
Distance : 7

56
Tree	{ return cAvailableLocaleSet . contains ( null ) ; }
Code	{ return cAvailableLocaleSet . contains ( null ) ; }
Distance : 3

57
Tree	{ return ( long ) contains ( locale . contains () , locale ) ; }
Code	{ return ( long ) contains ( locale . contains () , locale ) ; }
Distance : 8

58
Tree	{ contains ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ contains ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 7

59
Tree	{ return locale . contains ( locale ) . contains () ; }
Code	{ return locale . contains ( locale ) . contains () ; }
Distance : 5

60
Tree	{ return ( double ) contains ( locale . contains () , locale ) ; }
Code	{ return ( double ) contains ( locale . contains () , locale ) ; }
Distance : 8

61
Tree	{ return ( double ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( double ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

62
Tree	{ return ( locale ) locale . contains () ; }
Code	{ return ( locale ) locale . contains () ; }
Distance : 7

63
Tree	{ return ( float ) contains ( locale ) ; }
Code	{ return ( float ) contains ( locale ) ; }
Distance : 3

64
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

65
Tree	{ return ( float ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( float ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

66
Tree	{ return ( char ) contains ( locale . contains () , locale ) ; }
Code	{ return ( char ) contains ( locale . contains () , locale ) ; }
Distance : 8

67
Tree	{ return ( int ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( int ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

68
Tree	{ return ( byte ) contains ( locale ) ; }
Code	{ return ( byte ) contains ( locale ) ; }
Distance : 3

69
Tree	{ return ( short ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( short ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

70
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

71
Tree	{ contains ( locale ) ; return false ; }
Code	{ contains ( locale ) ; return false ; }
Distance : 7

72
Tree	{ return STRING_CONSTANT ; } buffer
Code	{ return STRING_CONSTANT ; } buffer
Distance : 8

73
Tree	{ return null ; } obj
Code	{ return null ; } obj
Distance : 8

74
Tree	{ return null ; } MutableInt
Code	{ return null ; } MutableInt
Distance : 8

75
Tree	{ return STRING_CONSTANT ; } toString
Code	{ return STRING_CONSTANT ; } toString
Distance : 8

76
Tree	{ return ( float ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( float ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

77
Tree	{ return ( int ) contains ( locale ) ; }
Code	{ return ( int ) contains ( locale ) ; }
Distance : 3

78
Tree	{ return contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale , locale . contains ( locale ) ) ; }
Distance : 6

79
Tree	{ return new INDEX_NOT_FOUND ( locale ) ; }
Code	{ return new INDEX_NOT_FOUND ( locale ) ; }
Distance : 4

80
Tree	{ return contains ( locale , locale ) ; }
Code	{ return contains ( locale , locale ) ; }
Distance : 5

81
Tree	{ return contains ( locale , cAvailableLocaleSet . contains ( locale ) ) ; }
Code	{ return contains ( locale , cAvailableLocaleSet . contains ( locale ) ) ; }
Distance : 6

82
Tree	{ return contains ( locale ) ; } isEquals
Code	{ return contains ( locale ) ; } isEquals
Distance : 4

83
Tree	{ return cAvailableLocaleSet . contains () . contains () ; }
Code	{ return cAvailableLocaleSet . contains () . contains () ; }
Distance : 6

84
Tree	{ return locale . contains ( new locale ( locale ) ) ; }
Code	{ return locale . contains ( new locale ( locale ) ) ; }
Distance : 6

85
Tree	{ return contains () ; } ex
Code	{ return contains () ; } ex
Distance : 7

86
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale.ENGLISH ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale.ENGLISH ) ; }
Distance : 7

87
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Distance : 7

88
Tree	{ return cAvailableLocaleSet . contains () . contains ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Distance : 4

89
Tree	{ return ( locale ) locale . contains () ; }
Code	{ return ( locale ) locale . contains () ; }
Distance : 7

90
Tree	{ return null ; } short
Code	{ return null ; } short
Distance : 8

91
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return super(); ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return super(); ; }
Distance : 6

92
Tree	{ return System.err . contains ( locale ) ; }
Code	{ return System.err . contains ( locale ) ; }
Distance : 2

93
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

94
Tree	{ return contains () ; } T
Code	{ return contains () ; } T
Distance : 7

95
Tree	{ locale . contains ( locale ) ; return null ; }
Code	{ locale . contains ( locale ) ; return null ; }
Distance : 6

96
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

97
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 8

98
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

99
Tree	{ return null ; } cs
Code	{ return null ; } cs
Distance : 8

100
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

101
Tree	{ return locale . contains ( return; ) ; }
Code	{ return locale . contains ( return; ) ; }
Distance : 3

102
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

103
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

104
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

105
Tree	{ contains ( locale ) ; return NUMBER_CONSTANT ; } cs
Code	{ contains ( locale ) ; return NUMBER_CONSTANT ; } cs
Distance : 8

106
Tree	{ return cAvailableLocaleSet . contains () . contains () ; } style
Code	{ return cAvailableLocaleSet . contains () . contains () ; } style
Distance : 7

107
Tree	{ return ( short ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( short ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

108
Tree	{ return ( short ) contains ( locale ) ; }
Code	{ return ( short ) contains ( locale ) ; }
Distance : 3

109
Tree	{ return ( void ) contains ( locale . contains () , locale ) ; }
Code	{ return ( void ) contains ( locale . contains () , locale ) ; }
Distance : 8

110
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

111
Tree	{ return contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale , locale . contains ( locale ) ) ; }
Distance : 6

112
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

113
Tree	{ return locale . contains ( ( locale ) ; ) ; }
Code	{ return locale . contains ( ( locale ) ; ) ; }
Distance : 5

114
Tree	{ return contains ( locale , locale ) ; }
Code	{ return contains ( locale , locale ) ; }
Distance : 5

115
Tree	{ return cAvailableLocaleSet . contains () . contains () ; } short
Code	{ return cAvailableLocaleSet . contains () . contains () ; } short
Distance : 7

116
Tree	{ contains ( locale ) ; return NUMBER_CONSTANT ; } obj
Code	{ contains ( locale ) ; return NUMBER_CONSTANT ; } obj
Distance : 8

117
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

118
Tree	{ return ( void ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( void ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

119
Tree	{ return contains ( locale , cAvailableLocaleSet ) ; }
Code	{ return contains ( locale , cAvailableLocaleSet ) ; }
Distance : 5

120
Tree	{ return ( locale ) ; . contains () ; }
Code	{ return ( locale ) ; . contains () ; }
Distance : 7

121
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

122
Tree	{ contains ( locale ) ; return NUMBER_CONSTANT ; } {}
Code	{ contains ( locale ) ; return NUMBER_CONSTANT ; } {}
Distance : 8

123
Tree	{ return ( locale ) ; . contains () ; }
Code	{ return ( locale ) ; . contains () ; }
Distance : 7

124
Tree	{ contains ( locale ) ; return NUMBER_CONSTANT ; } MutableInt
Code	{ contains ( locale ) ; return NUMBER_CONSTANT ; } MutableInt
Distance : 8

125
Tree	{ return contains () ; }
Code	{ return contains () ; }
Distance : 6

126
Tree	{ return ( double ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( double ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

127
Tree	{ return locale . locale ( locale ) ; }
Code	{ return locale . locale ( locale ) ; }
Distance : 3

128
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale.ROOT ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale.ROOT ) ; }
Distance : 7

129
Tree	{ return ( long ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( long ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

130
Tree	{ return cAvailableLocaleSet . contains () . locale () ; }
Code	{ return cAvailableLocaleSet . contains () . locale () ; }
Distance : 5

131
Tree	{ return ( byte ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( byte ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

132
Tree	{ return cAvailableLocaleSet . contains ( locale , StringUtils.EMPTY ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , StringUtils.EMPTY ) ; }
Distance : 4

133
Tree	{ return ( char ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( char ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

134
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

135
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

136
Tree	{ return ( locale ) locale . contains () ; }
Code	{ return ( locale ) locale . contains () ; }
Distance : 7

137
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Distance : 6

138
Tree	{ return ( char ) locale . contains ( locale ) ; }
Code	{ return ( char ) locale . contains ( locale ) ; }
Distance : 4

139
Tree	{ return locale . contains ( locale . contains ( locale ) ) ; }
Code	{ return locale . contains ( locale . contains ( locale ) ) ; }
Distance : 6

140
Tree	{ return ( double ) contains ( locale ) ; }
Code	{ return ( double ) contains ( locale ) ; }
Distance : 3

141
Tree	{ locale . contains ( locale ) ; return super(); ; }
Code	{ locale . contains ( locale ) ; return super(); ; }
Distance : 6

142
Tree	{ return contains ( locale , cAvailableLocaleSet . contains ( locale ) ) ; }
Code	{ return contains ( locale , cAvailableLocaleSet . contains ( locale ) ) ; }
Distance : 6

143
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

144
Tree	{ return locale . contains ( locale , StringUtils.EMPTY ) ; }
Code	{ return locale . contains ( locale , StringUtils.EMPTY ) ; }
Distance : 4

145
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

146
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

147
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

148
Tree	{ return contains ( locale , cAvailableLocaleSet ) ; }
Code	{ return contains ( locale , cAvailableLocaleSet ) ; }
Distance : 5

149
Tree	{ return contains ( locale , cAvailableLocaleSet . contains () ) ; }
Code	{ return contains ( locale , cAvailableLocaleSet . contains () ) ; }
Distance : 7

150
Tree	{ return ( boolean ) locale . contains ( locale ) ; }
Code	{ return ( boolean ) locale . contains ( locale ) ; }
Distance : 4

151
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Distance : 6

152
Tree	{ return ( char ) contains ( locale . contains () , { ) ; }
Code	{ return ( char ) contains ( locale . contains () , { ) ; }
Distance : 8

153
Tree	{ return locale . contains ( new locale ( locale ) ) ; }
Code	{ return locale . contains ( new locale ( locale ) ) ; }
Distance : 6

154
Tree	{ return locale . contains () . ( () ; }
Code	{ return locale . contains () . ( () ; }
Distance : 6

155
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

156
Tree	{ { ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ { ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 8

157
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } style
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } style
Distance : 3

158
Tree	{ return cAvailableLocaleSet . contains () . contains () ; }
Code	{ return cAvailableLocaleSet . contains () . contains () ; }
Distance : 6

159
Tree	{ return new indexOf ( locale ) ; }
Code	{ return new indexOf ( locale ) ; }
Distance : 4

160
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

161
Tree	{ return cAvailableLocaleSet ; } !=
Code	{ return cAvailableLocaleSet ; } !=
Distance : 8

162
Tree	{ return cAvailableLocaleSet . contains () . contains ( TimeZones.GMT_ID ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( TimeZones.GMT_ID ) ; }
Distance : 4

163
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

164
Tree	{ { ( locale ) ; return null ; }
Code	{ { ( locale ) ; return null ; }
Distance : 8

165
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Distance : 8

166
Tree	{ return contains () ; } !=
Code	{ return contains () ; } !=
Distance : 7

167
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

168
Tree	{ return ( boolean ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( boolean ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

169
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

170
Tree	{ return locale . contains () . contains ( deepEmpty ) ; }
Code	{ return locale . contains () . contains ( deepEmpty ) ; }
Distance : 4

171
Tree	{ return cAvailableLocaleSet . contains ( locale , Byte.TYPE ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , Byte.TYPE ) ; }
Distance : 4

172
Tree	{ return cAvailableLocaleSet . contains ( continue; ) ; }
Code	{ return cAvailableLocaleSet . contains ( continue; ) ; }
Distance : 3

173
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

174
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Distance : 6

175
Tree	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Distance : 4

176
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

177
Tree	{ return locale . contains () . contains () ; }
Code	{ return locale . contains () . contains () ; }
Distance : 6

178
Tree	{ return cAvailableLocaleSet ; } ]
Code	{ return cAvailableLocaleSet ; } ]
Distance : 8

179
Tree	{ return locale . contains ( locale , Integer.MIN_VALUE ) ; }
Code	{ return locale . contains ( locale , Integer.MIN_VALUE ) ; }
Distance : 4

180
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) ; ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) ; ) ; }
Distance : 5

181
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

182
Tree	{ return ( int ) contains ( locale . contains () , locale ) ; }
Code	{ return ( int ) contains ( locale . contains () , locale ) ; }
Distance : 8

183
Tree	{ return locale . contains ( locale , false ) ; }
Code	{ return locale . contains ( locale , false ) ; }
Distance : 4

184
Tree	{ return cAvailableLocaleSet . contains () . contains ( Locale.ROOT ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( Locale.ROOT ) ; }
Distance : 4

185
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

186
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } style
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } style
Distance : 3

187
Tree	{ return cAvailableLocaleSet . contains ( return; ) ; }
Code	{ return cAvailableLocaleSet . contains ( return; ) ; }
Distance : 3

188
Tree	{ return locale . contains ( ( locale ) super(); ) ; }
Code	{ return locale . contains ( ( locale ) super(); ) ; }
Distance : 5

189
Tree	{ contains ( locale ) ; return false ; }
Code	{ contains ( locale ) ; return false ; }
Distance : 7

190
Tree	{ return locale . contains ( locale ) . contains () ; }
Code	{ return locale . contains ( locale ) . contains () ; }
Distance : 5

191
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

192
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

193
Tree	{ return locale . contains ( ( locale ) null ) ; }
Code	{ return locale . contains ( ( locale ) null ) ; }
Distance : 5

194
Tree	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Distance : 4

195
Tree	{ return locale . contains ( STRING_CONSTANT , locale ) ; }
Code	{ return locale . contains ( STRING_CONSTANT , locale ) ; }
Distance : 4

196
Tree	{ return cAvailableLocaleSet ; } ex
Code	{ return cAvailableLocaleSet ; } ex
Distance : 8

197
Tree	{ return contains ( locale , locale ) ; } short
Code	{ return contains ( locale , locale ) ; } short
Distance : 6

198
Tree	{ return ( boolean ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( boolean ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

199
Tree	{ return STRING_CONSTANT ; } StringUtils
Code	{ return STRING_CONSTANT ; } StringUtils
Distance : 8

200
Tree	{ return locale . contains ( STRING_CONSTANT , cAvailableLocaleSet ) ; }
Code	{ return locale . contains ( STRING_CONSTANT , cAvailableLocaleSet ) ; }
Distance : 5

201
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

202
Tree	{ return locale . contains () . contains () ; }
Code	{ return locale . contains () . contains () ; }
Distance : 6

203
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

204
Tree	{ return ( locale ) ) . contains () ; }
Code	{ return ( locale ) ) . contains () ; }
Distance : 7

205
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

206
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

207
Tree	{ return locale . contains ( locale , locale ) ; }
Code	{ return locale . contains ( locale , locale ) ; }
Distance : 4

208
Tree	{ return locale . contains ( locale , false ) ; }
Code	{ return locale . contains ( locale , false ) ; }
Distance : 4

209
Tree	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; } short
Code	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; } short
Distance : 5

210
Tree	{ return cAvailableLocaleSet ; }
Code	{ return cAvailableLocaleSet ; }
Distance : 7

211
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } short
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } short
Distance : 3

212
Tree	{ return ( boolean ) contains ( locale . contains () , locale ) ; }
Code	{ return ( boolean ) contains ( locale . contains () , locale ) ; }
Distance : 8

213
Tree	{ return contains ( locale ) ; } cs
Code	{ return contains ( locale ) ; } cs
Distance : 4

214
Tree	{ { ( locale ) ; return true ; }
Code	{ { ( locale ) ; return true ; }
Distance : 8

215
Tree	{ return contains ( locale , cAvailableLocaleSet . contains () ) ; }
Code	{ return contains ( locale , cAvailableLocaleSet . contains () ) ; }
Distance : 7

216
Tree	{ return locale . contains () . contains ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Code	{ return locale . contains () . contains ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Distance : 4

217
Tree	{ return cAvailableLocaleSet . contains () ; } MutableInt
Code	{ return cAvailableLocaleSet . contains () ; } MutableInt
Distance : 6

218
Tree	{ return contains ( locale , locale ) ; } style
Code	{ return contains ( locale , locale ) ; } style
Distance : 6

219
Tree	{ return STRING_CONSTANT ; } !=
Code	{ return STRING_CONSTANT ; } !=
Distance : 8

220
Tree	{ return cAvailableLocaleSet ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet ( locale . contains ( locale ) ) ; }
Distance : 4

221
Tree	{ return ( void ) locale . contains ( locale ) ; }
Code	{ return ( void ) locale . contains ( locale ) ; }
Distance : 4

222
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

223
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

224
Tree	{ return locale . contains () ; }
Code	{ return locale . contains () ; }
Distance : 5

225
Tree	{ contains ( locale ) ; return return; ; }
Code	{ contains ( locale ) ; return return; ; }
Distance : 7

226
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

227
Tree	{ locale . contains ( locale ) ; return true ; }
Code	{ locale . contains ( locale ) ; return true ; }
Distance : 6

228
Tree	{ return locale . contains ( ( locale ) locale ) ; }
Code	{ return locale . contains ( ( locale ) locale ) ; }
Distance : 5

229
Tree	{ return locale . contains ( new locale ( locale , false ) ) ; }
Code	{ return locale . contains ( new locale ( locale , false ) ) ; }
Distance : 8

230
Tree	{ return locale . contains ( locale , locale ) ; }
Code	{ return locale . contains ( locale , locale ) ; }
Distance : 4

231
Tree	{ locale . contains ( locale ) ; return true ; }
Code	{ locale . contains ( locale ) ; return true ; }
Distance : 6

232
Tree	{ return contains () ; } Calendar
Code	{ return contains () ; } Calendar
Distance : 7

233
Tree	{ return cAvailableLocaleSet . contains () . contains ( StringUtils.EMPTY ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( StringUtils.EMPTY ) ; }
Distance : 4

234
Tree	{ return contains ( locale , contains . contains ( locale ) ) ; }
Code	{ return contains ( locale , contains . contains ( locale ) ) ; }
Distance : 6

235
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

236
Tree	{ return STRING_CONSTANT ; } mutNum
Code	{ return STRING_CONSTANT ; } mutNum
Distance : 8

237
Tree	{ locale . contains ( locale ) ; return false ; }
Code	{ locale . contains ( locale ) ; return false ; }
Distance : 6

238
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) continue; ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) continue; ) ; }
Distance : 5

239
Tree	{ { ( locale ) ; return false ; }
Code	{ { ( locale ) ; return false ; }
Distance : 8

240
Tree	{ return locale . contains ( new locale ( locale , false ) ) ; }
Code	{ return locale . contains ( new locale ( locale , false ) ) ; }
Distance : 8

241
Tree	{ return contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale , locale . contains ( locale ) ) ; }
Distance : 6

242
Tree	{ return locale ; }
Code	{ return locale ; }
Distance : 6

243
Tree	{ return locale . contains () . contains ( Locale.ROOT ) ; }
Code	{ return locale . contains () . contains ( Locale.ROOT ) ; }
Distance : 4

244
Tree	{ return ( int ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( int ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

245
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( StringUtils.EMPTY ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( StringUtils.EMPTY ) ; }
Distance : 7

246
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

247
Tree	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Distance : 7

248
Tree	{ return cAvailableLocaleSet ; } CharSequence
Code	{ return cAvailableLocaleSet ; } CharSequence
Distance : 8

249
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

250
Tree	{ return cAvailableLocaleSet ; } toString
Code	{ return cAvailableLocaleSet ; } toString
Distance : 8

251
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

252
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

253
Tree	{ return new smallestIndexOfDiff ( locale ) ; }
Code	{ return new smallestIndexOfDiff ( locale ) ; }
Distance : 4

254
Tree	{ return locale . contains ( locale ) . contains () ; }
Code	{ return locale . contains ( locale ) . contains () ; }
Distance : 5

255
Tree	{ return ( boolean ) contains ( locale ) ; }
Code	{ return ( boolean ) contains ( locale ) ; }
Distance : 3

256
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 7

257
Tree	{ return locale . contains () . contains ( StringUtils.EMPTY ) ; }
Code	{ return locale . contains () . contains ( StringUtils.EMPTY ) ; }
Distance : 4

258
Tree	{ locale . contains ( locale ) ; return null ; }
Code	{ locale . contains ( locale ) ; return null ; }
Distance : 6

259
Tree	{ return STRING_CONSTANT ; } Date
Code	{ return STRING_CONSTANT ; } Date
Distance : 8

260
Tree	{ return ( locale ) contains ( locale ) ; } short
Code	{ return ( locale ) contains ( locale ) ; } short
Distance : 4

261
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

262
Tree	{ return cAvailableLocaleSet ; } Calendar
Code	{ return cAvailableLocaleSet ; } Calendar
Distance : 8

263
Tree	{ return contains ( locale , locale ) ; }
Code	{ return contains ( locale , locale ) ; }
Distance : 5

264
Tree	{ contains ( locale ) ; return true ; } style
Code	{ contains ( locale ) ; return true ; } style
Distance : 8

265
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

266
Tree	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; } style
Code	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; } style
Distance : 5

267
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

268
Tree	{ return ( locale ) ) . contains ( locale ) ; }
Code	{ return ( locale ) ) . contains ( locale ) ; }
Distance : 4

269
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

270
Tree	{ contains ( locale ) ; return true ; } short
Code	{ contains ( locale ) ; return true ; } short
Distance : 8

271
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Distance : 6

272
Tree	{ return ( locale ) locale . contains () ; } style
Code	{ return ( locale ) locale . contains () ; } style
Distance : 8

273
Tree	{ return locale . contains ( ( locale ) ) ) ; }
Code	{ return locale . contains ( ( locale ) ) ) ; }
Distance : 5

274
Tree	{ return locale . contains ( locale , contains . contains () ) ; }
Code	{ return locale . contains ( locale , contains . contains () ) ; }
Distance : 7

275
Tree	{ contains ( locale ) ; return NUMBER_CONSTANT ; } isEquals
Code	{ contains ( locale ) ; return NUMBER_CONSTANT ; } isEquals
Distance : 8

276
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

277
Tree	{ contains ( locale ) ; return NUMBER_CONSTANT ; } byte
Code	{ contains ( locale ) ; return NUMBER_CONSTANT ; } byte
Distance : 8

278
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

279
Tree	{ return ( double ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( double ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

280
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Distance : 6

281
Tree	{ return ( long ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( long ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

282
Tree	{ return ( locale ) locale . contains () ; }
Code	{ return ( locale ) locale . contains () ; }
Distance : 7

283
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Distance : 6

284
Tree	{ return this . locale . contains ( locale ) ; } short
Code	{ return this . locale . contains ( locale ) ; } short
Distance : 4

285
Tree	{ { ( locale ) ; return false ; }
Code	{ { ( locale ) ; return false ; }
Distance : 8

286
Tree	{ return cAvailableLocaleSet ; } pattern
Code	{ return cAvailableLocaleSet ; } pattern
Distance : 8

287
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Distance : 8

288
Tree	{ return locale . contains ( continue; ) ; }
Code	{ return locale . contains ( continue; ) ; }
Distance : 3

289
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

290
Tree	{ { ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ { ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 8

291
Tree	{ return null ; } -
Code	{ return null ; } -
Distance : 8

292
Tree	{ return new UnsupportedOperationException ( locale ) ; }
Code	{ return new UnsupportedOperationException ( locale ) ; }
Distance : 4

293
Tree	{ return ( boolean ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( boolean ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

294
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

295
Tree	{ return cloneReset . contains ( locale ) ; }
Code	{ return cloneReset . contains ( locale ) ; }
Distance : 2

296
Tree	{ return this . locale . contains ( locale ) ; } style
Code	{ return this . locale . contains ( locale ) ; } style
Distance : 4

297
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

298
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } short
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } short
Distance : 3

299
Tree	{ return StringUtils.EMPTY . contains ( locale ) ; }
Code	{ return StringUtils.EMPTY . contains ( locale ) ; }
Distance : 2

300
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

301
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

302
Tree	{ return locale . contains ( ( locale ) continue; ) ; }
Code	{ return locale . contains ( ( locale ) continue; ) ; }
Distance : 5

303
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

304
Tree	{ return locale . contains ( new locale ( locale , true ) ) ; }
Code	{ return locale . contains ( new locale ( locale , true ) ) ; }
Distance : 8

305
Tree	{ return locale . contains ( locale , locale . contains () ) ; }
Code	{ return locale . contains ( locale , locale . contains () ) ; }
Distance : 7

306
Tree	{ return locale . contains ( locale . contains ( locale ) ) ; }
Code	{ return locale . contains ( locale . contains ( locale ) ) ; }
Distance : 6

307
Tree	{ return ArrayUtils.EMPTY_STRING_ARRAY . contains ( locale ) ; }
Code	{ return ArrayUtils.EMPTY_STRING_ARRAY . contains ( locale ) ; }
Distance : 2

308
Tree	{ return locale . contains ( new locale ( locale , false ) ) ; }
Code	{ return locale . contains ( new locale ( locale , false ) ) ; }
Distance : 8

309
Tree	{ return UnescapeUtils.UNESCAPE_ECMASCRIPT . contains ( locale ) ; }
Code	{ return UnescapeUtils.UNESCAPE_ECMASCRIPT . contains ( locale ) ; }
Distance : 2

310
Tree	{ return locale . contains ( locale ) . contains () ; }
Code	{ return locale . contains ( locale ) . contains () ; }
Distance : 5

311
Tree	{ return contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale , locale . contains ( locale ) ) ; }
Distance : 6

312
Tree	{ return locale . contains ( locale . contains ( locale ) ) ; }
Code	{ return locale . contains ( locale . contains ( locale ) ) ; }
Distance : 6

313
Tree	{ return locale . contains ( locale . contains ( locale ) ) ; }
Code	{ return locale . contains ( locale . contains ( locale ) ) ; }
Distance : 6

314
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

315
Tree	{ return cAvailableLocaleSet . contains () ; }
Code	{ return cAvailableLocaleSet . contains () ; }
Distance : 5

316
Tree	{ return cAvailableLocaleSet . contains ( locale , { ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , { ) ; }
Distance : 4

317
Tree	{ return contains ( locale , cAvailableLocaleSet . contains ( locale ) ) ; }
Code	{ return contains ( locale , cAvailableLocaleSet . contains ( locale ) ) ; }
Distance : 6

318
Tree	{ return locale . contains ( locale ) . contains ( StringUtils.EMPTY ) ; }
Code	{ return locale . contains ( locale ) . contains ( StringUtils.EMPTY ) ; }
Distance : 7

319
Tree	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; }
Distance : 4

320
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

321
Tree	{ return ( locale ) locale . contains () ; } short
Code	{ return ( locale ) locale . contains () ; } short
Distance : 8

322
Tree	{ return locale . contains ( locale , cAvailableLocaleSet ) ; }
Code	{ return locale . contains ( locale , cAvailableLocaleSet ) ; }
Distance : 4

323
Tree	{ return locale . contains ( STRING_CONSTANT , locale ) ; }
Code	{ return locale . contains ( STRING_CONSTANT , locale ) ; }
Distance : 4

324
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

325
Tree	{ return ( locale ) contains ( locale ) ; } style
Code	{ return ( locale ) contains ( locale ) ; } style
Distance : 4

326
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

327
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

328
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

329
Tree	{ return ( locale ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( locale ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

330
Tree	{ return contains ( locale , contains ) ; }
Code	{ return contains ( locale , contains ) ; }
Distance : 5

331
Tree	{ return contains ( locale , cAvailableLocaleSet . contains ( locale ) ) ; }
Code	{ return contains ( locale , cAvailableLocaleSet . contains ( locale ) ) ; }
Distance : 6

332
Tree	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , cAvailableLocaleSet ) ; }
Code	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , cAvailableLocaleSet ) ; }
Distance : 5

333
Tree	{ return ( long ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( long ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

334
Tree	{ return locale . contains ( super(); ) ; }
Code	{ return locale . contains ( super(); ) ; }
Distance : 3

335
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

336
Tree	{ return isJavaVersionMatch . contains ( locale ) ; }
Code	{ return isJavaVersionMatch . contains ( locale ) ; }
Distance : 2

337
Tree	{ return locale . contains ( locale , Boolean.TYPE ) ; }
Code	{ return locale . contains ( locale , Boolean.TYPE ) ; }
Distance : 4

338
Tree	{ return locale . contains ( ( locale ) locale ) ; }
Code	{ return locale . contains ( ( locale ) locale ) ; }
Distance : 5

339
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

340
Tree	{ return cAvailableLocaleSet . contains ( locale , Boolean.TYPE ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , Boolean.TYPE ) ; }
Distance : 4

341
Tree	{ return cAvailableLocaleSet . contains () ; }
Code	{ return cAvailableLocaleSet . contains () ; }
Distance : 5

342
Tree	{ return locale . contains ( locale , false ) ; }
Code	{ return locale . contains ( locale , false ) ; }
Distance : 4

343
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

344
Tree	{ return cAvailableLocaleSet ; } T
Code	{ return cAvailableLocaleSet ; } T
Distance : 8

345
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) ) ) ; }
Distance : 5

346
Tree	{ return cAvailableLocaleSet . contains ( super(); ) ; }
Code	{ return cAvailableLocaleSet . contains ( super(); ) ; }
Distance : 3

347
Tree	{ return cAvailableLocaleSet . contains ( locale , return . contains () ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , return . contains () ) ; }
Distance : 7

348
Tree	{ return locale . contains ( locale ) . contains ( CharUtils.NUL ) ; }
Code	{ return locale . contains ( locale ) . contains ( CharUtils.NUL ) ; }
Distance : 7

349
Tree	{ return new ExtendedMessageFormat ( locale ) ; }
Code	{ return new ExtendedMessageFormat ( locale ) ; }
Distance : 4

350
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) null ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) null ) ; }
Distance : 5

351
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

352
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

353
Tree	{ return ( byte ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( byte ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

354
Tree	{ return ( long ) contains ( locale ) ; }
Code	{ return ( long ) contains ( locale ) ; }
Distance : 3

355
Tree	{ return ( float ) contains ( locale . contains () , locale ) ; }
Code	{ return ( float ) contains ( locale . contains () , locale ) ; }
Distance : 8

356
Tree	{ locale . contains ( locale ) ; return false ; }
Code	{ locale . contains ( locale ) ; return false ; }
Distance : 6

357
Tree	{ return entry.map . contains ( locale ) ; }
Code	{ return entry.map . contains ( locale ) ; }
Distance : 2

358
Tree	{ return ( char ) contains ( locale ) ; }
Code	{ return ( char ) contains ( locale ) ; }
Distance : 3

359
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return continue; ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return continue; ; }
Distance : 6

360
Tree	{ return ( char ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( char ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

361
Tree	{ return locale . contains ( locale . contains ( locale ) ) ; }
Code	{ return locale . contains ( locale . contains ( locale ) ) ; }
Distance : 6

362
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

363
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 7

364
Tree	{ return locale . contains ( new locale ( locale , false ) ) ; }
Code	{ return locale . contains ( new locale ( locale , false ) ) ; }
Distance : 8

365
Tree	{ return ( short ) contains ( locale . contains () , locale ) ; }
Code	{ return ( short ) contains ( locale . contains () , locale ) ; }
Distance : 8

366
Tree	{ return ( byte ) contains ( locale . contains () , locale ) ; }
Code	{ return ( byte ) contains ( locale . contains () , locale ) ; }
Distance : 8

367
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

368
Tree	{ return return ; }
Code	{ return return ; }
Distance : 7

369
Tree	{ return ( char ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( char ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

370
Tree	{ return contains () ; } CharSequence
Code	{ return contains () ; } CharSequence
Distance : 7

371
Tree	{ return locale . contains () ; }
Code	{ return locale . contains () ; }
Distance : 5

372
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return return; ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return return; ; }
Distance : 6

373
Tree	{ return locale . contains ( new locale ( locale ) ) ; }
Code	{ return locale . contains ( new locale ( locale ) ) ; }
Distance : 6

374
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

375
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

376
Tree	{ return cAvailableLocaleSet . contains () . contains () ; }
Code	{ return cAvailableLocaleSet . contains () . contains () ; }
Distance : 6

377
Tree	{ contains ( locale ) ; return continue; ; }
Code	{ contains ( locale ) ; return continue; ; }
Distance : 7

378
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

379
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

380
Tree	{ return locale . contains () . contains () ; }
Code	{ return locale . contains () . contains () ; }
Distance : 6

381
Tree	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Distance : 7

382
Tree	{ return ( locale ) ) . contains ( locale ) ; }
Code	{ return ( locale ) ) . contains ( locale ) ; }
Distance : 4

383
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

384
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

385
Tree	{ return checkFactoryDefaults . contains ( locale ) ; }
Code	{ return checkFactoryDefaults . contains ( locale ) ; }
Distance : 2

386
Tree	{ return ( locale ) ) . contains ( locale ) ; }
Code	{ return ( locale ) ) . contains ( locale ) ; }
Distance : 4

387
Tree	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , cAvailableLocaleSet ) ; }
Code	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , cAvailableLocaleSet ) ; }
Distance : 5

388
Tree	{ return contains () ; } toString
Code	{ return contains () ; } toString
Distance : 7

389
Tree	{ return cAvailableLocaleSet . locale ( locale ) ; }
Code	{ return cAvailableLocaleSet . locale ( locale ) ; }
Distance : 3

390
Tree	{ return locale . contains ( null ) ; }
Code	{ return locale . contains ( null ) ; }
Distance : 3

391
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

392
Tree	{ return cAvailableLocaleSet . contains ( null ) ; }
Code	{ return cAvailableLocaleSet . contains ( null ) ; }
Distance : 3

393
Tree	{ return STRING_CONSTANT ; } ex
Code	{ return STRING_CONSTANT ; } ex
Distance : 8

394
Tree	{ return locale . contains ( ( locale ) null ) ; }
Code	{ return locale . contains ( ( locale ) null ) ; }
Distance : 5

395
Tree	{ return cAvailableLocaleSet . contains ( locale , JavaVersion.JAVA_1_5 ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , JavaVersion.JAVA_1_5 ) ; }
Distance : 4

396
Tree	{ return contains () ; } pattern
Code	{ return contains () ; } pattern
Distance : 7

397
Tree	{ contains ( locale ) ; return null ; }
Code	{ contains ( locale ) ; return null ; }
Distance : 7

398
Tree	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Distance : 4

399
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

400
Tree	{ return STRING_CONSTANT ; } length
Code	{ return STRING_CONSTANT ; } length
Distance : 8

401
Tree	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Distance : 7

402
Tree	{ return contains ( locale , cAvailableLocaleSet . contains () ) ; }
Code	{ return contains ( locale , cAvailableLocaleSet . contains () ) ; }
Distance : 7

403
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

404
Tree	{ return ( byte ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( byte ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

405
Tree	{ return cAvailableLocaleSet . contains () ; } obj
Code	{ return cAvailableLocaleSet . contains () ; } obj
Distance : 6

406
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 7

407
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } short
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } short
Distance : 3

408
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

409
Tree	{ contains ( locale ) ; return true ; }
Code	{ contains ( locale ) ; return true ; }
Distance : 7

410
Tree	{ return locale . contains ( locale , locale ) ; }
Code	{ return locale . contains ( locale , locale ) ; }
Distance : 4

411
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

412
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } style
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } style
Distance : 3

413
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

414
Tree	{ return locale . contains ( new { ( locale ) ) ; }
Code	{ return locale . contains ( new { ( locale ) ) ; }
Distance : 6

415
Tree	{ locale . contains ( locale ) ; return null ; }
Code	{ locale . contains ( locale ) ; return null ; }
Distance : 6

416
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

417
Tree	{ return cAvailableLocaleSet . contains () ; } {}
Code	{ return cAvailableLocaleSet . contains () ; } {}
Distance : 6

418
Tree	{ return locale . contains ( ( locale ) return; ) ; }
Code	{ return locale . contains ( ( locale ) return; ) ; }
Distance : 5

419
Tree	{ return locale . contains ( locale , true ) ; }
Code	{ return locale . contains ( locale , true ) ; }
Distance : 4

420
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

421
Tree	{ return cAvailableLocaleSet . contains () ; } isEquals
Code	{ return cAvailableLocaleSet . contains () ; } isEquals
Distance : 6

422
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

423
Tree	{ return contains () ; } ]
Code	{ return contains () ; } ]
Distance : 7

424
Tree	{ contains ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ contains ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 7

425
Tree	{ return cAvailableLocaleSet . contains () . contains ( deepEmpty ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( deepEmpty ) ; }
Distance : 4

426
Tree	{ return locale . contains ( locale ) . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) . contains ( locale ) ; }
Distance : 6

427
Tree	{ return cAvailableLocaleSet . contains () ; } cs
Code	{ return cAvailableLocaleSet . contains () ; } cs
Distance : 6

428
Tree	{ return cAvailableLocaleSet . contains ( locale , Integer.MIN_VALUE ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , Integer.MIN_VALUE ) ; }
Distance : 4

429
Tree	{ return cAvailableLocaleSet . contains () . contains ( CharUtils.NUL ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( CharUtils.NUL ) ; }
Distance : 4

430
Tree	{ return cAvailableLocaleSet . contains () ; } byte
Code	{ return cAvailableLocaleSet . contains () ; } byte
Distance : 6

431
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( CharUtils.NUL ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( CharUtils.NUL ) ; }
Distance : 7

432
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale , true ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale , true ) ) ; }
Distance : 8

433
Tree	{ return locale . contains ( locale , JavaVersion.JAVA_1_5 ) ; }
Code	{ return locale . contains ( locale , JavaVersion.JAVA_1_5 ) ; }
Distance : 4

434
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

435
Tree	{ return locale . contains ( locale ) . contains ( Locale.ENGLISH ) ; }
Code	{ return locale . contains ( locale ) . contains ( Locale.ENGLISH ) ; }
Distance : 7

436
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

437
Tree	{ return locale . contains ( locale ) . contains ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Code	{ return locale . contains ( locale ) . contains ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Distance : 7

438
Tree	{ return contains ( locale ) ; } obj
Code	{ return contains ( locale ) ; } obj
Distance : 4

439
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

440
Tree	{ return contains ( locale , { . contains () ) ; }
Code	{ return contains ( locale , { . contains () ) ; }
Distance : 7

441
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

442
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) super(); ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) super(); ) ; }
Distance : 5

443
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Distance : 8

444
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Distance : 6

445
Tree	{ return contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale , locale . contains ( locale ) ) ; }
Distance : 6

446
Tree	{ contains ( locale ) ; return super(); ; }
Code	{ contains ( locale ) ; return super(); ; }
Distance : 7

447
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

448
Tree	{ return contains ( locale ) ; } {}
Code	{ return contains ( locale ) ; } {}
Distance : 4

449
Tree	{ return locale . contains ( locale ) . contains ( Locale.ROOT ) ; }
Code	{ return locale . contains ( locale ) . contains ( Locale.ROOT ) ; }
Distance : 7

450
Tree	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Distance : 7

451
Tree	{ return cAvailableLocaleSet . contains ( locale , typeArguments.length ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , typeArguments.length ) ; }
Distance : 4

452
Tree	{ return contains ( locale , locale ) ; }
Code	{ return contains ( locale , locale ) ; }
Distance : 5

453
Tree	{ return locale . contains ( locale ) . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) . contains ( locale ) ; }
Distance : 6

454
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) null ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) null ) ; }
Distance : 5

455
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

456
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

457
Tree	{ return cAvailableLocaleSet . locale ( locale ) ; }
Code	{ return cAvailableLocaleSet . locale ( locale ) ; }
Distance : 3

458
Tree	{ return contains ( locale ) ; } byte
Code	{ return contains ( locale ) ; } byte
Distance : 4

459
Tree	{ return contains ( locale ) ; } MutableInt
Code	{ return contains ( locale ) ; } MutableInt
Distance : 4

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
{ escapeJavaStyleString ( out , str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 460
Wrong
========================================================================
False

0
Tree	{ out . out ( str , out ) ; }
Code	{ out . out ( str , out ) ; }
Distance : 6

1
Tree	{ out . out ( str , new Date ( str ) ) ; }
Code	{ out . out ( str , new Date ( str ) ) ; }
Distance : 8

2
Tree	{ escapeJavaStyleString ( out , out , Integer.MAX_VALUE ) ; }
Code	{ escapeJavaStyleString ( out , out , Integer.MAX_VALUE ) ; }
Distance : 4

3
Tree	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Distance : 8

4
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 9

5
Tree	{ str . str ( str , out ) ; }
Code	{ str . str ( str , out ) ; }
Distance : 7

6
Tree	{ out . escapeJavaStyleString ( this . out , str , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this . out , str , out , str ) ; }
Distance : 6

7
Tree	{ out . out ( out , out ) ; }
Code	{ out . out ( out , out ) ; }
Distance : 7

8
Tree	{ out . out ( str , new ObjectInputStream ( str ) ) ; }
Code	{ out . out ( str , new ObjectInputStream ( str ) ) ; }
Distance : 8

9
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } toString
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } toString
Distance : 6

10
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } Calendar
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } Calendar
Distance : 6

11
Tree	{ escapeJavaStyleString ( out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , str , str ) ; }
Distance : 3

12
Tree	{ out . escapeJavaStyleString ( new UnhandledException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new UnhandledException ( str , out ) ) ; }
Distance : 8

13
Tree	{ escapeJavaStyleString ( out , out , TimeUnit.MINUTES ) ; }
Code	{ escapeJavaStyleString ( out , out , TimeUnit.MINUTES ) ; }
Distance : 4

14
Tree	{ escapeJavaStyleString ( out , out , EscapeUtils.ESCAPE_ECMASCRIPT ) ; }
Code	{ escapeJavaStyleString ( out , out , EscapeUtils.ESCAPE_ECMASCRIPT ) ; }
Distance : 4

15
Tree	{ escapeJavaStyleString ( out , out , Float.MIN_VALUE ) ; }
Code	{ escapeJavaStyleString ( out , out , Float.MIN_VALUE ) ; }
Distance : 4

16
Tree	{ escapeJavaStyleString ( out , out , ModifyType.ROUND ) ; }
Code	{ escapeJavaStyleString ( out , out , ModifyType.ROUND ) ; }
Distance : 4

17
Tree	{ escapeJavaStyleString ( out , out , TimeUnit.HOURS ) ; }
Code	{ escapeJavaStyleString ( out , out , TimeUnit.HOURS ) ; }
Distance : 4

18
Tree	{ out . escapeJavaStyleString ( str ) ; }
Code	{ out . escapeJavaStyleString ( str ) ; }
Distance : 8

19
Tree	{ this . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : tx.amount ) ; }
Code	{ this . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : tx.amount ) ; }
Distance : 8

20
Tree	{ out . out ( str , new delta ( str ) ) ; }
Code	{ out . out ( str , new delta ( str ) ) ; }
Distance : 8

21
Tree	{ escapeJavaStyleString ( out , out ) ; } MutableInt
Code	{ escapeJavaStyleString ( out , out ) ; } MutableInt
Distance : 6

22
Tree	{ escapeJavaStyleString ( out , out ) ; } {}
Code	{ escapeJavaStyleString ( out , out ) ; } {}
Distance : 6

23
Tree	{ escapeJavaStyleString ( out , out ) ; } obj
Code	{ escapeJavaStyleString ( out , out ) ; } obj
Distance : 6

24
Tree	{ escapeJavaStyleString ( str , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 9

25
Tree	{ out . escapeJavaStyleString ( out , return; , out ) ; }
Code	{ out . escapeJavaStyleString ( out , return; , out ) ; }
Distance : 6

26
Tree	{ out . escapeJavaStyleString ( str , out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , str , this ) ; }
Distance : 6

27
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } MutableInt
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } MutableInt
Distance : 5

28
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

29
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , str ) ; }
Distance : 3

30
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

31
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Distance : 7

32
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 4

33
Tree	{ str . escapeJavaStyleString ( out , out , out , this ) ; }
Code	{ str . escapeJavaStyleString ( out , out , out , this ) ; }
Distance : 5

34
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 5

35
Tree	{ escapeJavaStyleString ( out , null , out ) ; }
Code	{ escapeJavaStyleString ( out , null , out ) ; }
Distance : 4

36
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

37
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

38
Tree	{ escapeJavaStyleString ( str , out , str , str ) ; }
Code	{ escapeJavaStyleString ( str , out , str , str ) ; }
Distance : 4

39
Tree	{ escapeJavaStyleString ( out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , str , true ) ; }
Distance : 2

40
Tree	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( out ) , null ) ; }
Distance : 8

41
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Distance : 4

42
Tree	{ escapeJavaStyleString ( out , str , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , str , out ) ; }
Distance : 2

43
Tree	{ out . escapeJavaStyleString ( str , str , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , str , out , this ) ; }
Distance : 5

44
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , out ) ; }
Distance : 3

45
Tree	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 8

46
Tree	{ out . escapeJavaStyleString ( return; , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( return; , out , out , out ) ; }
Distance : 6

47
Tree	{ out . escapeJavaStyleString ( new HashSet ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new HashSet ( str , out ) ) ; }
Distance : 8

48
Tree	{ escapeJavaStyleString ( out , out , TimeUnit.MILLISECONDS ) ; }
Code	{ escapeJavaStyleString ( out , out , TimeUnit.MILLISECONDS ) ; }
Distance : 4

49
Tree	{ out () . escapeJavaStyleString ( out , out ) ; }
Code	{ out () . escapeJavaStyleString ( out , out ) ; }
Distance : 8

50
Tree	{ escapeJavaStyleString ( out , out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , out , true ) ; }
Distance : 2

51
Tree	{ out . escapeJavaStyleString ( false ) ; } {}
Code	{ out . escapeJavaStyleString ( false ) ; } {}
Distance : 9

52
Tree	{ escapeJavaStyleString ( str , str , true ) ; }
Code	{ escapeJavaStyleString ( str , str , true ) ; }
Distance : 3

53
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } pattern
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } pattern
Distance : 7

54
Tree	{ out . escapeJavaStyleString ( this . str , out , str , out ) ; }
Code	{ out . escapeJavaStyleString ( this . str , out , str , out ) ; }
Distance : 8

55
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

56
Tree	{ out . out ( str , new true ( str ) ) ; }
Code	{ out . out ( str , new true ( str ) ) ; }
Distance : 7

57
Tree	{ out () . escapeJavaStyleString ( str , out ) ; } short
Code	{ out () . escapeJavaStyleString ( str , out ) ; } short
Distance : 9

58
Tree	{ out () . escapeJavaStyleString ( str , out ) ; } style
Code	{ out () . escapeJavaStyleString ( str , out ) ; } style
Distance : 9

59
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; } short
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; } short
Distance : 5

60
Tree	{ this . out . escapeJavaStyleString ( str ) ; } MutableInt
Code	{ this . out . escapeJavaStyleString ( str ) ; } MutableInt
Distance : 9

61
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } obj
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } obj
Distance : 8

62
Tree	{ out . escapeJavaStyleString ( str , true ) ; } style
Code	{ out . escapeJavaStyleString ( str , true ) ; } style
Distance : 7

63
Tree	{ out . escapeJavaStyleString ( str ? tx.amount : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? tx.amount : Boolean.TRUE ) ; }
Distance : 8

64
Tree	{ out . escapeJavaStyleString ( true ) ; }
Code	{ out . escapeJavaStyleString ( true ) ; }
Distance : 7

65
Tree	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : tx.amount ) ; }
Code	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : tx.amount ) ; }
Distance : 8

66
Tree	{ out . out ( str , new offset ( str ) ) ; }
Code	{ out . out ( str , new offset ( str ) ) ; }
Distance : 8

67
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } byte
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } byte
Distance : 5

68
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } toString
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } toString
Distance : 7

69
Tree	{ out . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : tx.amount ) ; }
Code	{ out . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : tx.amount ) ; }
Distance : 8

70
Tree	{ out . escapeJavaStyleString ( ( str ) null ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) null ) ; }
Distance : 8

71
Tree	{ out . escapeJavaStyleString ( str ? tx.amount : tx.amount ) ; }
Code	{ out . escapeJavaStyleString ( str ? tx.amount : tx.amount ) ; }
Distance : 8

72
Tree	{ out . str ( str , out ) ; }
Code	{ out . str ( str , out ) ; }
Distance : 6

73
Tree	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

74
Tree	{ out . out ( str , new MutableFloat ( str ) ) ; }
Code	{ out . out ( str , new MutableFloat ( str ) ) ; }
Distance : 8

75
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } style
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } style
Distance : 10

76
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; } style
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; } style
Distance : 10

77
Tree	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

78
Tree	{ this . out . escapeJavaStyleString ( str ) ; }
Code	{ this . out . escapeJavaStyleString ( str ) ; }
Distance : 8

79
Tree	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_HOUR : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_HOUR : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

80
Tree	{ out . escapeJavaStyleString ( str , new startPos ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new startPos ( str ) ) ; }
Distance : 8

81
Tree	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? DateUtils.MILLIS_PER_HOUR : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? DateUtils.MILLIS_PER_HOUR : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

82
Tree	{ out . out ( str , new startPos ( str ) ) ; }
Code	{ out . out ( str , new startPos ( str ) ) ; }
Distance : 8

83
Tree	{ out . out ( str , new IllegalArgumentException ( str ) ) ; }
Code	{ out . out ( str , new IllegalArgumentException ( str ) ) ; }
Distance : 8

84
Tree	{ out . escapeJavaStyleString ( out , null , out ) ; }
Code	{ out . escapeJavaStyleString ( out , null , out ) ; }
Distance : 6

85
Tree	{ out . escapeJavaStyleString ( str , true ) ; } short
Code	{ out . escapeJavaStyleString ( str , true ) ; } short
Distance : 7

86
Tree	{ out . escapeJavaStyleString ( new ConcurrentRuntimeException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new ConcurrentRuntimeException ( str , out ) ) ; }
Distance : 8

87
Tree	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Integer.MAX_VALUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Integer.MAX_VALUE ) ; }
Distance : 8

88
Tree	{ this . out . escapeJavaStyleString ( out ) ; }
Code	{ this . out . escapeJavaStyleString ( out ) ; }
Distance : 8

89
Tree	{ out . escapeJavaStyleString ( str , new delta ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new delta ( str ) ) ; }
Distance : 8

90
Tree	{ out . escapeJavaStyleString ( str , new ToStringBuilder ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new ToStringBuilder ( str ) ) ; }
Distance : 8

91
Tree	{ out . out ( str , new ThresholdCircuitBreaker ( str ) ) ; }
Code	{ out . out ( str , new ThresholdCircuitBreaker ( str ) ) ; }
Distance : 8

92
Tree	{ out . escapeJavaStyleString ( str ) ; } isEquals
Code	{ out . escapeJavaStyleString ( str ) ; } isEquals
Distance : 9

93
Tree	{ out . out ( str , new ToStringBuilder ( str ) ) ; }
Code	{ out . out ( str , new ToStringBuilder ( str ) ) ; }
Distance : 8

94
Tree	{ escapeJavaStyleString ( out , super(); ) ; }
Code	{ escapeJavaStyleString ( out , super(); ) ; }
Distance : 5

95
Tree	{ escapeJavaStyleString ( out , out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , out , false ) ; }
Distance : 3

96
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } short
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } short
Distance : 12

97
Tree	{ Integer.MAX_VALUE . escapeJavaStyleString ( str , out ) ; }
Code	{ Integer.MAX_VALUE . escapeJavaStyleString ( str , out ) ; }
Distance : 7

98
Tree	{ this . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ this . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

99
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 4

100
Tree	{ setRightElement . escapeJavaStyleString ( str , out ) ; }
Code	{ setRightElement . escapeJavaStyleString ( str , out ) ; }
Distance : 7

101
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Distance : 4

102
Tree	{ out () . escapeJavaStyleString ( str , out ) ; }
Code	{ out () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

103
Tree	{ try . escapeJavaStyleString ( str , out ) ; }
Code	{ try . escapeJavaStyleString ( str , out ) ; }
Distance : 7

104
Tree	{ escapeJavaStyleString ( out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str ) ; }
Distance : 4

105
Tree	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

106
Tree	{ str . escapeJavaStyleString ( out , out , this ) ; }
Code	{ str . escapeJavaStyleString ( out , out , this ) ; }
Distance : 6

107
Tree	{ str . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ str . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

108
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } ex
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } ex
Distance : 6

109
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 11

110
Tree	{ escapeJavaStyleString ( out , out , out ) ; } short
Code	{ escapeJavaStyleString ( out , out , out ) ; } short
Distance : 5

111
Tree	{ str . this . escapeJavaStyleString ( out , out , out ) ; }
Code	{ str . this . escapeJavaStyleString ( out , out , out ) ; }
Distance : 8

112
Tree	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( out ) ) ; }
Code	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( out ) ) ; }
Distance : 8

113
Tree	{ str . escapeJavaStyleString ( out , true ) ; }
Code	{ str . escapeJavaStyleString ( out , true ) ; }
Distance : 6

114
Tree	{ str . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString ( out , str ) ; }
Distance : 6

115
Tree	{ out . this . escapeJavaStyleString ( out , str , out ) ; }
Code	{ out . this . escapeJavaStyleString ( out , str , out ) ; }
Distance : 7

116
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

117
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } Calendar
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } Calendar
Distance : 7

118
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , super(); ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , super(); ) ; }
Distance : 7

119
Tree	{ escapeJavaStyleString ( str , str , false ) ; }
Code	{ escapeJavaStyleString ( str , str , false ) ; }
Distance : 4

120
Tree	{ escapeJavaStyleString ( out , out , out ) ; } style
Code	{ escapeJavaStyleString ( out , out , out ) ; } style
Distance : 5

121
Tree	{ escapeJavaStyleString ( out , true ) ; }
Code	{ escapeJavaStyleString ( out , true ) ; }
Distance : 4

122
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 3

123
Tree	{ escapeJavaStyleString ( str , str , true ) ; }
Code	{ escapeJavaStyleString ( str , str , true ) ; }
Distance : 3

124
Tree	{ str . escapeJavaStyleString ( out . escapeJavaStyleString ( out ) ) ; }
Code	{ str . escapeJavaStyleString ( out . escapeJavaStyleString ( out ) ) ; }
Distance : 8

125
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

126
Tree	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Distance : 9

127
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , str ) ; }
Distance : 3

128
Tree	{ escapeJavaStyleString ( out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out ) ; }
Distance : 4

129
Tree	{ str . escapeJavaStyleString ( str , null , out ) ; }
Code	{ str . escapeJavaStyleString ( str , null , out ) ; }
Distance : 6

130
Tree	{ str . escapeJavaStyleString ( this , str , str ) ; }
Code	{ str . escapeJavaStyleString ( this , str , str ) ; }
Distance : 6

131
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } ex
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } ex
Distance : 7

132
Tree	{ str . escapeJavaStyleString ( out , false ) ; }
Code	{ str . escapeJavaStyleString ( out , false ) ; }
Distance : 7

133
Tree	{ out . escapeJavaStyleString ( new Date ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new Date ( str , out ) ) ; }
Distance : 8

134
Tree	{ out . escapeJavaStyleString ( this , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this , out , out ) ; }
Distance : 7

135
Tree	{ out . escapeJavaStyleString ( new ExceptionWithoutCause ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new ExceptionWithoutCause ( str , out ) ) ; }
Distance : 8

136
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } ]
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } ]
Distance : 6

137
Tree	{ out . escapeJavaStyleString ( null , str , out , str ) ; }
Code	{ out . escapeJavaStyleString ( null , str , out , str ) ; }
Distance : 5

138
Tree	{ out . escapeJavaStyleString ( false ) ; } MutableInt
Code	{ out . escapeJavaStyleString ( false ) ; } MutableInt
Distance : 9

139
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } !=
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } !=
Distance : 6

140
Tree	{ out . escapeJavaStyleString ( str , new true ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new true ( str ) ) ; }
Distance : 8

141
Tree	{ str . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString ( out , out ) ; }
Distance : 7

142
Tree	{ escapeJavaStyleString ( str , str , str ) ; }
Code	{ escapeJavaStyleString ( str , str , str ) ; }
Distance : 4

143
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; } short
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; } short
Distance : 10

144
Tree	{ out . escapeJavaStyleString ( out ) ; }
Code	{ out . escapeJavaStyleString ( out ) ; }
Distance : 8

145
Tree	{ escapeJavaStyleString ( out , null ) ; }
Code	{ escapeJavaStyleString ( out , null ) ; }
Distance : 5

146
Tree	{ out . escapeJavaStyleString ( null , out , str , str ) ; }
Code	{ out . escapeJavaStyleString ( null , out , str , str ) ; }
Distance : 6

147
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( out ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( out ) ) ; }
Distance : 7

148
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

149
Tree	{ out . out ( str , str ) ; }
Code	{ out . out ( str , str ) ; }
Distance : 6

150
Tree	{ sb.buffer.length . escapeJavaStyleString ( str , out ) ; }
Code	{ sb.buffer.length . escapeJavaStyleString ( str , out ) ; }
Distance : 7

151
Tree	{ out . escapeJavaStyleString ( str , return; , str ) ; }
Code	{ out . escapeJavaStyleString ( str , return; , str ) ; }
Distance : 6

152
Tree	{ out . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString ( out , out ) ; }
Distance : 7

153
Tree	{ escapeJavaStyleString ( str , null ) ; }
Code	{ escapeJavaStyleString ( str , null ) ; }
Distance : 5

154
Tree	{ this . str . escapeJavaStyleString ( str ) ; }
Code	{ this . str . escapeJavaStyleString ( str ) ; }
Distance : 8

155
Tree	{ str () . escapeJavaStyleString ( out , str ) ; }
Code	{ str () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

156
Tree	{ out . escapeJavaStyleString ( this . out , out , str , str ) ; }
Code	{ out . escapeJavaStyleString ( this . out , out , str , str ) ; }
Distance : 7

157
Tree	{ escapeJavaStyleString ( out , out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , out , str , true ) ; }
Distance : 2

158
Tree	{ escapeJavaStyleString ( out , out , Byte.TYPE ) ; }
Code	{ escapeJavaStyleString ( out , out , Byte.TYPE ) ; }
Distance : 4

159
Tree	{ str . escapeJavaStyleString ( this , out , str ) ; }
Code	{ str . escapeJavaStyleString ( this , out , str ) ; }
Distance : 7

160
Tree	{ escapeJavaStyleString ( ( out ) out , out ) ; }
Code	{ escapeJavaStyleString ( ( out ) out , out ) ; }
Distance : 6

161
Tree	{ out . escapeJavaStyleString ( ( out ) super(); ) ; }
Code	{ out . escapeJavaStyleString ( ( out ) super(); ) ; }
Distance : 9

162
Tree	{ out . escapeJavaStyleString ( str , out , this ) ; } short
Code	{ out . escapeJavaStyleString ( str , out , this ) ; } short
Distance : 7

163
Tree	{ out () . escapeJavaStyleString ( out , str ) ; }
Code	{ out () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

164
Tree	{ out . escapeJavaStyleString ( ( out ) continue; ) ; }
Code	{ out . escapeJavaStyleString ( ( out ) continue; ) ; }
Distance : 9

165
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; }
Distance : 4

166
Tree	{ escapeJavaStyleString ( str , out , str , false ) ; }
Code	{ escapeJavaStyleString ( str , out , str , false ) ; }
Distance : 4

167
Tree	{ str . escapeJavaStyleString ( out , str , this ) ; }
Code	{ str . escapeJavaStyleString ( out , str , this ) ; }
Distance : 5

168
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Distance : 9

169
Tree	{ str . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 7

170
Tree	{ out . escapeJavaStyleString ( str , str , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , str , str , this ) ; }
Distance : 5

171
Tree	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

172
Tree	{ escapeJavaStyleString ( str , out , str . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , out , str . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 8

173
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } ]
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } ]
Distance : 7

174
Tree	{ out . escapeJavaStyleString ( str ) ; } cs
Code	{ out . escapeJavaStyleString ( str ) ; } cs
Distance : 9

175
Tree	{ out . escapeJavaStyleString ( str , true ) ; }
Code	{ out . escapeJavaStyleString ( str , true ) ; }
Distance : 6

176
Tree	{ out . this . escapeJavaStyleString ( str , str , str ) ; }
Code	{ out . this . escapeJavaStyleString ( str , str , str ) ; }
Distance : 8

177
Tree	{ out . escapeJavaStyleString ( str , new ObjectInputStream ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new ObjectInputStream ( str ) ) ; }
Distance : 8

178
Tree	{ escapeJavaStyleString ( str , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 9

179
Tree	{ escapeJavaStyleString ( out , str , str , true ) ; }
Code	{ escapeJavaStyleString ( out , str , str , true ) ; }
Distance : 1

180
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } MutableInt
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } MutableInt
Distance : 8

181
Tree	{ out . escapeJavaStyleString ( new Comparable ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new Comparable ( str , out ) ) ; }
Distance : 8

182
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } !=
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } !=
Distance : 7

183
Tree	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Code	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Distance : 9

184
Tree	{ out . escapeJavaStyleString ( str , out , this ) ; } style
Code	{ out . escapeJavaStyleString ( str , out , this ) ; } style
Distance : 7

185
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 9

186
Tree	{ this . escapeJavaStyleString ( str ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

187
Tree	{ escapeJavaStyleString ( out , out , true ) ; } short
Code	{ escapeJavaStyleString ( out , out , true ) ; } short
Distance : 4

188
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( out , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( out , out ) ; }
Distance : 7

189
Tree	{ out . this . escapeJavaStyleString ( str , str , out ) ; }
Code	{ out . this . escapeJavaStyleString ( str , str , out ) ; }
Distance : 8

190
Tree	{ str . escapeJavaStyleString ( this , out ) ; }
Code	{ str . escapeJavaStyleString ( this , out ) ; }
Distance : 8

191
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

192
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT , str ) ; }
Distance : 4

193
Tree	{ out . escapeJavaStyleString ( str ) ; } MutableInt
Code	{ out . escapeJavaStyleString ( str ) ; } MutableInt
Distance : 9

194
Tree	{ out . escapeJavaStyleString ( str ? tx.amount : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ out . escapeJavaStyleString ( str ? tx.amount : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

195
Tree	{ this . out . escapeJavaStyleString ( str ) ; } {}
Code	{ this . out . escapeJavaStyleString ( str ) ; } {}
Distance : 9

196
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } byte
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } byte
Distance : 8

197
Tree	{ escapeJavaStyleString ( out , null , str ) ; }
Code	{ escapeJavaStyleString ( out , null , str ) ; }
Distance : 4

198
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , return; ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , return; ) ; }
Distance : 7

199
Tree	{ str . escapeJavaStyleString ( ( out ) null ) ; }
Code	{ str . escapeJavaStyleString ( ( out ) null ) ; }
Distance : 9

200
Tree	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : tx.amount ) ; }
Code	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : tx.amount ) ; }
Distance : 8

201
Tree	{ out . escapeJavaStyleString ( out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( out , str , this ) ; }
Distance : 5

202
Tree	{ str . escapeJavaStyleString ( out ) ; }
Code	{ str . escapeJavaStyleString ( out ) ; }
Distance : 8

203
Tree	{ escapeJavaStyleString ( out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out ) ; }
Distance : 3

204
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( out ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( out ) ) ; }
Distance : 8

205
Tree	{ out . escapeJavaStyleString ( str , new Date ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new Date ( str ) ) ; }
Distance : 8

206
Tree	{ escapeJavaStyleString ( out , out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , out , str ) ; }
Distance : 3

207
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 7

208
Tree	{ escapeJavaStyleString ( str , out , str ) ; }
Code	{ escapeJavaStyleString ( str , out , str ) ; }
Distance : 4

209
Tree	{ escapeJavaStyleString ( out , return; ) ; }
Code	{ escapeJavaStyleString ( out , return; ) ; }
Distance : 5

210
Tree	{ escapeJavaStyleString ( str , out , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , out , true ) ; }
Distance : 3

211
Tree	{ out . escapeJavaStyleString ( new IllegalArgumentException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new IllegalArgumentException ( str , out ) ) ; }
Distance : 8

212
Tree	{ out . this . escapeJavaStyleString ( out , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( out , out , out ) ; }
Distance : 8

213
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } cs
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } cs
Distance : 5

214
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 5

215
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } T
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } T
Distance : 6

216
Tree	{ out . escapeJavaStyleString ( str , return; , out ) ; }
Code	{ out . escapeJavaStyleString ( str , return; , out ) ; }
Distance : 6

217
Tree	{ out . escapeJavaStyleString ( null , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( null , out , out , out ) ; }
Distance : 6

218
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } isEquals
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } isEquals
Distance : 8

219
Tree	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

220
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 11

221
Tree	{ str . escapeJavaStyleString ( this , out , out ) ; }
Code	{ str . escapeJavaStyleString ( this , out , out ) ; }
Distance : 7

222
Tree	{ str . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( str , out ) ; }
Distance : 7

223
Tree	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Distance : 8

224
Tree	{ ; . escapeJavaStyleString ( str , out ) ; }
Code	{ ; . escapeJavaStyleString ( str , out ) ; }
Distance : 7

225
Tree	{ str . escapeJavaStyleString ( this , str , out ) ; }
Code	{ str . escapeJavaStyleString ( this , str , out ) ; }
Distance : 6

226
Tree	{ escapeJavaStyleString ( out , str , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , str , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 7

227
Tree	{ out . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( str , out ) ; }
Distance : 7

228
Tree	{ out . escapeJavaStyleString ( out , true ) ; }
Code	{ out . escapeJavaStyleString ( out , true ) ; }
Distance : 6

229
Tree	{ escapeJavaStyleString ( ( out ) str , out ) ; }
Code	{ escapeJavaStyleString ( ( out ) str , out ) ; }
Distance : 5

230
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

231
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Distance : 9

232
Tree	{ str . escapeJavaStyleString ( str , false ) ; }
Code	{ str . escapeJavaStyleString ( str , false ) ; }
Distance : 7

233
Tree	{ escapeJavaStyleString ( str , continue; ) ; }
Code	{ escapeJavaStyleString ( str , continue; ) ; }
Distance : 5

234
Tree	{ escapeJavaStyleString ( str , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

235
Tree	{ escapeJavaStyleString ( out , out , TimeUnit.DAYS ) ; }
Code	{ escapeJavaStyleString ( out , out , TimeUnit.DAYS ) ; }
Distance : 4

236
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Distance : 9

237
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 11

238
Tree	{ str . out ( str , str ) ; }
Code	{ str . out ( str , str ) ; }
Distance : 6

239
Tree	{ escapeJavaStyleString ( out , out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , out , str , out ) ; }
Distance : 3

240
Tree	{ escapeJavaStyleString ( str , true ) ; }
Code	{ escapeJavaStyleString ( str , true ) ; }
Distance : 4

241
Tree	{ out . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : Boolean.TRUE ) ; }
Distance : 8

242
Tree	{ out . escapeJavaStyleString ( this , str , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str , str ) ; }
Distance : 6

243
Tree	{ escapeJavaStyleString ( str , out , str , out ) ; }
Code	{ escapeJavaStyleString ( str , out , str , out ) ; }
Distance : 4

244
Tree	{ str () . escapeJavaStyleString ( str , str ) ; }
Code	{ str () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

245
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 7

246
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } T
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } T
Distance : 7

247
Tree	{ this . out . escapeJavaStyleString ( str ) ; } byte
Code	{ this . out . escapeJavaStyleString ( str ) ; } byte
Distance : 9

248
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } byte
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } byte
Distance : 8

249
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str ) ; }
Distance : 5

250
Tree	{ escapeJavaStyleString ( out , str , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , str , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 7

251
Tree	{ out . escapeJavaStyleString ( ( out ) null ) ; }
Code	{ out . escapeJavaStyleString ( ( out ) null ) ; }
Distance : 9

252
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 11

253
Tree	{ escapeJavaStyleString ( str , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , true ) ; }
Distance : 3

254
Tree	{ out . escapeJavaStyleString ( this , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str ) ; }
Distance : 7

255
Tree	{ escapeJavaStyleString ( out , out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , out , str , false ) ; }
Distance : 3

256
Tree	{ out . this . escapeJavaStyleString ( out , out , str ) ; }
Code	{ out . this . escapeJavaStyleString ( out , out , str ) ; }
Distance : 8

257
Tree	{ escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString ( str , str ) ; }
Distance : 5

258
Tree	{ out . escapeJavaStyleString ( false ) ; } obj
Code	{ out . escapeJavaStyleString ( false ) ; } obj
Distance : 9

259
Tree	{ this . out . escapeJavaStyleString ( str ) ; } isEquals
Code	{ this . out . escapeJavaStyleString ( str ) ; } isEquals
Distance : 9

260
Tree	{ out . escapeJavaStyleString ( new StringIndexOutOfBoundsException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new StringIndexOutOfBoundsException ( str , out ) ) ; }
Distance : 8

261
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } isEquals
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } isEquals
Distance : 8

262
Tree	{ out . escapeJavaStyleString ( str , new offset ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new offset ( str ) ) ; }
Distance : 8

263
Tree	{ escapeJavaStyleString ( out , continue; , out ) ; }
Code	{ escapeJavaStyleString ( out , continue; , out ) ; }
Distance : 4

264
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 7

265
Tree	{ out . escapeJavaStyleString ( false ) ; }
Code	{ out . escapeJavaStyleString ( false ) ; }
Distance : 8

266
Tree	{ escapeJavaStyleString ( out , return; , str ) ; }
Code	{ escapeJavaStyleString ( out , return; , str ) ; }
Distance : 4

267
Tree	{ out . escapeJavaStyleString ( this , str ) ; } obj
Code	{ out . escapeJavaStyleString ( this , str ) ; } obj
Distance : 8

268
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( str ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( str ) ) ; }
Distance : 8

269
Tree	{ this . out . escapeJavaStyleString ( str ) ; } obj
Code	{ this . out . escapeJavaStyleString ( str ) ; } obj
Distance : 9

270
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } obj
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } obj
Distance : 8

271
Tree	{ escapeJavaStyleString ( str , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out ) ; }
Distance : 4

272
Tree	{ escapeJavaStyleString ( ( str ) out , out ) ; }
Code	{ escapeJavaStyleString ( ( str ) out , out ) ; }
Distance : 5

273
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } {}
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } {}
Distance : 8

274
Tree	{ out . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString ( out , str ) ; }
Distance : 6

275
Tree	{ str () . escapeJavaStyleString ( out , out ) ; }
Code	{ str () . escapeJavaStyleString ( out , out ) ; }
Distance : 8

276
Tree	{ this . escapeJavaStyleString ( str ? OPTION.errorIfNoSemiColon : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? OPTION.errorIfNoSemiColon : Boolean.TRUE ) ; }
Distance : 8

277
Tree	{ out . escapeJavaStyleString ( this , str ) ; } byte
Code	{ out . escapeJavaStyleString ( this , str ) ; } byte
Distance : 8

278
Tree	{ out . escapeJavaStyleString ( null , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( null , out , out , str ) ; }
Distance : 6

279
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } cs
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } cs
Distance : 8

280
Tree	{ out . escapeJavaStyleString ( this . out , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this . out , out , out , str ) ; }
Distance : 7

281
Tree	{ out . escapeJavaStyleString ( this , str , out ) ; } style
Code	{ out . escapeJavaStyleString ( this , str , out ) ; } style
Distance : 7

282
Tree	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

283
Tree	{ str . escapeJavaStyleString ( str , out , str , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , str , this ) ; }
Distance : 6

284
Tree	{ escapeJavaStyleString ( ( str ) out , str ) ; }
Code	{ escapeJavaStyleString ( ( str ) out , str ) ; }
Distance : 5

285
Tree	{ out . escapeJavaStyleString ( new WeakHashMap ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new WeakHashMap ( str , out ) ) ; }
Distance : 8

286
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; }
Distance : 6

287
Tree	{ out . escapeJavaStyleString ( continue; , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( continue; , out , out , out ) ; }
Distance : 6

288
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } byte
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } byte
Distance : 8

289
Tree	{ escapeJavaStyleString ( str , str , out ) ; }
Code	{ escapeJavaStyleString ( str , str , out ) ; }
Distance : 4

290
Tree	{ out . escapeJavaStyleString ( out , str , out , this ) ; }
Code	{ out . escapeJavaStyleString ( out , str , out , this ) ; }
Distance : 4

291
Tree	{ out . escapeJavaStyleString ( str , out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , out , this ) ; }
Distance : 6

292
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 4

293
Tree	{ escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString ( out , str ) ; }
Distance : 4

294
Tree	{ out . escapeJavaStyleString ( str ) ; } {}
Code	{ out . escapeJavaStyleString ( str ) ; } {}
Distance : 9

295
Tree	{ UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

296
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } MutableInt
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } MutableInt
Distance : 8

297
Tree	{ out . escapeJavaStyleString ( str , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

298
Tree	{ out . escapeJavaStyleString ( ( str ) return; ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) return; ) ; }
Distance : 8

299
Tree	{ out . escapeJavaStyleString ( out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , this ) ; }
Distance : 6

300
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

301
Tree	{ str . escapeJavaStyleString ( str , str , this ) ; }
Code	{ str . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

302
Tree	{ escapeJavaStyleString ( out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , str , true ) ; }
Distance : 2

303
Tree	{ out . escapeJavaStyleString ( ( str ) continue; ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) continue; ) ; }
Distance : 8

304
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT , out ) ; }
Distance : 4

305
Tree	{ out . escapeJavaStyleString ( super(); , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( super(); , out , out , out ) ; }
Distance : 6

306
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , str ) ; }
Distance : 4

307
Tree	{ escapeJavaStyleString ( out , out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out , out ) ; }
Distance : 3

308
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Distance : 4

309
Tree	{ out . escapeJavaStyleString ( false ) ; } byte
Code	{ out . escapeJavaStyleString ( false ) ; } byte
Distance : 9

310
Tree	{ out . escapeJavaStyleString ( null , out , str , out ) ; }
Code	{ out . escapeJavaStyleString ( null , out , str , out ) ; }
Distance : 6

311
Tree	{ out . escapeJavaStyleString ( this . out , out , str , out ) ; }
Code	{ out . escapeJavaStyleString ( this . out , out , str , out ) ; }
Distance : 7

312
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , continue; ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , continue; ) ; }
Distance : 7

313
Tree	{ out . escapeJavaStyleString ( this , str ) ; } cs
Code	{ out . escapeJavaStyleString ( this , str ) ; } cs
Distance : 8

314
Tree	{ out . escapeJavaStyleString ( str , out ) ; } short
Code	{ out . escapeJavaStyleString ( str , out ) ; } short
Distance : 8

315
Tree	{ escapeJavaStyleString ( out , out , true ) ; } style
Code	{ escapeJavaStyleString ( out , out , true ) ; } style
Distance : 4

316
Tree	{ out . escapeJavaStyleString ( str , out ) ; } style
Code	{ out . escapeJavaStyleString ( str , out ) ; } style
Distance : 8

317
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 3

318
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } style
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } style
Distance : 10

319
Tree	{ str . escapeJavaStyleString ( null , out , out , out ) ; }
Code	{ str . escapeJavaStyleString ( null , out , out , out ) ; }
Distance : 6

320
Tree	{ escapeJavaStyleString ( out , str , out , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out , out ) ; }
Distance : 2

321
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

322
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } CharSequence
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } CharSequence
Distance : 7

323
Tree	{ out . escapeJavaStyleString ( this , str ) ; } isEquals
Code	{ out . escapeJavaStyleString ( this , str ) ; } isEquals
Distance : 8

324
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 9

325
Tree	{ escapeJavaStyleString ( str , out , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out , out ) ; }
Distance : 4

326
Tree	{ out . escapeJavaStyleString ( this . str , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . str , out , out , out ) ; }
Distance : 8

327
Tree	{ this . escapeJavaStyleString ( str ? tx.amount : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? tx.amount : Boolean.TRUE ) ; }
Distance : 8

328
Tree	{ str . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( str , str ) ; }
Distance : 7

329
Tree	{ out . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 7

330
Tree	{ out . str ( out , out ) ; }
Code	{ out . str ( out , out ) ; }
Distance : 6

331
Tree	{ out . escapeJavaStyleString ( this , str ) ; } MutableInt
Code	{ out . escapeJavaStyleString ( this , str ) ; } MutableInt
Distance : 8

332
Tree	{ out . escapeJavaStyleString ( str , false ) ; }
Code	{ out . escapeJavaStyleString ( str , false ) ; }
Distance : 7

333
Tree	{ this . str . escapeJavaStyleString ( out ) ; }
Code	{ this . str . escapeJavaStyleString ( out ) ; }
Distance : 8

334
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } isEquals
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } isEquals
Distance : 8

335
Tree	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

336
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; } style
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; } style
Distance : 5

337
Tree	{ escapeJavaStyleString ( out , super(); , out ) ; }
Code	{ escapeJavaStyleString ( out , super(); , out ) ; }
Distance : 4

338
Tree	{ out . escapeJavaStyleString ( this , str ) ; } {}
Code	{ out . escapeJavaStyleString ( this , str ) ; } {}
Distance : 8

339
Tree	{ out . escapeJavaStyleString ( StringUtils.EMPTY , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( StringUtils.EMPTY , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

340
Tree	{ out . escapeJavaStyleString ( this , out ) ; }
Code	{ out . escapeJavaStyleString ( this , out ) ; }
Distance : 7

341
Tree	{ out . escapeJavaStyleString ( str , null , str ) ; }
Code	{ out . escapeJavaStyleString ( str , null , str ) ; }
Distance : 6

342
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 7

343
Tree	{ str . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Distance : 8

344
Tree	{ escapeJavaStyleString ( out , out ) ; } byte
Code	{ escapeJavaStyleString ( out , out ) ; } byte
Distance : 6

345
Tree	{ escapeJavaStyleString ( ( str ) str , str ) ; }
Code	{ escapeJavaStyleString ( ( str ) str , str ) ; }
Distance : 5

346
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

347
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } {}
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } {}
Distance : 8

348
Tree	{ assertTrue . escapeJavaStyleString ( str , out ) ; }
Code	{ assertTrue . escapeJavaStyleString ( str , out ) ; }
Distance : 7

349
Tree	{ escapeJavaStyleString ( out , continue; ) ; }
Code	{ escapeJavaStyleString ( out , continue; ) ; }
Distance : 5

350
Tree	{ out . escapeJavaStyleString ( this . out , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . out , out , out , out ) ; }
Distance : 7

351
Tree	{ escapeJavaStyleString ( str , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , true ) ; }
Distance : 3

352
Tree	{ out . escapeJavaStyleString ( str ) ; } byte
Code	{ out . escapeJavaStyleString ( str ) ; } byte
Distance : 9

353
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , out ) ; }
Distance : 3

354
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } obj
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } obj
Distance : 8

355
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } cs
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } cs
Distance : 8

356
Tree	{ out . escapeJavaStyleString ( false ) ; } cs
Code	{ out . escapeJavaStyleString ( false ) ; } cs
Distance : 9

357
Tree	{ str . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ str . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

358
Tree	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , null ) ; }
Distance : 6

359
Tree	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

360
Tree	{ escapeJavaStyleString ( ( out ) out , str ) ; }
Code	{ escapeJavaStyleString ( ( out ) out , str ) ; }
Distance : 6

361
Tree	{ str . out ( str , out ) ; }
Code	{ str . out ( str , out ) ; }
Distance : 6

362
Tree	{ out . escapeJavaStyleString ( this , str , out ) ; }
Code	{ out . escapeJavaStyleString ( this , str , out ) ; }
Distance : 6

363
Tree	{ str . escapeJavaStyleString ( str ) ; }
Code	{ str . escapeJavaStyleString ( str ) ; }
Distance : 8

364
Tree	{ out . escapeJavaStyleString ( StringUtils.EMPTY , out ? DateUtils.MILLIS_PER_HOUR : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ out . escapeJavaStyleString ( StringUtils.EMPTY , out ? DateUtils.MILLIS_PER_HOUR : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

365
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } cs
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } cs
Distance : 8

366
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Distance : 4

367
Tree	{ out . escapeJavaStyleString ( trim , out ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( trim , out ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Distance : 8

368
Tree	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Distance : 8

369
Tree	{ out . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( str , str ) ; }
Distance : 7

370
Tree	{ out . escapeJavaStyleString ( str ) ; } obj
Code	{ out . escapeJavaStyleString ( str ) ; } obj
Distance : 9

371
Tree	{ out . escapeJavaStyleString ( JavaVersion.JAVA_1_5 , out ? DateUtils.MILLIS_PER_HOUR : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ out . escapeJavaStyleString ( JavaVersion.JAVA_1_5 , out ? DateUtils.MILLIS_PER_HOUR : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

372
Tree	{ escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString ( str , out ) ; }
Distance : 5

373
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Distance : 9

374
Tree	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Distance : 8

375
Tree	{ out . escapeJavaStyleString ( str , null , out ) ; }
Code	{ out . escapeJavaStyleString ( str , null , out ) ; }
Distance : 6

376
Tree	{ this . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : Boolean.TRUE ) ; }
Distance : 8

377
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } MutableInt
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } MutableInt
Distance : 8

378
Tree	{ out . escapeJavaStyleString ( null , str , out , out ) ; }
Code	{ out . escapeJavaStyleString ( null , str , out , out ) ; }
Distance : 5

379
Tree	{ escapeJavaStyleString ( str , return; ) ; }
Code	{ escapeJavaStyleString ( str , return; ) ; }
Distance : 5

380
Tree	{ escapeJavaStyleString ( out , super(); , str ) ; }
Code	{ escapeJavaStyleString ( out , super(); , str ) ; }
Distance : 4

381
Tree	{ out . escapeJavaStyleString ( str , continue; , out ) ; }
Code	{ out . escapeJavaStyleString ( str , continue; , out ) ; }
Distance : 6

382
Tree	{ out . escapeJavaStyleString ( str , new MutableFloat ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new MutableFloat ( str ) ) ; }
Distance : 8

383
Tree	{ escapeJavaStyleString ( ( out ) str , str ) ; }
Code	{ escapeJavaStyleString ( ( out ) str , str ) ; }
Distance : 5

384
Tree	{ out . escapeJavaStyleString ( str , new IllegalArgumentException ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new IllegalArgumentException ( str ) ) ; }
Distance : 8

385
Tree	{ str . escapeJavaStyleString ( this , str ) ; }
Code	{ str . escapeJavaStyleString ( this , str ) ; }
Distance : 7

386
Tree	{ str . escapeJavaStyleString ( false ) ; }
Code	{ str . escapeJavaStyleString ( false ) ; }
Distance : 8

387
Tree	{ str . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 7

388
Tree	{ out () . escapeJavaStyleString ( str , str ) ; }
Code	{ out () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

389
Tree	{ out . escapeJavaStyleString ( new NullPointerException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new NullPointerException ( str , out ) ) ; }
Distance : 8

390
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; }
Distance : 7

391
Tree	{ str . escapeJavaStyleString ( true ) ; }
Code	{ str . escapeJavaStyleString ( true ) ; }
Distance : 7

392
Tree	{ out . escapeJavaStyleString ( ( out ) return; ) ; }
Code	{ out . escapeJavaStyleString ( ( out ) return; ) ; }
Distance : 9

393
Tree	{ str . escapeJavaStyleString ( ( str ) null ) ; }
Code	{ str . escapeJavaStyleString ( ( str ) null ) ; }
Distance : 8

394
Tree	{ escapeJavaStyleString ( str , return; , out ) ; }
Code	{ escapeJavaStyleString ( str , return; , out ) ; }
Distance : 4

395
Tree	{ escapeJavaStyleString ( str , null , out ) ; }
Code	{ escapeJavaStyleString ( str , null , out ) ; }
Distance : 4

396
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 7

397
Tree	{ out . escapeJavaStyleString ( str , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

398
Tree	{ escapeJavaStyleString ( str , out , str , true ) ; }
Code	{ escapeJavaStyleString ( str , out , str , true ) ; }
Distance : 3

399
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } isEquals
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } isEquals
Distance : 5

400
Tree	{ escapeJavaStyleString ( ( str ) str , out ) ; } style
Code	{ escapeJavaStyleString ( ( str ) str , out ) ; } style
Distance : 6

401
Tree	{ out . escapeJavaStyleString ( this . out , str , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . out , str , out , out ) ; }
Distance : 6

402
Tree	{ out . escapeJavaStyleString ( out , out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , out , this ) ; }
Distance : 5

403
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } {}
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } {}
Distance : 5

404
Tree	{ out . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ out . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

405
Tree	{ this . out . escapeJavaStyleString ( str ) ; } cs
Code	{ this . out . escapeJavaStyleString ( str ) ; } cs
Distance : 9

406
Tree	{ escapeJavaStyleString ( out , out ) ; } cs
Code	{ escapeJavaStyleString ( out , out ) ; } cs
Distance : 6

407
Tree	{ escapeJavaStyleString ( out , return; , out ) ; }
Code	{ escapeJavaStyleString ( out , return; , out ) ; }
Distance : 4

408
Tree	{ escapeJavaStyleString ( ( str ) str , out ) ; } short
Code	{ escapeJavaStyleString ( ( str ) str , out ) ; } short
Distance : 6

409
Tree	{ escapeJavaStyleString ( out , out , true ) ; } short
Code	{ escapeJavaStyleString ( out , out , true ) ; } short
Distance : 4

410
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 4

411
Tree	{ escapeJavaStyleString ( out , out , ModifyType.TRUNCATE ) ; }
Code	{ escapeJavaStyleString ( out , out , ModifyType.TRUNCATE ) ; }
Distance : 4

412
Tree	{ escapeJavaStyleString ( str , str , false ) ; }
Code	{ escapeJavaStyleString ( str , str , false ) ; }
Distance : 4

413
Tree	{ str . out ( out , out ) ; }
Code	{ str . out ( out , out ) ; }
Distance : 7

414
Tree	{ out . escapeJavaStyleString ( str ? Entities.HTML40_ARRAY_LENGTH : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? Entities.HTML40_ARRAY_LENGTH : Boolean.TRUE ) ; }
Distance : 8

415
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } pattern
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } pattern
Distance : 6

416
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } CharSequence
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } CharSequence
Distance : 6

417
Tree	{ out . out ( out , str ) ; }
Code	{ out . out ( out , str ) ; }
Distance : 7

418
Tree	{ str () . escapeJavaStyleString ( str , out ) ; }
Code	{ str () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

419
Tree	{ str . escapeJavaStyleString ( str , out , out , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , out , this ) ; }
Distance : 6

420
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

421
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

422
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Distance : 9

423
Tree	{ escapeJavaStyleString ( out , out ) ; } isEquals
Code	{ escapeJavaStyleString ( out , out ) ; } isEquals
Distance : 6

424
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } {}
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } {}
Distance : 8

425
Tree	{ out . escapeJavaStyleString ( this . str , str , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . str , str , out , out ) ; }
Distance : 7

426
Tree	{ out . escapeJavaStyleString ( out , false ) ; }
Code	{ out . escapeJavaStyleString ( out , false ) ; }
Distance : 7

427
Tree	{ str . escapeJavaStyleString ( str , out , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

428
Tree	{ out . escapeJavaStyleString ( out , null , str ) ; }
Code	{ out . escapeJavaStyleString ( out , null , str ) ; }
Distance : 6

429
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Distance : 9

430
Tree	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 8

431
Tree	{ out . escapeJavaStyleString ( false ) ; } isEquals
Code	{ out . escapeJavaStyleString ( false ) ; } isEquals
Distance : 9

432
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } short
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } short
Distance : 10

433
Tree	{ str . escapeJavaStyleString ( str , true ) ; }
Code	{ str . escapeJavaStyleString ( str , true ) ; }
Distance : 6

434
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , super(); ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , super(); ) ; }
Distance : 7

435
Tree	{ out . escapeJavaStyleString ( this , str , out ) ; } short
Code	{ out . escapeJavaStyleString ( this , str , out ) ; } short
Distance : 7

436
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , return; ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , return; ) ; }
Distance : 7

437
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } obj
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } obj
Distance : 5

438
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } style
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } style
Distance : 12

439
Tree	{ escapeJavaStyleString ( str , super(); ) ; }
Code	{ escapeJavaStyleString ( str , super(); ) ; }
Distance : 5

440
Tree	{ escapeJavaStyleString ( ( str ) str , out ) ; }
Code	{ escapeJavaStyleString ( ( str ) str , out ) ; }
Distance : 5

441
Tree	{ escapeJavaStyleString ( str , out , out , str ) ; }
Code	{ escapeJavaStyleString ( str , out , out , str ) ; }
Distance : 4

442
Tree	{ out . escapeJavaStyleString ( JavaVersion.JAVA_1_5 , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( JavaVersion.JAVA_1_5 , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

443
Tree	{ out . escapeJavaStyleString ( str , new ThresholdCircuitBreaker ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new ThresholdCircuitBreaker ( str ) ) ; }
Distance : 8

444
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 9

445
Tree	{ escapeJavaStyleString ( out , out , true ) ; } style
Code	{ escapeJavaStyleString ( out , out , true ) ; } style
Distance : 4

446
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } short
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } short
Distance : 10

447
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 3

448
Tree	{ out . escapeJavaStyleString ( this . str , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this . str , out , out , str ) ; }
Distance : 8

449
Tree	{ escapeJavaStyleString ( str , out , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , out , false ) ; }
Distance : 4

450
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Distance : 7

451
Tree	{ escapeJavaStyleString ( out , out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str , str ) ; }
Distance : 3

452
Tree	{ escapeJavaStyleString ( str , null , str ) ; }
Code	{ escapeJavaStyleString ( str , null , str ) ; }
Distance : 4

453
Tree	{ out . escapeJavaStyleString ( ( str ) super(); ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) super(); ) ; }
Distance : 8

454
Tree	{ out . escapeJavaStyleString ( this , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this , out , str ) ; }
Distance : 7

455
Tree	{ out . escapeJavaStyleString ( str , super(); , out ) ; }
Code	{ out . escapeJavaStyleString ( str , super(); , out ) ; }
Distance : 6

456
Tree	{ out . escapeJavaStyleString ( out , out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , str , this ) ; }
Distance : 5

457
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 3

458
Tree	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 8

459
Tree	{ escapeJavaStyleString ( out , str , out , true ) ; }
Code	{ escapeJavaStyleString ( out , str , out , true ) ; }
Distance : 1

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return escapeJavaStyleString ( str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 210
Wrong
========================================================================
False

0
Tree	{ this . str = str ; for }
Code	{ this . str = str ; for }
Distance : 9

1
Tree	{ this . str = str ; {} }
Code	{ this . str = str ; {} }
Distance : 9

2
Tree	{ this . str = str ; catch }
Code	{ this . str = str ; catch }
Distance : 9

3
Tree	{ this . str = str ; assertArrayEquals }
Code	{ this . str = str ; assertArrayEquals }
Distance : 9

4
Tree	{ this . str = str ; && }
Code	{ this . str = str ; && }
Distance : 9

5
Tree	{ this . str = str ; i }
Code	{ this . str = str ; i }
Distance : 9

6
Tree	{ this . str = str ; : }
Code	{ this . str = str ; : }
Distance : 9

7
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

8
Tree	{ return escapeJavaStyleString ( str , null , continue; , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , continue; , str ) ; }
Distance : 4

9
Tree	{ return escapeJavaStyleString ( str , null , return; , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , return; , str ) ; }
Distance : 4

10
Tree	{ return str . escapeJavaStyleString ( str , null , super(); ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , super(); ) ; }
Distance : 4

11
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Distance : 4

12
Tree	{ return setRightElement . escapeJavaStyleString ( str ) ; }
Code	{ return setRightElement . escapeJavaStyleString ( str ) ; }
Distance : 6

13
Tree	{ return escapeJavaStyleString ( str , continue; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , continue; , null , str ) ; }
Distance : 4

14
Tree	{ return Double.MAX_VALUE . escapeJavaStyleString ( str ) ; }
Code	{ return Double.MAX_VALUE . escapeJavaStyleString ( str ) ; }
Distance : 6

15
Tree	{ return str . escapeJavaStyleString ( str , null , return; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , return; ) ; }
Distance : 4

16
Tree	{ return getFragment . escapeJavaStyleString ( str ) ; }
Code	{ return getFragment . escapeJavaStyleString ( str ) ; }
Distance : 6

17
Tree	{ return escapeJavaStyleString ( str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , return; ) ; }
Distance : 3

18
Tree	{ return str . escapeJavaStyleString ( str , continue; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , continue; , null ) ; }
Distance : 4

19
Tree	{ return str . escapeJavaStyleString ( str , null , continue; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , continue; ) ; }
Distance : 4

20
Tree	{ return super . escapeJavaStyleString ( str , str , str , new final ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new final ( str ) ) ; }
Distance : 10

21
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Date ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Date ( str ) ) ; }
Distance : 10

22
Tree	{ return super . escapeJavaStyleString ( str , str , str , new offset ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new offset ( str ) ) ; }
Distance : 10

23
Tree	{ return escapeJavaStyleString ( str , str , tolerance ) ; }
Code	{ return escapeJavaStyleString ( str , str , tolerance ) ; }
Distance : 2

24
Tree	{ return super . escapeJavaStyleString ( str , str , str , new reflectUpToClass ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new reflectUpToClass ( str ) ) ; }
Distance : 10

25
Tree	{ return super . escapeJavaStyleString ( str , str , str , new MutableFloat ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new MutableFloat ( str ) ) ; }
Distance : 10

26
Tree	{ return super . escapeJavaStyleString ( str , str , str , new double ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new double ( str ) ) ; }
Distance : 10

27
Tree	{ return super . escapeJavaStyleString ( str , str , str , new delta ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new delta ( str ) ) ; }
Distance : 10

28
Tree	{ return escapeJavaStyleString ( str , return; , super(); , str ) ; }
Code	{ return escapeJavaStyleString ( str , return; , super(); , str ) ; }
Distance : 4

29
Tree	{ return escapeJavaStyleString ( str , true ) ; } toString
Code	{ return escapeJavaStyleString ( str , true ) ; } toString
Distance : 3

30
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } cs
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } cs
Distance : 7

31
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } MutableInt
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } MutableInt
Distance : 7

32
Tree	{ return super . escapeJavaStyleString ( str , str , str , new endPos ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new endPos ( str ) ) ; }
Distance : 10

33
Tree	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Distance : 4

34
Tree	{ return escapeJavaStyleString ( str , str , ModifyType.ROUND ) ; }
Code	{ return escapeJavaStyleString ( str , str , ModifyType.ROUND ) ; }
Distance : 2

35
Tree	{ return UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

36
Tree	{ this . str = str ; ++ }
Code	{ this . str = str ; ++ }
Distance : 9

37
Tree	{ this . str = str ; else }
Code	{ this . str = str ; else }
Distance : 9

38
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

39
Tree	{ return escapeJavaStyleString ( str , Integer.MAX_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , Integer.MAX_VALUE ) ; }
Distance : 3

40
Tree	{ return escapeJavaStyleString ( str , sb.buffer.length ) ; }
Code	{ return escapeJavaStyleString ( str , sb.buffer.length ) ; }
Distance : 3

41
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

42
Tree	{ return escapeJavaStyleString ( str , Float.MIN_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , Float.MIN_VALUE ) ; }
Distance : 3

43
Tree	{ return escapeJavaStyleString ( str , TimeUnit.DAYS ) ; }
Code	{ return escapeJavaStyleString ( str , TimeUnit.DAYS ) ; }
Distance : 3

44
Tree	{ return escapeJavaStyleString ( str , offset ) ; }
Code	{ return escapeJavaStyleString ( str , offset ) ; }
Distance : 3

45
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

46
Tree	{ return escapeJavaStyleString ( str , UnescapeUtils.UNESCAPE_ECMASCRIPT ) ; }
Code	{ return escapeJavaStyleString ( str , UnescapeUtils.UNESCAPE_ECMASCRIPT ) ; }
Distance : 3

47
Tree	{ escapeJavaStyleString ( str ) ; return true ; }
Code	{ escapeJavaStyleString ( str ) ; return true ; }
Distance : 5

48
Tree	{ return escapeJavaStyleString ( trim , null ) ; }
Code	{ return escapeJavaStyleString ( trim , null ) ; }
Distance : 4

49
Tree	{ return escapeJavaStyleString ( str , array.length ) ; }
Code	{ return escapeJavaStyleString ( str , array.length ) ; }
Distance : 3

50
Tree	{ return escapeJavaStyleString ( <= , null ) ; }
Code	{ return escapeJavaStyleString ( <= , null ) ; }
Distance : 4

51
Tree	{ escapeJavaStyleString ( str ) ; assertEquals }
Code	{ escapeJavaStyleString ( str ) ; assertEquals }
Distance : 6

52
Tree	{ escapeJavaStyleString ( str ) ; INDEX_NOT_FOUND }
Code	{ escapeJavaStyleString ( str ) ; INDEX_NOT_FOUND }
Distance : 6

53
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Distance : 2

54
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.MILLISECONDS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.MILLISECONDS ) ; }
Distance : 2

55
Tree	{ return escapeJavaStyleString ( str , str , Integer.MAX_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , str , Integer.MAX_VALUE ) ; }
Distance : 2

56
Tree	{ return escapeJavaStyleString ( str , str , StringUtils.EMPTY ) ; }
Code	{ return escapeJavaStyleString ( str , str , StringUtils.EMPTY ) ; }
Distance : 2

57
Tree	{ return escapeJavaStyleString ( str , str , Byte.TYPE ) ; }
Code	{ return escapeJavaStyleString ( str , str , Byte.TYPE ) ; }
Distance : 2

58
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.HOURS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.HOURS ) ; }
Distance : 2

59
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.MINUTES ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.MINUTES ) ; }
Distance : 2

60
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } obj
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } obj
Distance : 7

61
Tree	{ return escapeJavaStyleString ( str , str , Float.MIN_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , str , Float.MIN_VALUE ) ; }
Distance : 2

62
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } -
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } -
Distance : 7

63
Tree	{ return super . escapeJavaStyleString ( str , str , str , new startPos ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new startPos ( str ) ) ; }
Distance : 10

64
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } Date
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } Date
Distance : 8

65
Tree	{ escapeJavaStyleString ( str ) ; return true ; } toString
Code	{ escapeJavaStyleString ( str ) ; return true ; } toString
Distance : 6

66
Tree	{ escapeJavaStyleString ( str ) ; return true ; } ]
Code	{ escapeJavaStyleString ( str ) ; return true ; } ]
Distance : 6

67
Tree	{ escapeJavaStyleString ( str ) ; return true ; } pattern
Code	{ escapeJavaStyleString ( str ) ; return true ; } pattern
Distance : 6

68
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } toString
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } toString
Distance : 8

69
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } StringUtils
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } StringUtils
Distance : 8

70
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } buffer
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } buffer
Distance : 8

71
Tree	{ escapeJavaStyleString ( str ) ; return true ; } !=
Code	{ escapeJavaStyleString ( str ) ; return true ; } !=
Distance : 6

72
Tree	{ escapeJavaStyleString ( str ) ; return true ; } T
Code	{ escapeJavaStyleString ( str ) ; return true ; } T
Distance : 6

73
Tree	{ this ( str , str , str , null ) ; } cs
Code	{ this ( str , str , str , null ) ; } cs
Distance : 7

74
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } toString
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } toString
Distance : 5

75
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } [
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } [
Distance : 8

76
Tree	{ escapeJavaStyleString ( str ) ; return true ; } Calendar
Code	{ escapeJavaStyleString ( str ) ; return true ; } Calendar
Distance : 6

77
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } StringUtils
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } StringUtils
Distance : 5

78
Tree	{ return escapeJavaStyleString ( str , true ) ; } !=
Code	{ return escapeJavaStyleString ( str , true ) ; } !=
Distance : 3

79
Tree	{ return escapeJavaStyleString ( str , true ) ; } CharSequence
Code	{ return escapeJavaStyleString ( str , true ) ; } CharSequence
Distance : 3

80
Tree	{ escapeJavaStyleString ( str ) ; return true ; } ex
Code	{ escapeJavaStyleString ( str ) ; return true ; } ex
Distance : 6

81
Tree	{ return escapeJavaStyleString ( this , str ) ; } buffer
Code	{ return escapeJavaStyleString ( this , str ) ; } buffer
Distance : 5

82
Tree	{ return escapeJavaStyleString ( str , true ) ; } ex
Code	{ return escapeJavaStyleString ( str , true ) ; } ex
Distance : 3

83
Tree	{ return escapeJavaStyleString ( str , true ) ; } Calendar
Code	{ return escapeJavaStyleString ( str , true ) ; } Calendar
Distance : 3

84
Tree	{ return escapeJavaStyleString ( str , true ) ; } pattern
Code	{ return escapeJavaStyleString ( str , true ) ; } pattern
Distance : 3

85
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } [
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } [
Distance : 5

86
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } mutNum
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } mutNum
Distance : 5

87
Tree	{ return escapeJavaStyleString ( this , str ) ; } StringUtils
Code	{ return escapeJavaStyleString ( this , str ) ; } StringUtils
Distance : 5

88
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } buffer
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } buffer
Distance : 5

89
Tree	{ return escapeJavaStyleString ( str , true ) ; } toString
Code	{ return escapeJavaStyleString ( str , true ) ; } toString
Distance : 3

90
Tree	{ return escapeJavaStyleString ( this , str ) ; } Date
Code	{ return escapeJavaStyleString ( this , str ) ; } Date
Distance : 5

91
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } !=
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } !=
Distance : 5

92
Tree	{ return escapeJavaStyleString ( this , str ) ; } [
Code	{ return escapeJavaStyleString ( this , str ) ; } [
Distance : 5

93
Tree	{ this ( str , str , str , return; ) ; }
Code	{ this ( str , str , str , return; ) ; }
Distance : 6

94
Tree	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Distance : 4

95
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } length
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } length
Distance : 8

96
Tree	{ return assertTrue . escapeJavaStyleString ( str ) ; }
Code	{ return assertTrue . escapeJavaStyleString ( str ) ; }
Distance : 6

97
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } ex
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } ex
Distance : 5

98
Tree	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Distance : 7

99
Tree	{ return splitByWholeSeparatorWorker . escapeJavaStyleString ( str ) ; }
Code	{ return splitByWholeSeparatorWorker . escapeJavaStyleString ( str ) ; }
Distance : 6

100
Tree	{ return escapeJavaStyleString ( str , EscapeUtils.ESCAPE_ECMASCRIPT ) ; }
Code	{ return escapeJavaStyleString ( str , EscapeUtils.ESCAPE_ECMASCRIPT ) ; }
Distance : 3

101
Tree	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

102
Tree	{ return escapeJavaStyleString ( isEmpty , null ) ; }
Code	{ return escapeJavaStyleString ( isEmpty , null ) ; }
Distance : 4

103
Tree	{ escapeJavaStyleString ( str ) ; if }
Code	{ escapeJavaStyleString ( str ) ; if }
Distance : 6

104
Tree	{ return escapeJavaStyleString ( PARAM.escapePlus , null ) ; }
Code	{ return escapeJavaStyleString ( PARAM.escapePlus , null ) ; }
Distance : 4

105
Tree	{ return escapeJavaStyleString ( Integer.MAX_VALUE , null ) ; }
Code	{ return escapeJavaStyleString ( Integer.MAX_VALUE , null ) ; }
Distance : 4

106
Tree	{ return escapeJavaStyleString ( instanceof , null ) ; }
Code	{ return escapeJavaStyleString ( instanceof , null ) ; }
Distance : 4

107
Tree	{ return escapeJavaStyleString ( EscapeUtils.ESCAPE_JAVA , null ) ; }
Code	{ return escapeJavaStyleString ( EscapeUtils.ESCAPE_JAVA , null ) ; }
Distance : 4

108
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 3

109
Tree	{ escapeJavaStyleString ( str ) ; assertArrayEquals }
Code	{ escapeJavaStyleString ( str ) ; assertArrayEquals }
Distance : 6

110
Tree	{ this ( str , str , str , null ) ; }
Code	{ this ( str , str , str , null ) ; }
Distance : 6

111
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 7

112
Tree	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Distance : 7

113
Tree	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Distance : 4

114
Tree	{ return toLong . escapeJavaStyleString ( str ) ; }
Code	{ return toLong . escapeJavaStyleString ( str ) ; }
Distance : 6

115
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; }
Code	{ super . escapeJavaStyleString ( str ) ; return str ; }
Distance : 7

116
Tree	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Distance : 4

117
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Type ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Type ( str ) ) ; }
Distance : 10

118
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

119
Tree	{ return escapeJavaStyleString ( str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , super(); ) ; }
Distance : 3

120
Tree	{ return escapeJavaStyleString ( str , true ) ; } Calendar
Code	{ return escapeJavaStyleString ( str , true ) ; } Calendar
Distance : 3

121
Tree	{ return escapeJavaStyleString ( str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , continue; ) ; }
Distance : 3

122
Tree	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Distance : 4

123
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } length
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } length
Distance : 5

124
Tree	{ this ( str , str , str , super(); ) ; }
Code	{ this ( str , str , str , super(); ) ; }
Distance : 6

125
Tree	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Distance : 4

126
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } ex
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } ex
Distance : 8

127
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } mutNum
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } mutNum
Distance : 8

128
Tree	{ this ( str , str , str , continue; ) ; }
Code	{ this ( str , str , str , continue; ) ; }
Distance : 6

129
Tree	{ return escapeJavaStyleString ( this , str ) ; }
Code	{ return escapeJavaStyleString ( this , str ) ; }
Distance : 4

130
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } !=
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } !=
Distance : 8

131
Tree	{ escapeJavaStyleString ( str ) ; for }
Code	{ escapeJavaStyleString ( str ) ; for }
Distance : 6

132
Tree	{ return escapeJavaStyleString ( str , Double.MAX_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , Double.MAX_VALUE ) ; }
Distance : 3

133
Tree	{ return escapeJavaStyleString ( str , true ) ; } pattern
Code	{ return escapeJavaStyleString ( str , true ) ; } pattern
Distance : 3

134
Tree	{ return escapeJavaStyleString ( str , true ) ; } CharSequence
Code	{ return escapeJavaStyleString ( str , true ) ; } CharSequence
Distance : 3

135
Tree	{ return sb.buffer.length . escapeJavaStyleString ( str ) ; }
Code	{ return sb.buffer.length . escapeJavaStyleString ( str ) ; }
Distance : 6

136
Tree	{ return escapeJavaStyleString ( str , , , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , , , null , str ) ; }
Distance : 4

137
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

138
Tree	{ return str . escapeJavaStyleString ( str , return; , super(); ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , super(); ) ; }
Distance : 4

139
Tree	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Distance : 6

140
Tree	{ return escapeJavaStyleString ( str , super(); , super(); , str ) ; }
Code	{ return escapeJavaStyleString ( str , super(); , super(); , str ) ; }
Distance : 4

141
Tree	{ super . escapeJavaStyleString ( str ) ; return return ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return ; }
Distance : 7

142
Tree	{ return str . escapeJavaStyleString ( str , true , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , true , null ) ; }
Distance : 3

143
Tree	{ return str . escapeJavaStyleString ( str , super(); , super(); ) ; }
Code	{ return str . escapeJavaStyleString ( str , super(); , super(); ) ; }
Distance : 4

144
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } short
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } short
Distance : 7

145
Tree	{ return escapeJavaStyleString ( str , null ) ; } -
Code	{ return escapeJavaStyleString ( str , null ) ; } -
Distance : 4

146
Tree	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 7

147
Tree	{ return this . escapeJavaStyleString ( str ) ; } Date
Code	{ return this . escapeJavaStyleString ( str ) ; } Date
Distance : 7

148
Tree	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Distance : 6

149
Tree	{ return this . escapeJavaStyleString ( str ) ; } [
Code	{ return this . escapeJavaStyleString ( str ) ; } [
Distance : 7

150
Tree	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Distance : 6

151
Tree	{ return this . escapeJavaStyleString ( str ) ; } buffer
Code	{ return this . escapeJavaStyleString ( str ) ; } buffer
Distance : 7

152
Tree	{ return this . escapeJavaStyleString ( str ) ; } toString
Code	{ return this . escapeJavaStyleString ( str ) ; } toString
Distance : 7

153
Tree	{ return this . escapeJavaStyleString ( str ) ; } length
Code	{ return this . escapeJavaStyleString ( str ) ; } length
Distance : 7

154
Tree	{ return escapeJavaStyleString ( this , str ) ; } toString
Code	{ return escapeJavaStyleString ( this , str ) ; } toString
Distance : 5

155
Tree	{ return this . escapeJavaStyleString ( str ) ; } mutNum
Code	{ return this . escapeJavaStyleString ( str ) ; } mutNum
Distance : 7

156
Tree	{ return this . escapeJavaStyleString ( str ) ; } !=
Code	{ return this . escapeJavaStyleString ( str ) ; } !=
Distance : 7

157
Tree	{ return this . escapeJavaStyleString ( str ) ; } ex
Code	{ return this . escapeJavaStyleString ( str ) ; } ex
Distance : 7

158
Tree	{ return escapeJavaStyleString ( str , true ) ; } ex
Code	{ return escapeJavaStyleString ( str , true ) ; } ex
Distance : 3

159
Tree	{ return escapeJavaStyleString ( str , true ) ; } ]
Code	{ return escapeJavaStyleString ( str , true ) ; } ]
Distance : 3

160
Tree	{ return escapeJavaStyleString ( str , true ) ; } !=
Code	{ return escapeJavaStyleString ( str , true ) ; } !=
Distance : 3

161
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } ]
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } ]
Distance : 8

162
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } obj
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } obj
Distance : 8

163
Tree	{ this ( str , str , str , return ) ; }
Code	{ this ( str , str , str , return ) ; }
Distance : 6

164
Tree	{ return escapeJavaStyleString ( str , true ) ; } T
Code	{ return escapeJavaStyleString ( str , true ) ; } T
Distance : 3

165
Tree	{ this ( str , str , str , null ) ; } short
Code	{ this ( str , str , str , null ) ; } short
Distance : 7

166
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } CharSequence
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } CharSequence
Distance : 8

167
Tree	{ return escapeJavaStyleString ( str , str , str , str , return ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , return ) ; }
Distance : 6

168
Tree	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Code	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Distance : 4

169
Tree	{ escapeJavaStyleString ( str ) ; return true ; } CharSequence
Code	{ escapeJavaStyleString ( str ) ; return true ; } CharSequence
Distance : 6

170
Tree	{ this ( str , str , str , null ) ; } MutableInt
Code	{ this ( str , str , str , null ) ; } MutableInt
Distance : 7

171
Tree	{ return escapeJavaStyleString ( str , Byte.TYPE ) ; }
Code	{ return escapeJavaStyleString ( str , Byte.TYPE ) ; }
Distance : 3

172
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } pattern
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } pattern
Distance : 8

173
Tree	{ return escapeJavaStyleString ( str , true ) ; } ]
Code	{ return escapeJavaStyleString ( str , true ) ; } ]
Distance : 3

174
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

175
Tree	{ escapeJavaStyleString ( str ) ; return false ; }
Code	{ escapeJavaStyleString ( str ) ; return false ; }
Distance : 6

176
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

177
Tree	{ escapeJavaStyleString ( str ) ; {} }
Code	{ escapeJavaStyleString ( str ) ; {} }
Distance : 6

178
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } toString
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } toString
Distance : 8

179
Tree	{ super . escapeJavaStyleString ( str ) ; return true ; }
Code	{ super . escapeJavaStyleString ( str ) ; return true ; }
Distance : 6

180
Tree	{ escapeJavaStyleString ( str ) ; catch }
Code	{ escapeJavaStyleString ( str ) ; catch }
Distance : 6

181
Tree	{ return this . escapeJavaStyleString ( str ) ; }
Code	{ return this . escapeJavaStyleString ( str ) ; }
Distance : 6

182
Tree	{ escapeJavaStyleString ( str ) ; else }
Code	{ escapeJavaStyleString ( str ) ; else }
Distance : 6

183
Tree	{ this ( str , str , str , null ) ; } obj
Code	{ this ( str , str , str , null ) ; } obj
Distance : 7

184
Tree	{ escapeJavaStyleString ( str ) ; super }
Code	{ escapeJavaStyleString ( str ) ; super }
Distance : 6

185
Tree	{ return escapeJavaStyleString ( OPTION.semiColonRequired , null ) ; }
Code	{ return escapeJavaStyleString ( OPTION.semiColonRequired , null ) ; }
Distance : 4

186
Tree	{ this ( str , str , str , null ) ; } -
Code	{ this ( str , str , str , null ) ; } -
Distance : 7

187
Tree	{ escapeJavaStyleString ( str ) ; super(); }
Code	{ escapeJavaStyleString ( str ) ; super(); }
Distance : 6

188
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

189
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 3

190
Tree	{ return escapeJavaStyleString ( this , str ) ; } mutNum
Code	{ return escapeJavaStyleString ( this , str ) ; } mutNum
Distance : 5

191
Tree	{ return escapeJavaStyleString ( this , str ) ; } !=
Code	{ return escapeJavaStyleString ( this , str ) ; } !=
Distance : 5

192
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } MutableInt
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } MutableInt
Distance : 8

193
Tree	{ return Float.MIN_VALUE . escapeJavaStyleString ( str ) ; }
Code	{ return Float.MIN_VALUE . escapeJavaStyleString ( str ) ; }
Distance : 6

194
Tree	{ return escapeJavaStyleString ( this , str ) ; } length
Code	{ return escapeJavaStyleString ( this , str ) ; } length
Distance : 5

195
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } Date
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } Date
Distance : 5

196
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } ex
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } ex
Distance : 8

197
Tree	{ return escapeJavaStyleString ( str , null ) ; } MutableInt
Code	{ return escapeJavaStyleString ( str , null ) ; } MutableInt
Distance : 4

198
Tree	{ return escapeJavaStyleString ( str , null ) ; } obj
Code	{ return escapeJavaStyleString ( str , null ) ; } obj
Distance : 4

199
Tree	{ return escapeJavaStyleString ( str , true ) ; } T
Code	{ return escapeJavaStyleString ( str , true ) ; } T
Distance : 3

200
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } short
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } short
Distance : 8

201
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } cs
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } cs
Distance : 8

202
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } T
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } T
Distance : 8

203
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } Calendar
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } Calendar
Distance : 8

204
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } !=
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } !=
Distance : 8

205
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } -
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } -
Distance : 8

206
Tree	{ return this . escapeJavaStyleString ( str ) ; } StringUtils
Code	{ return this . escapeJavaStyleString ( str ) ; } StringUtils
Distance : 7

207
Tree	{ return escapeJavaStyleString ( str , null ) ; } cs
Code	{ return escapeJavaStyleString ( str , null ) ; } cs
Distance : 4

208
Tree	{ return escapeJavaStyleString ( this , str ) ; } ex
Code	{ return escapeJavaStyleString ( this , str ) ; } ex
Distance : 5

209
Tree	{ return escapeJavaStyleString ( str , null ) ; } short
Code	{ return escapeJavaStyleString ( str , null ) ; } short
Distance : 4

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
{ escapeJavaStyleString ( out , str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 460
Wrong
========================================================================
False

0
Tree	{ out . out ( str , out ) ; }
Code	{ out . out ( str , out ) ; }
Distance : 6

1
Tree	{ out . out ( str , new Double ( str ) ) ; }
Code	{ out . out ( str , new Double ( str ) ) ; }
Distance : 8

2
Tree	{ escapeJavaStyleString ( out , out , TimeUnit.MILLISECONDS ) ; }
Code	{ escapeJavaStyleString ( out , out , TimeUnit.MILLISECONDS ) ; }
Distance : 4

3
Tree	{ escapeJavaStyleString ( out , out , splitWorker ) ; }
Code	{ escapeJavaStyleString ( out , out , splitWorker ) ; }
Distance : 4

4
Tree	{ escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString ( str , str ) ; }
Distance : 5

5
Tree	{ escapeJavaStyleString ( str , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 9

6
Tree	{ str . escapeJavaStyleString ( ( str ) null ) ; }
Code	{ str . escapeJavaStyleString ( ( str ) null ) ; }
Distance : 8

7
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Distance : 9

8
Tree	{ str . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 7

9
Tree	{ escapeJavaStyleString ( str , str , out ) ; }
Code	{ escapeJavaStyleString ( str , str , out ) ; }
Distance : 4

10
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , continue; ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , continue; ) ; }
Distance : 7

11
Tree	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 8

12
Tree	{ escapeJavaStyleString ( out , null , out ) ; }
Code	{ escapeJavaStyleString ( out , null , out ) ; }
Distance : 4

13
Tree	{ out . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( str , out ) ; }
Distance : 7

14
Tree	{ escapeJavaStyleString ( out , out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out , out ) ; }
Distance : 3

15
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Distance : 4

16
Tree	{ escapeJavaStyleString ( out , out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , out , str , false ) ; }
Distance : 2

17
Tree	{ str . escapeJavaStyleString ( this , str ) ; }
Code	{ str . escapeJavaStyleString ( this , str ) ; }
Distance : 7

18
Tree	{ str . escapeJavaStyleString ( null , out , out , out ) ; }
Code	{ str . escapeJavaStyleString ( null , out , out , out ) ; }
Distance : 6

19
Tree	{ str . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ str . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

20
Tree	{ out . escapeJavaStyleString ( str ) ; }
Code	{ out . escapeJavaStyleString ( str ) ; }
Distance : 8

21
Tree	{ escapeJavaStyleString ( out , out , Void.TYPE ) ; }
Code	{ escapeJavaStyleString ( out , out , Void.TYPE ) ; }
Distance : 4

22
Tree	{ escapeJavaStyleString ( out , out , ModifyType.TRUNCATE ) ; }
Code	{ escapeJavaStyleString ( out , out , ModifyType.TRUNCATE ) ; }
Distance : 4

23
Tree	{ out . escapeJavaStyleString ( str ) ; } {}
Code	{ out . escapeJavaStyleString ( str ) ; } {}
Distance : 9

24
Tree	{ escapeJavaStyleString ( out , out , out ) ; } style
Code	{ escapeJavaStyleString ( out , out , out ) ; } style
Distance : 5

25
Tree	{ escapeJavaStyleString ( out , out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , out , false ) ; }
Distance : 2

26
Tree	{ escapeJavaStyleString ( out , out , Integer.MAX_VALUE ) ; }
Code	{ escapeJavaStyleString ( out , out , Integer.MAX_VALUE ) ; }
Distance : 4

27
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

28
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

29
Tree	{ escapeJavaStyleString ( out , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 7

30
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 7

31
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 11

32
Tree	{ out . escapeJavaStyleString ( out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( out , str , this ) ; }
Distance : 5

33
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( out ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( out ) ) ; }
Distance : 7

34
Tree	{ escapeJavaStyleString ( str , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 9

35
Tree	{ str . escapeJavaStyleString ( this , out ) ; }
Code	{ str . escapeJavaStyleString ( this , out ) ; }
Distance : 8

36
Tree	{ escapeJavaStyleString ( out , out , TimeUnit.DAYS ) ; }
Code	{ escapeJavaStyleString ( out , out , TimeUnit.DAYS ) ; }
Distance : 4

37
Tree	{ escapeJavaStyleString ( str , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

38
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Distance : 7

39
Tree	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Distance : 8

40
Tree	{ escapeJavaStyleString ( ( str ) str , str ) ; }
Code	{ escapeJavaStyleString ( ( str ) str , str ) ; }
Distance : 5

41
Tree	{ out . escapeJavaStyleString ( new BitField ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new BitField ( str , out ) ) ; }
Distance : 8

42
Tree	{ escapeJavaStyleString ( out , super(); ) ; }
Code	{ escapeJavaStyleString ( out , super(); ) ; }
Distance : 5

43
Tree	{ out . escapeJavaStyleString ( new NoSuchElementException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new NoSuchElementException ( str , out ) ) ; }
Distance : 8

44
Tree	{ out . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString ( out , out ) ; }
Distance : 7

45
Tree	{ escapeJavaStyleString ( str , out , str ) ; }
Code	{ escapeJavaStyleString ( str , out , str ) ; }
Distance : 4

46
Tree	{ escapeJavaStyleString ( out , out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , out , str , true ) ; }
Distance : 3

47
Tree	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

48
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Distance : 4

49
Tree	{ this . escapeJavaStyleString ( str ? CharUtils.CR : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? CharUtils.CR : Boolean.TRUE ) ; }
Distance : 8

50
Tree	{ out . escapeJavaStyleString ( str , new MutableDouble ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new MutableDouble ( str ) ) ; }
Distance : 8

51
Tree	{ UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

52
Tree	{ out . escapeJavaStyleString ( true ) ; }
Code	{ out . escapeJavaStyleString ( true ) ; }
Distance : 8

53
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Distance : 4

54
Tree	{ out . escapeJavaStyleString ( str , new NullPointerException ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new NullPointerException ( str ) ) ; }
Distance : 8

55
Tree	{ escapeJavaStyleString ( str , null , out ) ; }
Code	{ escapeJavaStyleString ( str , null , out ) ; }
Distance : 4

56
Tree	{ out . escapeJavaStyleString ( this , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this , out , out ) ; }
Distance : 7

57
Tree	{ escapeJavaStyleString ( out , return; ) ; }
Code	{ escapeJavaStyleString ( out , return; ) ; }
Distance : 5

58
Tree	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

59
Tree	{ out . escapeJavaStyleString ( this , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str ) ; }
Distance : 7

60
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 7

61
Tree	{ escapeJavaStyleString ( out , null , str ) ; }
Code	{ escapeJavaStyleString ( out , null , str ) ; }
Distance : 4

62
Tree	{ out . escapeJavaStyleString ( str ? CharUtils.CR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? CharUtils.CR : Boolean.TRUE ) ; }
Distance : 8

63
Tree	{ out . escapeJavaStyleString ( ( str ) null ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) null ) ; }
Distance : 8

64
Tree	{ escapeJavaStyleString ( out , out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , out , str , out ) ; }
Distance : 3

65
Tree	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : Boolean.TRUE ) ; }
Distance : 8

66
Tree	{ escapeJavaStyleString ( out , out , false ) ; } style
Code	{ escapeJavaStyleString ( out , out , false ) ; } style
Distance : 4

67
Tree	{ this . out . escapeJavaStyleString ( str ) ; }
Code	{ this . out . escapeJavaStyleString ( str ) ; }
Distance : 8

68
Tree	{ out . escapeJavaStyleString ( str , new Object ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new Object ( str ) ) ; }
Distance : 8

69
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 3

70
Tree	{ out . escapeJavaStyleString ( trim , out ? Boolean.FALSE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( trim , out ? Boolean.FALSE : Boolean.TRUE ) ; }
Distance : 8

71
Tree	{ out . escapeJavaStyleString ( str ? Locale.ROOT : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? Locale.ROOT : Boolean.TRUE ) ; }
Distance : 8

72
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Distance : 4

73
Tree	{ out . escapeJavaStyleString ( out , false ) ; }
Code	{ out . escapeJavaStyleString ( out , false ) ; }
Distance : 6

74
Tree	{ out . escapeJavaStyleString ( ( out ) null ) ; }
Code	{ out . escapeJavaStyleString ( ( out ) null ) ; }
Distance : 9

75
Tree	{ out . str ( str , out ) ; }
Code	{ out . str ( str , out ) ; }
Distance : 6

76
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 3

77
Tree	{ str . escapeJavaStyleString ( str , out , out , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , out , this ) ; }
Distance : 6

78
Tree	{ out . out ( str , new assertFalse ( str ) ) ; }
Code	{ out . out ( str , new assertFalse ( str ) ) ; }
Distance : 8

79
Tree	{ out . escapeJavaStyleString ( this , str ) ; } obj
Code	{ out . escapeJavaStyleString ( this , str ) ; } obj
Distance : 8

80
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } CharSequence
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } CharSequence
Distance : 7

81
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } obj
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } obj
Distance : 5

82
Tree	{ out . out ( str , new MutableDouble ( str ) ) ; }
Code	{ out . out ( str , new MutableDouble ( str ) ) ; }
Distance : 8

83
Tree	{ out . out ( str , new NullPointerException ( str ) ) ; }
Code	{ out . out ( str , new NullPointerException ( str ) ) ; }
Distance : 8

84
Tree	{ out () . escapeJavaStyleString ( str , out ) ; } short
Code	{ out () . escapeJavaStyleString ( str , out ) ; } short
Distance : 9

85
Tree	{ out . escapeJavaStyleString ( str , out , this ) ; } style
Code	{ out . escapeJavaStyleString ( str , out , this ) ; } style
Distance : 7

86
Tree	{ out . escapeJavaStyleString ( str , out , this ) ; } short
Code	{ out . escapeJavaStyleString ( str , out , this ) ; } short
Distance : 7

87
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } byte
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } byte
Distance : 8

88
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } cs
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } cs
Distance : 8

89
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; } style
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; } style
Distance : 5

90
Tree	{ out . out ( str , new IOException ( str ) ) ; }
Code	{ out . out ( str , new IOException ( str ) ) ; }
Distance : 8

91
Tree	{ out . out ( str , new false ( str ) ) ; }
Code	{ out . out ( str , new false ( str ) ) ; }
Distance : 7

92
Tree	{ out . out ( str , new Float ( str ) ) ; }
Code	{ out . out ( str , new Float ( str ) ) ; }
Distance : 8

93
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } isEquals
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } isEquals
Distance : 8

94
Tree	{ out . escapeJavaStyleString ( false ) ; } {}
Code	{ out . escapeJavaStyleString ( false ) ; } {}
Distance : 8

95
Tree	{ out . escapeJavaStyleString ( false ) ; } MutableInt
Code	{ out . escapeJavaStyleString ( false ) ; } MutableInt
Distance : 8

96
Tree	{ out . out ( str , new Class ( str ) ) ; }
Code	{ out . out ( str , new Class ( str ) ) ; }
Distance : 8

97
Tree	{ out . escapeJavaStyleString ( false ) ; } isEquals
Code	{ out . escapeJavaStyleString ( false ) ; } isEquals
Distance : 8

98
Tree	{ out . escapeJavaStyleString ( false ) ; } cs
Code	{ out . escapeJavaStyleString ( false ) ; } cs
Distance : 8

99
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } {}
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } {}
Distance : 8

100
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } isEquals
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } isEquals
Distance : 8

101
Tree	{ out . escapeJavaStyleString ( this , str ) ; } {}
Code	{ out . escapeJavaStyleString ( this , str ) ; } {}
Distance : 8

102
Tree	{ out . out ( out , out ) ; }
Code	{ out . out ( out , out ) ; }
Distance : 7

103
Tree	{ out . out ( str , new Object ( str ) ) ; }
Code	{ out . out ( str , new Object ( str ) ) ; }
Distance : 8

104
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } MutableInt
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } MutableInt
Distance : 8

105
Tree	{ out . out ( str , new Long ( str ) ) ; }
Code	{ out . out ( str , new Long ( str ) ) ; }
Distance : 8

106
Tree	{ escapeJavaStyleString ( str , str , str ) ; }
Code	{ escapeJavaStyleString ( str , str , str ) ; }
Distance : 4

107
Tree	{ out . this . escapeJavaStyleString ( str , str , out ) ; }
Code	{ out . this . escapeJavaStyleString ( str , str , out ) ; }
Distance : 8

108
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } obj
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } obj
Distance : 8

109
Tree	{ escapeJavaStyleString ( out , str , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , str , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 7

110
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } short
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } short
Distance : 10

111
Tree	{ str . escapeJavaStyleString ( this , out , str ) ; }
Code	{ str . escapeJavaStyleString ( this , out , str ) ; }
Distance : 7

112
Tree	{ str . escapeJavaStyleString ( out ) ; }
Code	{ str . escapeJavaStyleString ( out ) ; }
Distance : 8

113
Tree	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , null ) ; }
Distance : 6

114
Tree	{ str . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString ( out , str ) ; }
Distance : 6

115
Tree	{ str . escapeJavaStyleString ( out , true ) ; }
Code	{ str . escapeJavaStyleString ( out , true ) ; }
Distance : 7

116
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

117
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } {}
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } {}
Distance : 8

118
Tree	{ str . escapeJavaStyleString ( this , str , str ) ; }
Code	{ str . escapeJavaStyleString ( this , str , str ) ; }
Distance : 6

119
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , return; ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , return; ) ; }
Distance : 7

120
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } ex
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } ex
Distance : 6

121
Tree	{ out . escapeJavaStyleString ( super(); , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( super(); , out , out , out ) ; }
Distance : 6

122
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 3

123
Tree	{ this . str . escapeJavaStyleString ( out ) ; }
Code	{ this . str . escapeJavaStyleString ( out ) ; }
Distance : 8

124
Tree	{ out . escapeJavaStyleString ( false ) ; } byte
Code	{ out . escapeJavaStyleString ( false ) ; } byte
Distance : 8

125
Tree	{ str . escapeJavaStyleString ( out , out , str , this ) ; }
Code	{ str . escapeJavaStyleString ( out , out , str , this ) ; }
Distance : 5

126
Tree	{ str . escapeJavaStyleString ( out . escapeJavaStyleString ( out ) ) ; }
Code	{ str . escapeJavaStyleString ( out . escapeJavaStyleString ( out ) ) ; }
Distance : 8

127
Tree	{ escapeJavaStyleString ( out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out ) ; }
Distance : 4

128
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

129
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } toString
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } toString
Distance : 7

130
Tree	{ str . str ( str , out ) ; }
Code	{ str . str ( str , out ) ; }
Distance : 7

131
Tree	{ str . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( str , str ) ; }
Distance : 7

132
Tree	{ escapeJavaStyleString ( ( str ) str , out ) ; } style
Code	{ escapeJavaStyleString ( ( str ) str , out ) ; } style
Distance : 6

133
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } cs
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } cs
Distance : 8

134
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 9

135
Tree	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Distance : 9

136
Tree	{ out . escapeJavaStyleString ( StringUtils.EMPTY , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( StringUtils.EMPTY , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

137
Tree	{ out . escapeJavaStyleString ( str , super(); , str ) ; }
Code	{ out . escapeJavaStyleString ( str , super(); , str ) ; }
Distance : 6

138
Tree	{ Boolean.TRUE . escapeJavaStyleString ( str , out ) ; }
Code	{ Boolean.TRUE . escapeJavaStyleString ( str , out ) ; }
Distance : 7

139
Tree	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( out ) , null ) ; }
Distance : 8

140
Tree	{ out . escapeJavaStyleString ( ( out ) super(); ) ; }
Code	{ out . escapeJavaStyleString ( ( out ) super(); ) ; }
Distance : 9

141
Tree	{ this . escapeJavaStyleString ( str ? CharUtils.NUL : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? CharUtils.NUL : Boolean.TRUE ) ; }
Distance : 8

142
Tree	{ escapeJavaStyleString ( ( str ) str , out ) ; } short
Code	{ escapeJavaStyleString ( ( str ) str , out ) ; } short
Distance : 6

143
Tree	{ escapeJavaStyleString ( out , null ) ; }
Code	{ escapeJavaStyleString ( out , null ) ; }
Distance : 5

144
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

145
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 7

146
Tree	{ d1 . escapeJavaStyleString ( str , out ) ; }
Code	{ d1 . escapeJavaStyleString ( str , out ) ; }
Distance : 7

147
Tree	{ out . escapeJavaStyleString ( str , null , out ) ; }
Code	{ out . escapeJavaStyleString ( str , null , out ) ; }
Distance : 6

148
Tree	{ escapeJavaStyleString ( out , false ) ; }
Code	{ escapeJavaStyleString ( out , false ) ; }
Distance : 4

149
Tree	{ str () . escapeJavaStyleString ( out , str ) ; }
Code	{ str () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

150
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

151
Tree	{ out . escapeJavaStyleString ( ( out ) return; ) ; }
Code	{ out . escapeJavaStyleString ( ( out ) return; ) ; }
Distance : 9

152
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 4

153
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; }
Distance : 4

154
Tree	{ escapeJavaStyleString ( out , out , Float.MAX_VALUE ) ; }
Code	{ escapeJavaStyleString ( out , out , Float.MAX_VALUE ) ; }
Distance : 4

155
Tree	{ str . out ( str , str ) ; }
Code	{ str . out ( str , str ) ; }
Distance : 6

156
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 7

157
Tree	{ escapeJavaStyleString ( out , out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , out , true ) ; }
Distance : 3

158
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } Calendar
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } Calendar
Distance : 7

159
Tree	{ str . escapeJavaStyleString ( out , str , this ) ; }
Code	{ str . escapeJavaStyleString ( out , str , this ) ; }
Distance : 5

160
Tree	{ str . this . escapeJavaStyleString ( out , out , str ) ; }
Code	{ str . this . escapeJavaStyleString ( out , out , str ) ; }
Distance : 8

161
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Distance : 9

162
Tree	{ str . escapeJavaStyleString ( out , out , this ) ; }
Code	{ str . escapeJavaStyleString ( out , out , this ) ; }
Distance : 6

163
Tree	{ cex . escapeJavaStyleString ( str , out ) ; }
Code	{ cex . escapeJavaStyleString ( str , out ) ; }
Distance : 7

164
Tree	{ out . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString ( out , str ) ; }
Distance : 6

165
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } {}
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } {}
Distance : 5

166
Tree	{ out . escapeJavaStyleString ( ( out ) continue; ) ; }
Code	{ out . escapeJavaStyleString ( ( out ) continue; ) ; }
Distance : 9

167
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } cs
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } cs
Distance : 8

168
Tree	{ out . escapeJavaStyleString ( null , str , str , out ) ; }
Code	{ out . escapeJavaStyleString ( null , str , str , out ) ; }
Distance : 5

169
Tree	{ NumberStrategy . escapeJavaStyleString ( str , out ) ; }
Code	{ NumberStrategy . escapeJavaStyleString ( str , out ) ; }
Distance : 7

170
Tree	{ out . escapeJavaStyleString ( str , str , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , str , str , this ) ; }
Distance : 5

171
Tree	{ out . escapeJavaStyleString ( str , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

172
Tree	{ str . escapeJavaStyleString ( true ) ; }
Code	{ str . escapeJavaStyleString ( true ) ; }
Distance : 8

173
Tree	{ escapeJavaStyleString ( ( out ) str , out ) ; }
Code	{ escapeJavaStyleString ( ( out ) str , out ) ; }
Distance : 5

174
Tree	{ out . escapeJavaStyleString ( this , out ) ; }
Code	{ out . escapeJavaStyleString ( this , out ) ; }
Distance : 7

175
Tree	{ out . escapeJavaStyleString ( str ) ; } MutableInt
Code	{ out . escapeJavaStyleString ( str ) ; } MutableInt
Distance : 9

176
Tree	{ out . escapeJavaStyleString ( str , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

177
Tree	{ str . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString ( out , out ) ; }
Distance : 7

178
Tree	{ out . out ( str , str ) ; }
Code	{ out . out ( str , str ) ; }
Distance : 6

179
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } ex
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } ex
Distance : 7

180
Tree	{ str () . escapeJavaStyleString ( out , out ) ; }
Code	{ str () . escapeJavaStyleString ( out , out ) ; }
Distance : 8

181
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } obj
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } obj
Distance : 8

182
Tree	{ str . escapeJavaStyleString ( out , false ) ; }
Code	{ str . escapeJavaStyleString ( out , false ) ; }
Distance : 6

183
Tree	{ str . escapeJavaStyleString ( str , out , str , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , str , this ) ; }
Distance : 6

184
Tree	{ out . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : Boolean.TRUE ) ; }
Distance : 8

185
Tree	{ out . escapeJavaStyleString ( new IllegalStateException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new IllegalStateException ( str , out ) ) ; }
Distance : 8

186
Tree	{ escapeJavaStyleString ( out , str , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , str , out ) ; }
Distance : 2

187
Tree	{ out . escapeJavaStyleString ( continue; , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( continue; , out , out , out ) ; }
Distance : 6

188
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } byte
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } byte
Distance : 8

189
Tree	{ escapeJavaStyleString ( str , null ) ; }
Code	{ escapeJavaStyleString ( str , null ) ; }
Distance : 5

190
Tree	{ escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString ( out , str ) ; }
Distance : 4

191
Tree	{ out . escapeJavaStyleString ( this . out , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . out , out , out , out ) ; }
Distance : 7

192
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 5

193
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } byte
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } byte
Distance : 8

194
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Distance : 9

195
Tree	{ out . escapeJavaStyleString ( out ) ; }
Code	{ out . escapeJavaStyleString ( out ) ; }
Distance : 8

196
Tree	{ str . out ( str , out ) ; }
Code	{ str . out ( str , out ) ; }
Distance : 6

197
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 7

198
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

199
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } CharSequence
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } CharSequence
Distance : 6

200
Tree	{ this . out . escapeJavaStyleString ( out ) ; }
Code	{ this . out . escapeJavaStyleString ( out ) ; }
Distance : 8

201
Tree	{ str . escapeJavaStyleString ( str , true ) ; }
Code	{ str . escapeJavaStyleString ( str , true ) ; }
Distance : 7

202
Tree	{ out . escapeJavaStyleString ( new false ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new false ( str , out ) ) ; }
Distance : 8

203
Tree	{ delimiters.length . escapeJavaStyleString ( str , out ) ; }
Code	{ delimiters.length . escapeJavaStyleString ( str , out ) ; }
Distance : 7

204
Tree	{ escapeJavaStyleString ( str , str , true ) ; }
Code	{ escapeJavaStyleString ( str , str , true ) ; }
Distance : 4

205
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 11

206
Tree	{ escapeJavaStyleString ( out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , str , true ) ; }
Distance : 3

207
Tree	{ escapeJavaStyleString ( out , return; , out ) ; }
Code	{ escapeJavaStyleString ( out , return; , out ) ; }
Distance : 4

208
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; } short
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; } short
Distance : 5

209
Tree	{ out . escapeJavaStyleString ( new Locale ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new Locale ( str , out ) ) ; }
Distance : 8

210
Tree	{ escapeJavaStyleString ( out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , str , true ) ; }
Distance : 3

211
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , str ) ; }
Distance : 3

212
Tree	{ out . escapeJavaStyleString ( str , false ) ; }
Code	{ out . escapeJavaStyleString ( str , false ) ; }
Distance : 6

213
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 2

214
Tree	{ out . escapeJavaStyleString ( str ? trim : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? trim : Boolean.TRUE ) ; }
Distance : 8

215
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; }
Distance : 6

216
Tree	{ escapeJavaStyleString ( out , out , Boolean.FALSE ) ; }
Code	{ escapeJavaStyleString ( out , out , Boolean.FALSE ) ; }
Distance : 4

217
Tree	{ out . this . escapeJavaStyleString ( str , str , str ) ; }
Code	{ out . this . escapeJavaStyleString ( str , str , str ) ; }
Distance : 8

218
Tree	{ out . escapeJavaStyleString ( str ? Boolean.FALSE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? Boolean.FALSE : Boolean.TRUE ) ; }
Distance : 8

219
Tree	{ escapeJavaStyleString ( ( str ) out , out ) ; }
Code	{ escapeJavaStyleString ( ( str ) out , out ) ; }
Distance : 5

220
Tree	{ escapeJavaStyleString ( ( out ) out , out ) ; }
Code	{ escapeJavaStyleString ( ( out ) out , out ) ; }
Distance : 6

221
Tree	{ str . escapeJavaStyleString ( out , out , out , this ) ; }
Code	{ str . escapeJavaStyleString ( out , out , out , this ) ; }
Distance : 5

222
Tree	{ out . escapeJavaStyleString ( str ) ; } isEquals
Code	{ out . escapeJavaStyleString ( str ) ; } isEquals
Distance : 9

223
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } byte
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } byte
Distance : 5

224
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , str ) ; }
Distance : 3

225
Tree	{ out () . escapeJavaStyleString ( str , str ) ; }
Code	{ out () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

226
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 9

227
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT , out ) ; }
Distance : 4

228
Tree	{ out . escapeJavaStyleString ( this . out , str , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . out , str , out , out ) ; }
Distance : 6

229
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } ]
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } ]
Distance : 7

230
Tree	{ str . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 7

231
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 11

232
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

233
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

234
Tree	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Code	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Distance : 9

235
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , str ) ; }
Distance : 4

236
Tree	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( out ) ) ; }
Code	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( out ) ) ; }
Distance : 8

237
Tree	{ out . out ( out , str ) ; }
Code	{ out . out ( out , str ) ; }
Distance : 7

238
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } MutableInt
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } MutableInt
Distance : 5

239
Tree	{ escapeJavaStyleString ( str , out , str , out ) ; }
Code	{ escapeJavaStyleString ( str , out , str , out ) ; }
Distance : 4

240
Tree	{ str . escapeJavaStyleString ( str , str , this ) ; }
Code	{ str . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

241
Tree	{ out . escapeJavaStyleString ( str , false ) ; } style
Code	{ out . escapeJavaStyleString ( str , false ) ; } style
Distance : 7

242
Tree	{ str . escapeJavaStyleString ( this , out , out ) ; }
Code	{ str . escapeJavaStyleString ( this , out , out ) ; }
Distance : 7

243
Tree	{ this . escapeJavaStyleString ( str ? rhs.length : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? rhs.length : Boolean.TRUE ) ; }
Distance : 8

244
Tree	{ out . escapeJavaStyleString ( new Object ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new Object ( str , out ) ) ; }
Distance : 8

245
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 5

246
Tree	{ escapeJavaStyleString ( out , return; , str ) ; }
Code	{ escapeJavaStyleString ( out , return; , str ) ; }
Distance : 4

247
Tree	{ escapeJavaStyleString ( str , out , str . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , out , str . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 8

248
Tree	{ str () . escapeJavaStyleString ( str , str ) ; }
Code	{ str () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

249
Tree	{ escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString ( str , out ) ; }
Distance : 5

250
Tree	{ out . escapeJavaStyleString ( this , str , out ) ; } style
Code	{ out . escapeJavaStyleString ( this , str , out ) ; } style
Distance : 7

251
Tree	{ escapeJavaStyleString ( str , str , false ) ; }
Code	{ escapeJavaStyleString ( str , str , false ) ; }
Distance : 3

252
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } !=
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } !=
Distance : 7

253
Tree	{ out . escapeJavaStyleString ( this , str , out ) ; } short
Code	{ out . escapeJavaStyleString ( this , str , out ) ; } short
Distance : 7

254
Tree	{ out . escapeJavaStyleString ( str , new Double ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new Double ( str ) ) ; }
Distance : 8

255
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT , str ) ; }
Distance : 4

256
Tree	{ this . escapeJavaStyleString ( str ? StringUtils.EMPTY : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? StringUtils.EMPTY : Boolean.TRUE ) ; }
Distance : 8

257
Tree	{ out . escapeJavaStyleString ( null , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( null , out , out , str ) ; }
Distance : 6

258
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 11

259
Tree	{ escapeJavaStyleString ( str , out , out , str ) ; }
Code	{ escapeJavaStyleString ( str , out , out , str ) ; }
Distance : 4

260
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( str ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( str ) ) ; }
Distance : 8

261
Tree	{ out . escapeJavaStyleString ( new IllegalArgumentException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new IllegalArgumentException ( str , out ) ) ; }
Distance : 8

262
Tree	{ out . escapeJavaStyleString ( str ) ; } cs
Code	{ out . escapeJavaStyleString ( str ) ; } cs
Distance : 9

263
Tree	{ escapeJavaStyleString ( ( out ) out , str ) ; }
Code	{ escapeJavaStyleString ( ( out ) out , str ) ; }
Distance : 6

264
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } style
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } style
Distance : 12

265
Tree	{ out . escapeJavaStyleString ( str , str , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , str , out , this ) ; }
Distance : 5

266
Tree	{ out . escapeJavaStyleString ( str , new IllegalArgumentException ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new IllegalArgumentException ( str ) ) ; }
Distance : 8

267
Tree	{ this . escapeJavaStyleString ( str ? Calendar.SUNDAY : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? Calendar.SUNDAY : Boolean.TRUE ) ; }
Distance : 8

268
Tree	{ out . escapeJavaStyleString ( new NullPointerException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new NullPointerException ( str , out ) ) ; }
Distance : 8

269
Tree	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Distance : 8

270
Tree	{ out . escapeJavaStyleString ( this . str , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this . str , out , out , str ) ; }
Distance : 8

271
Tree	{ out . escapeJavaStyleString ( str , false ) ; } short
Code	{ out . escapeJavaStyleString ( str , false ) ; } short
Distance : 7

272
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } pattern
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } pattern
Distance : 6

273
Tree	{ escapeJavaStyleString ( str , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out ) ; }
Distance : 4

274
Tree	{ escapeJavaStyleString ( out , out , CharUtils.NUL ) ; }
Code	{ escapeJavaStyleString ( out , out , CharUtils.NUL ) ; }
Distance : 4

275
Tree	{ str . this . escapeJavaStyleString ( out , out , out ) ; }
Code	{ str . this . escapeJavaStyleString ( out , out , out ) ; }
Distance : 8

276
Tree	{ this . out . escapeJavaStyleString ( str ) ; } obj
Code	{ this . out . escapeJavaStyleString ( str ) ; } obj
Distance : 9

277
Tree	{ out . escapeJavaStyleString ( new BigDecimal ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new BigDecimal ( str , out ) ) ; }
Distance : 8

278
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } short
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } short
Distance : 12

279
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

280
Tree	{ out . escapeJavaStyleString ( out , out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , str , this ) ; }
Distance : 5

281
Tree	{ out . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 7

282
Tree	{ Integer.MAX_VALUE . escapeJavaStyleString ( str , out ) ; }
Code	{ Integer.MAX_VALUE . escapeJavaStyleString ( str , out ) ; }
Distance : 7

283
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; } style
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; } style
Distance : 10

284
Tree	{ out . escapeJavaStyleString ( this , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this , out , str ) ; }
Distance : 7

285
Tree	{ ; . escapeJavaStyleString ( str , out ) ; }
Code	{ ; . escapeJavaStyleString ( str , out ) ; }
Distance : 7

286
Tree	{ out . escapeJavaStyleString ( str , new Float ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new Float ( str ) ) ; }
Distance : 8

287
Tree	{ out . escapeJavaStyleString ( out , true ) ; }
Code	{ out . escapeJavaStyleString ( out , true ) ; }
Distance : 7

288
Tree	{ out . escapeJavaStyleString ( str , out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , str , this ) ; }
Distance : 6

289
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } isEquals
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } isEquals
Distance : 8

290
Tree	{ out . escapeJavaStyleString ( null , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( null , out , out , out ) ; }
Distance : 6

291
Tree	{ out . escapeJavaStyleString ( ( str ) super(); ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) super(); ) ; }
Distance : 8

292
Tree	{ out . str ( out , out ) ; }
Code	{ out . str ( out , out ) ; }
Distance : 6

293
Tree	{ escapeJavaStyleString ( str , out , str , true ) ; }
Code	{ escapeJavaStyleString ( str , out , str , true ) ; }
Distance : 4

294
Tree	{ escapeJavaStyleString ( ( str ) str , out ) ; }
Code	{ escapeJavaStyleString ( ( str ) str , out ) ; }
Distance : 5

295
Tree	{ escapeJavaStyleString ( str , out , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , out , true ) ; }
Distance : 4

296
Tree	{ escapeJavaStyleString ( out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str ) ; }
Distance : 4

297
Tree	{ str . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ str . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

298
Tree	{ out . escapeJavaStyleString ( str , out ) ; } style
Code	{ out . escapeJavaStyleString ( str , out ) ; } style
Distance : 8

299
Tree	{ str . escapeJavaStyleString ( this , str , out ) ; }
Code	{ str . escapeJavaStyleString ( this , str , out ) ; }
Distance : 6

300
Tree	{ this . escapeJavaStyleString ( str ? Boolean.FALSE : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? Boolean.FALSE : Boolean.TRUE ) ; }
Distance : 8

301
Tree	{ this . escapeJavaStyleString ( str ? ++ : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? ++ : Boolean.TRUE ) ; }
Distance : 8

302
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

303
Tree	{ str . escapeJavaStyleString ( ( out ) null ) ; }
Code	{ str . escapeJavaStyleString ( ( out ) null ) ; }
Distance : 9

304
Tree	{ escapeJavaStyleString ( str , false ) ; }
Code	{ escapeJavaStyleString ( str , false ) ; }
Distance : 4

305
Tree	{ this . out . escapeJavaStyleString ( str ) ; } {}
Code	{ this . out . escapeJavaStyleString ( str ) ; } {}
Distance : 9

306
Tree	{ out . escapeJavaStyleString ( str , out ) ; } short
Code	{ out . escapeJavaStyleString ( str , out ) ; } short
Distance : 8

307
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

308
Tree	{ escapeJavaStyleString ( ( str ) out , str ) ; }
Code	{ escapeJavaStyleString ( ( str ) out , str ) ; }
Distance : 5

309
Tree	{ escapeJavaStyleString ( str , str , true ) ; }
Code	{ escapeJavaStyleString ( str , str , true ) ; }
Distance : 4

310
Tree	{ escapeJavaStyleString ( out , out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , out , str ) ; }
Distance : 3

311
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 9

312
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str ) ; }
Distance : 5

313
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } isEquals
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } isEquals
Distance : 5

314
Tree	{ out . escapeJavaStyleString ( false ) ; }
Code	{ out . escapeJavaStyleString ( false ) ; }
Distance : 7

315
Tree	{ this . str . escapeJavaStyleString ( str ) ; }
Code	{ this . str . escapeJavaStyleString ( str ) ; }
Distance : 8

316
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Distance : 9

317
Tree	{ escapeJavaStyleString ( str , out , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , out , false ) ; }
Distance : 3

318
Tree	{ str . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( str , out ) ; }
Distance : 7

319
Tree	{ escapeJavaStyleString ( out , super(); , out ) ; }
Code	{ escapeJavaStyleString ( out , super(); , out ) ; }
Distance : 4

320
Tree	{ out . escapeJavaStyleString ( null , str , out , str ) ; }
Code	{ out . escapeJavaStyleString ( null , str , out , str ) ; }
Distance : 5

321
Tree	{ out . escapeJavaStyleString ( str , new IOException ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new IOException ( str ) ) ; }
Distance : 8

322
Tree	{ out . escapeJavaStyleString ( str , out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , out , this ) ; }
Distance : 6

323
Tree	{ out () . escapeJavaStyleString ( out , str ) ; }
Code	{ out () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

324
Tree	{ escapeJavaStyleString ( str , out , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out , out ) ; }
Distance : 4

325
Tree	{ str . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Distance : 8

326
Tree	{ out . escapeJavaStyleString ( str , null , str ) ; }
Code	{ out . escapeJavaStyleString ( str , null , str ) ; }
Distance : 6

327
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } obj
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } obj
Distance : 8

328
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } T
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } T
Distance : 7

329
Tree	{ this . out . escapeJavaStyleString ( str ) ; } MutableInt
Code	{ this . out . escapeJavaStyleString ( str ) ; } MutableInt
Distance : 9

330
Tree	{ str . out ( out , out ) ; }
Code	{ str . out ( out , out ) ; }
Distance : 7

331
Tree	{ this . out . escapeJavaStyleString ( str ) ; } isEquals
Code	{ this . out . escapeJavaStyleString ( str ) ; } isEquals
Distance : 9

332
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; } short
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; } short
Distance : 10

333
Tree	{ escapeJavaStyleString ( out , out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str , str ) ; }
Distance : 3

334
Tree	{ escapeJavaStyleString ( str , out , str , false ) ; }
Code	{ escapeJavaStyleString ( str , out , str , false ) ; }
Distance : 3

335
Tree	{ out . escapeJavaStyleString ( str ? Calendar.SUNDAY : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? Calendar.SUNDAY : Boolean.TRUE ) ; }
Distance : 8

336
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } toString
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } toString
Distance : 6

337
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } Calendar
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } Calendar
Distance : 6

338
Tree	{ out . escapeJavaStyleString ( str , continue; , str ) ; }
Code	{ out . escapeJavaStyleString ( str , continue; , str ) ; }
Distance : 6

339
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 3

340
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , super(); ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , super(); ) ; }
Distance : 7

341
Tree	{ out . escapeJavaStyleString ( ( str ) continue; ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) continue; ) ; }
Distance : 8

342
Tree	{ out () . escapeJavaStyleString ( out , out ) ; }
Code	{ out () . escapeJavaStyleString ( out , out ) ; }
Distance : 8

343
Tree	{ escapeJavaStyleString ( ( out ) str , str ) ; }
Code	{ escapeJavaStyleString ( ( out ) str , str ) ; }
Distance : 5

344
Tree	{ out . escapeJavaStyleString ( null , out , str , out ) ; }
Code	{ out . escapeJavaStyleString ( null , out , str , out ) ; }
Distance : 6

345
Tree	{ out . escapeJavaStyleString ( out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , this ) ; }
Distance : 6

346
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } ]
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } ]
Distance : 6

347
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } style
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } style
Distance : 10

348
Tree	{ escapeJavaStyleString ( out , continue; , out ) ; }
Code	{ escapeJavaStyleString ( out , continue; , out ) ; }
Distance : 4

349
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } style
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } style
Distance : 10

350
Tree	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Distance : 8

351
Tree	{ this . escapeJavaStyleString ( str ? trim : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? trim : Boolean.TRUE ) ; }
Distance : 8

352
Tree	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? Boolean.FALSE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? Boolean.FALSE : Boolean.TRUE ) ; }
Distance : 8

353
Tree	{ escapeJavaStyleString ( str , super(); ) ; }
Code	{ escapeJavaStyleString ( str , super(); ) ; }
Distance : 5

354
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } !=
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } !=
Distance : 6

355
Tree	{ out . escapeJavaStyleString ( this . out , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this . out , out , out , str ) ; }
Distance : 7

356
Tree	{ out . escapeJavaStyleString ( str , new Class ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new Class ( str ) ) ; }
Distance : 8

357
Tree	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

358
Tree	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

359
Tree	{ this . escapeJavaStyleString ( str ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

360
Tree	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 8

361
Tree	{ out . escapeJavaStyleString ( StringUtils.EMPTY , out ? Boolean.FALSE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( StringUtils.EMPTY , out ? Boolean.FALSE : Boolean.TRUE ) ; }
Distance : 8

362
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } T
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } T
Distance : 6

363
Tree	{ out . escapeJavaStyleString ( this , str ) ; } byte
Code	{ out . escapeJavaStyleString ( this , str ) ; } byte
Distance : 8

364
Tree	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? DateUtils.MILLIS_PER_DAY : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? DateUtils.MILLIS_PER_DAY : Boolean.TRUE ) ; }
Distance : 8

365
Tree	{ escapeJavaStyleString ( out , continue; , str ) ; }
Code	{ escapeJavaStyleString ( out , continue; , str ) ; }
Distance : 4

366
Tree	{ out . escapeJavaStyleString ( this , str ) ; } cs
Code	{ out . escapeJavaStyleString ( this , str ) ; } cs
Distance : 8

367
Tree	{ escapeJavaStyleString ( out , continue; ) ; }
Code	{ escapeJavaStyleString ( out , continue; ) ; }
Distance : 5

368
Tree	{ escapeJavaStyleString ( str , str , false ) ; }
Code	{ escapeJavaStyleString ( str , str , false ) ; }
Distance : 3

369
Tree	{ out . escapeJavaStyleString ( this . out , out , str , out ) ; }
Code	{ out . escapeJavaStyleString ( this . out , out , str , out ) ; }
Distance : 7

370
Tree	{ out . escapeJavaStyleString ( trim , out ? rhs.length : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( trim , out ? rhs.length : Boolean.TRUE ) ; }
Distance : 8

371
Tree	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 8

372
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } {}
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } {}
Distance : 8

373
Tree	{ out . escapeJavaStyleString ( JavaVersion.JAVA_1_5 , out ? Boolean.FALSE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( JavaVersion.JAVA_1_5 , out ? Boolean.FALSE : Boolean.TRUE ) ; }
Distance : 8

374
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

375
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Distance : 9

376
Tree	{ escapeJavaStyleString ( str , null , str ) ; }
Code	{ escapeJavaStyleString ( str , null , str ) ; }
Distance : 4

377
Tree	{ this . out . escapeJavaStyleString ( str ) ; } cs
Code	{ this . out . escapeJavaStyleString ( str ) ; } cs
Distance : 9

378
Tree	{ out . escapeJavaStyleString ( str , new false ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new false ( str ) ) ; }
Distance : 8

379
Tree	{ out . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( str , str ) ; }
Distance : 7

380
Tree	{ out . escapeJavaStyleString ( new RuntimeException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new RuntimeException ( str , out ) ) ; }
Distance : 8

381
Tree	{ out . escapeJavaStyleString ( this . str , str , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this . str , str , out , str ) ; }
Distance : 7

382
Tree	{ out . escapeJavaStyleString ( str , continue; , out ) ; }
Code	{ out . escapeJavaStyleString ( str , continue; , out ) ; }
Distance : 6

383
Tree	{ out . escapeJavaStyleString ( this . out , out , str , str ) ; }
Code	{ out . escapeJavaStyleString ( this . out , out , str , str ) ; }
Distance : 7

384
Tree	{ escapeJavaStyleString ( out , str , out , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out , out ) ; }
Distance : 2

385
Tree	{ str . escapeJavaStyleString ( str , false ) ; }
Code	{ str . escapeJavaStyleString ( str , false ) ; }
Distance : 6

386
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; }
Distance : 7

387
Tree	{ out . escapeJavaStyleString ( null , str , out , out ) ; }
Code	{ out . escapeJavaStyleString ( null , str , out , out ) ; }
Distance : 5

388
Tree	{ escapeJavaStyleString ( out , str , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , str , false ) ; }
Distance : 1

389
Tree	{ out . escapeJavaStyleString ( this , str , out ) ; }
Code	{ out . escapeJavaStyleString ( this , str , out ) ; }
Distance : 6

390
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , out ) ; }
Distance : 3

391
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Distance : 9

392
Tree	{ escapeJavaStyleString ( out , out ) ; } byte
Code	{ escapeJavaStyleString ( out , out ) ; } byte
Distance : 6

393
Tree	{ str . escapeJavaStyleString ( false ) ; }
Code	{ str . escapeJavaStyleString ( false ) ; }
Distance : 7

394
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } short
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } short
Distance : 10

395
Tree	{ escapeJavaStyleString ( out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , str , str ) ; }
Distance : 3

396
Tree	{ out . escapeJavaStyleString ( out , out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , out , this ) ; }
Distance : 5

397
Tree	{ out . escapeJavaStyleString ( str , true ) ; }
Code	{ out . escapeJavaStyleString ( str , true ) ; }
Distance : 7

398
Tree	{ escapeJavaStyleString ( out , out ) ; } cs
Code	{ escapeJavaStyleString ( out , out ) ; } cs
Distance : 6

399
Tree	{ out . escapeJavaStyleString ( str ) ; } obj
Code	{ out . escapeJavaStyleString ( str ) ; } obj
Distance : 9

400
Tree	{ escapeJavaStyleString ( out , out ) ; } isEquals
Code	{ escapeJavaStyleString ( out , out ) ; } isEquals
Distance : 6

401
Tree	{ escapeJavaStyleString ( out , out ) ; } MutableInt
Code	{ escapeJavaStyleString ( out , out ) ; } MutableInt
Distance : 6

402
Tree	{ escapeJavaStyleString ( out , out ) ; } {}
Code	{ escapeJavaStyleString ( out , out ) ; } {}
Distance : 6

403
Tree	{ escapeJavaStyleString ( out , out ) ; } obj
Code	{ escapeJavaStyleString ( out , out ) ; } obj
Distance : 6

404
Tree	{ out . escapeJavaStyleString ( str ? CharUtils.NUL : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? CharUtils.NUL : Boolean.TRUE ) ; }
Distance : 8

405
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 2

406
Tree	{ out . this . escapeJavaStyleString ( out , out , str ) ; }
Code	{ out . this . escapeJavaStyleString ( out , out , str ) ; }
Distance : 8

407
Tree	{ escapeJavaStyleString ( out , out , tokens.length ) ; }
Code	{ escapeJavaStyleString ( out , out , tokens.length ) ; }
Distance : 4

408
Tree	{ out . escapeJavaStyleString ( str ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

409
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 4

410
Tree	{ out . escapeJavaStyleString ( str ) ; } byte
Code	{ out . escapeJavaStyleString ( str ) ; } byte
Distance : 9

411
Tree	{ out . escapeJavaStyleString ( this , str , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str , str ) ; }
Distance : 6

412
Tree	{ out . escapeJavaStyleString ( this . str , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . str , out , out , out ) ; }
Distance : 8

413
Tree	{ escapeJavaStyleString ( str , return; ) ; }
Code	{ escapeJavaStyleString ( str , return; ) ; }
Distance : 5

414
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } MutableInt
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; } MutableInt
Distance : 8

415
Tree	{ escapeJavaStyleString ( out , out , false ) ; } short
Code	{ escapeJavaStyleString ( out , out , false ) ; } short
Distance : 4

416
Tree	{ out . escapeJavaStyleString ( str , return; , str ) ; }
Code	{ out . escapeJavaStyleString ( str , return; , str ) ; }
Distance : 6

417
Tree	{ out . escapeJavaStyleString ( this , str ) ; } isEquals
Code	{ out . escapeJavaStyleString ( this , str ) ; } isEquals
Distance : 8

418
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

419
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

420
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( out ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( out ) ) ; }
Distance : 8

421
Tree	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

422
Tree	{ out . escapeJavaStyleString ( this , str ) ; } MutableInt
Code	{ out . escapeJavaStyleString ( this , str ) ; } MutableInt
Distance : 8

423
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } cs
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; } cs
Distance : 5

424
Tree	{ this . out . escapeJavaStyleString ( str ) ; } byte
Code	{ this . out . escapeJavaStyleString ( str ) ; } byte
Distance : 9

425
Tree	{ escapeJavaStyleString ( str , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , true ) ; }
Distance : 4

426
Tree	{ escapeJavaStyleString ( out , out , out ) ; } short
Code	{ escapeJavaStyleString ( out , out , out ) ; } short
Distance : 5

427
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } MutableInt
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; } MutableInt
Distance : 8

428
Tree	{ escapeJavaStyleString ( out , str , out , false ) ; }
Code	{ escapeJavaStyleString ( out , str , out , false ) ; }
Distance : 1

429
Tree	{ out . escapeJavaStyleString ( str , super(); , out ) ; }
Code	{ out . escapeJavaStyleString ( str , super(); , out ) ; }
Distance : 6

430
Tree	{ str . escapeJavaStyleString ( str ) ; }
Code	{ str . escapeJavaStyleString ( str ) ; }
Distance : 8

431
Tree	{ escapeJavaStyleString ( out , out , false ) ; } short
Code	{ escapeJavaStyleString ( out , out , false ) ; } short
Distance : 4

432
Tree	{ out . escapeJavaStyleString ( out , null , str ) ; }
Code	{ out . escapeJavaStyleString ( out , null , str ) ; }
Distance : 6

433
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , super(); ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , super(); ) ; }
Distance : 7

434
Tree	{ out . escapeJavaStyleString ( str , return; , out ) ; }
Code	{ out . escapeJavaStyleString ( str , return; , out ) ; }
Distance : 6

435
Tree	{ out . escapeJavaStyleString ( false ) ; } obj
Code	{ out . escapeJavaStyleString ( false ) ; } obj
Distance : 8

436
Tree	{ escapeJavaStyleString ( str , continue; ) ; }
Code	{ escapeJavaStyleString ( str , continue; ) ; }
Distance : 5

437
Tree	{ str () . escapeJavaStyleString ( str , out ) ; }
Code	{ str () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

438
Tree	{ escapeJavaStyleString ( str , out , str , str ) ; }
Code	{ escapeJavaStyleString ( str , out , str , str ) ; }
Distance : 4

439
Tree	{ str . escapeJavaStyleString ( str , out , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

440
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , return; ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , return; ) ; }
Distance : 7

441
Tree	{ out () . escapeJavaStyleString ( str , out ) ; }
Code	{ out () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

442
Tree	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_DAY : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_DAY : Boolean.TRUE ) ; }
Distance : 8

443
Tree	{ out . escapeJavaStyleString ( str , new assertFalse ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new assertFalse ( str ) ) ; }
Distance : 8

444
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 9

445
Tree	{ escapeJavaStyleString ( out , out , false ) ; } style
Code	{ escapeJavaStyleString ( out , out , false ) ; } style
Distance : 4

446
Tree	{ out () . escapeJavaStyleString ( str , out ) ; } style
Code	{ out () . escapeJavaStyleString ( str , out ) ; } style
Distance : 9

447
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } pattern
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } pattern
Distance : 7

448
Tree	{ escapeJavaStyleString ( out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out ) ; }
Distance : 3

449
Tree	{ out . this . escapeJavaStyleString ( out , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( out , out , out ) ; }
Distance : 8

450
Tree	{ out . escapeJavaStyleString ( this . out , str , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this . out , str , out , str ) ; }
Distance : 6

451
Tree	{ out . escapeJavaStyleString ( this . str , str , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . str , str , out , out ) ; }
Distance : 7

452
Tree	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

453
Tree	{ out . escapeJavaStyleString ( null , out , str , str ) ; }
Code	{ out . escapeJavaStyleString ( null , out , str , str ) ; }
Distance : 6

454
Tree	{ escapeJavaStyleString ( str , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , true ) ; }
Distance : 4

455
Tree	{ escapeJavaStyleString ( out , super(); , str ) ; }
Code	{ escapeJavaStyleString ( out , super(); , str ) ; }
Distance : 4

456
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , out ) ; }
Distance : 3

457
Tree	{ out . escapeJavaStyleString ( ( str ) return; ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) return; ) ; }
Distance : 8

458
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Distance : 7

459
Tree	{ out . escapeJavaStyleString ( out , null , out ) ; }
Code	{ out . escapeJavaStyleString ( out , null , out ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
{ return escapeJavaStyleString ( str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 210
Wrong
========================================================================
False

0
Tree	{ this . str = str ; for }
Code	{ this . str = str ; for }
Distance : 9

1
Tree	{ this . str = str ; assertArrayEquals }
Code	{ this . str = str ; assertArrayEquals }
Distance : 9

2
Tree	{ this . str = str ; catch }
Code	{ this . str = str ; catch }
Distance : 9

3
Tree	{ this . str = str ; else }
Code	{ this . str = str ; else }
Distance : 9

4
Tree	{ this . str = str ; super }
Code	{ this . str = str ; super }
Distance : 9

5
Tree	{ this . str = str ; ++ }
Code	{ this . str = str ; ++ }
Distance : 9

6
Tree	{ this . str = str ; i }
Code	{ this . str = str ; i }
Distance : 9

7
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

8
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Boolean ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Boolean ( str ) ) ; }
Distance : 10

9
Tree	{ return str . escapeJavaStyleString ( str , null , super(); ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , super(); ) ; }
Distance : 4

10
Tree	{ return str . escapeJavaStyleString ( str , continue; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , continue; , null ) ; }
Distance : 4

11
Tree	{ return escapeJavaStyleString ( str , null , continue; , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , continue; , str ) ; }
Distance : 4

12
Tree	{ return UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

13
Tree	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Distance : 7

14
Tree	{ return Integer.MAX_VALUE . escapeJavaStyleString ( str ) ; }
Code	{ return Integer.MAX_VALUE . escapeJavaStyleString ( str ) ; }
Distance : 6

15
Tree	{ return super . escapeJavaStyleString ( str , str , str , new false ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new false ( str ) ) ; }
Distance : 9

16
Tree	{ return translate . escapeJavaStyleString ( str ) ; }
Code	{ return translate . escapeJavaStyleString ( str ) ; }
Distance : 6

17
Tree	{ return StringUtils.EMPTY . escapeJavaStyleString ( str ) ; }
Code	{ return StringUtils.EMPTY . escapeJavaStyleString ( str ) ; }
Distance : 6

18
Tree	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Distance : 4

19
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Double ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Double ( str ) ) ; }
Distance : 10

20
Tree	{ return super . escapeJavaStyleString ( str , str , str , new endPos ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new endPos ( str ) ) ; }
Distance : 10

21
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Class ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Class ( str ) ) ; }
Distance : 10

22
Tree	{ return super . escapeJavaStyleString ( str , str , str , new ToStringBuilder ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new ToStringBuilder ( str ) ) ; }
Distance : 10

23
Tree	{ return getCause . escapeJavaStyleString ( str ) ; }
Code	{ return getCause . escapeJavaStyleString ( str ) ; }
Distance : 6

24
Tree	{ return super . escapeJavaStyleString ( str , str , str , new IOException ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new IOException ( str ) ) ; }
Distance : 10

25
Tree	{ return str . escapeJavaStyleString ( str , null , return; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , return; ) ; }
Distance : 4

26
Tree	{ return str . escapeJavaStyleString ( str , null , continue; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , continue; ) ; }
Distance : 4

27
Tree	{ this ( str , str , str , false ) ; }
Code	{ this ( str , str , str , false ) ; }
Distance : 5

28
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 2

29
Tree	{ return escapeJavaStyleString ( str , false ) ; } pattern
Code	{ return escapeJavaStyleString ( str , false ) ; } pattern
Distance : 3

30
Tree	{ return escapeJavaStyleString ( str , false ) ; } toString
Code	{ return escapeJavaStyleString ( str , false ) ; } toString
Distance : 3

31
Tree	{ return escapeJavaStyleString ( str , false ) ; } Calendar
Code	{ return escapeJavaStyleString ( str , false ) ; } Calendar
Distance : 3

32
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Type ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Type ( str ) ) ; }
Distance : 10

33
Tree	{ super . escapeJavaStyleString ( str ) ; return true ; }
Code	{ super . escapeJavaStyleString ( str ) ; return true ; }
Distance : 7

34
Tree	{ return this . escapeJavaStyleString ( str ) ; }
Code	{ return this . escapeJavaStyleString ( str ) ; }
Distance : 6

35
Tree	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Distance : 4

36
Tree	{ this . str = str ; assertEquals }
Code	{ this . str = str ; assertEquals }
Distance : 9

37
Tree	{ this . str = str ; : }
Code	{ this . str = str ; : }
Distance : 9

38
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 2

39
Tree	{ escapeJavaStyleString ( str ) ; for }
Code	{ escapeJavaStyleString ( str ) ; for }
Distance : 6

40
Tree	{ escapeJavaStyleString ( str ) ; if }
Code	{ escapeJavaStyleString ( str ) ; if }
Distance : 6

41
Tree	{ escapeJavaStyleString ( str ) ; return false ; }
Code	{ escapeJavaStyleString ( str ) ; return false ; }
Distance : 5

42
Tree	{ return escapeJavaStyleString ( str , CharUtils.NUL ) ; }
Code	{ return escapeJavaStyleString ( str , CharUtils.NUL ) ; }
Distance : 3

43
Tree	{ return escapeJavaStyleString ( this , str ) ; }
Code	{ return escapeJavaStyleString ( this , str ) ; }
Distance : 4

44
Tree	{ return escapeJavaStyleString ( str , Byte.MIN_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , Byte.MIN_VALUE ) ; }
Distance : 3

45
Tree	{ return escapeJavaStyleString ( str , trim ) ; }
Code	{ return escapeJavaStyleString ( str , trim ) ; }
Distance : 3

46
Tree	{ return escapeJavaStyleString ( str , Character.MIN_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , Character.MIN_VALUE ) ; }
Distance : 3

47
Tree	{ return escapeJavaStyleString ( str , Float.MAX_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , Float.MAX_VALUE ) ; }
Distance : 3

48
Tree	{ escapeJavaStyleString ( str ) ; catch }
Code	{ escapeJavaStyleString ( str ) ; catch }
Distance : 6

49
Tree	{ return escapeJavaStyleString ( str , Void.TYPE ) ; }
Code	{ return escapeJavaStyleString ( str , Void.TYPE ) ; }
Distance : 3

50
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

51
Tree	{ return escapeJavaStyleString ( str , str , ModifyType.TRUNCATE ) ; }
Code	{ return escapeJavaStyleString ( str , str , ModifyType.TRUNCATE ) ; }
Distance : 2

52
Tree	{ return escapeJavaStyleString ( str , str , MODIFY_TRUNCATE ) ; }
Code	{ return escapeJavaStyleString ( str , str , MODIFY_TRUNCATE ) ; }
Distance : 2

53
Tree	{ return escapeJavaStyleString ( str , str , assertFalse ) ; }
Code	{ return escapeJavaStyleString ( str , str , assertFalse ) ; }
Distance : 2

54
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 3

55
Tree	{ return escapeJavaStyleString ( str , str , splitWorker ) ; }
Code	{ return escapeJavaStyleString ( str , str , splitWorker ) ; }
Distance : 2

56
Tree	{ return escapeJavaStyleString ( str , str , CharUtils.NUL ) ; }
Code	{ return escapeJavaStyleString ( str , str , CharUtils.NUL ) ; }
Distance : 2

57
Tree	{ return escapeJavaStyleString ( str , str , concatWith ) ; }
Code	{ return escapeJavaStyleString ( str , str , concatWith ) ; }
Distance : 2

58
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 6

59
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

60
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } MutableInt
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } MutableInt
Distance : 8

61
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

62
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } -
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } -
Distance : 7

63
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Long ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Long ( str ) ) ; }
Distance : 10

64
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } toString
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } toString
Distance : 5

65
Tree	{ escapeJavaStyleString ( str ) ; return false ; } ex
Code	{ escapeJavaStyleString ( str ) ; return false ; } ex
Distance : 6

66
Tree	{ escapeJavaStyleString ( str ) ; return false ; } ]
Code	{ escapeJavaStyleString ( str ) ; return false ; } ]
Distance : 6

67
Tree	{ escapeJavaStyleString ( str ) ; return false ; } !=
Code	{ escapeJavaStyleString ( str ) ; return false ; } !=
Distance : 6

68
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } [
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } [
Distance : 8

69
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } Date
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } Date
Distance : 8

70
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } StringUtils
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } StringUtils
Distance : 5

71
Tree	{ return escapeJavaStyleString ( str , false ) ; } !=
Code	{ return escapeJavaStyleString ( str , false ) ; } !=
Distance : 3

72
Tree	{ return escapeJavaStyleString ( str , false ) ; } CharSequence
Code	{ return escapeJavaStyleString ( str , false ) ; } CharSequence
Distance : 3

73
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } toString
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } toString
Distance : 8

74
Tree	{ escapeJavaStyleString ( str ) ; return false ; } T
Code	{ escapeJavaStyleString ( str ) ; return false ; } T
Distance : 6

75
Tree	{ this ( str , str , str , null ) ; } cs
Code	{ this ( str , str , str , null ) ; } cs
Distance : 7

76
Tree	{ escapeJavaStyleString ( str ) ; return false ; } Calendar
Code	{ escapeJavaStyleString ( str ) ; return false ; } Calendar
Distance : 6

77
Tree	{ escapeJavaStyleString ( str ) ; return false ; } toString
Code	{ escapeJavaStyleString ( str ) ; return false ; } toString
Distance : 6

78
Tree	{ escapeJavaStyleString ( str ) ; return false ; } pattern
Code	{ escapeJavaStyleString ( str ) ; return false ; } pattern
Distance : 6

79
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } mutNum
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } mutNum
Distance : 5

80
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } StringUtils
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } StringUtils
Distance : 8

81
Tree	{ return escapeJavaStyleString ( str , false ) ; } ex
Code	{ return escapeJavaStyleString ( str , false ) ; } ex
Distance : 3

82
Tree	{ return escapeJavaStyleString ( this , str ) ; } StringUtils
Code	{ return escapeJavaStyleString ( this , str ) ; } StringUtils
Distance : 5

83
Tree	{ return escapeJavaStyleString ( this , str ) ; } buffer
Code	{ return escapeJavaStyleString ( this , str ) ; } buffer
Distance : 5

84
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } buffer
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } buffer
Distance : 5

85
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } [
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } [
Distance : 5

86
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } buffer
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } buffer
Distance : 8

87
Tree	{ return escapeJavaStyleString ( str , false ) ; } pattern
Code	{ return escapeJavaStyleString ( str , false ) ; } pattern
Distance : 3

88
Tree	{ return escapeJavaStyleString ( str , false ) ; } toString
Code	{ return escapeJavaStyleString ( str , false ) ; } toString
Distance : 3

89
Tree	{ return escapeJavaStyleString ( str , false ) ; } Calendar
Code	{ return escapeJavaStyleString ( str , false ) ; } Calendar
Distance : 3

90
Tree	{ return escapeJavaStyleString ( this , str ) ; } Date
Code	{ return escapeJavaStyleString ( this , str ) ; } Date
Distance : 5

91
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } length
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } length
Distance : 8

92
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

93
Tree	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 7

94
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Distance : 4

95
Tree	{ return getAccessibleConstructor . escapeJavaStyleString ( str ) ; }
Code	{ return getAccessibleConstructor . escapeJavaStyleString ( str ) ; }
Distance : 6

96
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } !=
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } !=
Distance : 5

97
Tree	{ return escapeJavaStyleString ( this , str ) ; } [
Code	{ return escapeJavaStyleString ( this , str ) ; } [
Distance : 5

98
Tree	{ return ConcurrentException . escapeJavaStyleString ( str ) ; }
Code	{ return ConcurrentException . escapeJavaStyleString ( str ) ; }
Distance : 6

99
Tree	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

100
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } ex
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } ex
Distance : 5

101
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } cs
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } cs
Distance : 7

102
Tree	{ escapeJavaStyleString ( str ) ; assertArrayEquals }
Code	{ escapeJavaStyleString ( str ) ; assertArrayEquals }
Distance : 6

103
Tree	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Distance : 4

104
Tree	{ return escapeJavaStyleString ( trim , null ) ; }
Code	{ return escapeJavaStyleString ( trim , null ) ; }
Distance : 4

105
Tree	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Distance : 4

106
Tree	{ escapeJavaStyleString ( str ) ; else }
Code	{ escapeJavaStyleString ( str ) ; else }
Distance : 6

107
Tree	{ return escapeJavaStyleString ( str , Short.MIN_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , Short.MIN_VALUE ) ; }
Distance : 3

108
Tree	{ escapeJavaStyleString ( str ) ; super }
Code	{ escapeJavaStyleString ( str ) ; super }
Distance : 6

109
Tree	{ escapeJavaStyleString ( str ) ; assertEquals }
Code	{ escapeJavaStyleString ( str ) ; assertEquals }
Distance : 6

110
Tree	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Code	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Distance : 4

111
Tree	{ return escapeJavaStyleString ( PARAM.escapePlus , null ) ; }
Code	{ return escapeJavaStyleString ( PARAM.escapePlus , null ) ; }
Distance : 4

112
Tree	{ escapeJavaStyleString ( str ) ; assertTrue }
Code	{ escapeJavaStyleString ( str ) ; assertTrue }
Distance : 6

113
Tree	{ return escapeJavaStyleString ( array.length , null ) ; }
Code	{ return escapeJavaStyleString ( array.length , null ) ; }
Distance : 4

114
Tree	{ return escapeJavaStyleString ( OPTION.errorIfNoSemiColon , null ) ; }
Code	{ return escapeJavaStyleString ( OPTION.errorIfNoSemiColon , null ) ; }
Distance : 4

115
Tree	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Distance : 4

116
Tree	{ return escapeJavaStyleString ( str , continue; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , continue; , null , str ) ; }
Distance : 4

117
Tree	{ this ( str , str , str , super(); ) ; }
Code	{ this ( str , str , str , super(); ) ; }
Distance : 6

118
Tree	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Distance : 7

119
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } ex
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } ex
Distance : 8

120
Tree	{ return escapeJavaStyleString ( str , null , return; , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , return; , str ) ; }
Distance : 4

121
Tree	{ this ( str , str , str , continue; ) ; }
Code	{ this ( str , str , str , continue; ) ; }
Distance : 6

122
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } mutNum
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } mutNum
Distance : 8

123
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; }
Code	{ super . escapeJavaStyleString ( str ) ; return str ; }
Distance : 7

124
Tree	{ this ( str , str , str , return; ) ; }
Code	{ this ( str , str , str , return; ) ; }
Distance : 6

125
Tree	{ return escapeJavaStyleString ( str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , super(); ) ; }
Distance : 3

126
Tree	{ return escapeJavaStyleString ( str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , return; ) ; }
Distance : 3

127
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Object ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Object ( str ) ) ; }
Distance : 10

128
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } !=
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } !=
Distance : 8

129
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } length
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } length
Distance : 5

130
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } short
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } short
Distance : 7

131
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } MutableInt
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } MutableInt
Distance : 7

132
Tree	{ return escapeJavaStyleString ( str , false ) ; } CharSequence
Code	{ return escapeJavaStyleString ( str , false ) ; } CharSequence
Distance : 3

133
Tree	{ this ( str , str , str , null ) ; }
Code	{ this ( str , str , str , null ) ; }
Distance : 6

134
Tree	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Distance : 6

135
Tree	{ escapeJavaStyleString ( str ) ; return true ; }
Code	{ escapeJavaStyleString ( str ) ; return true ; }
Distance : 6

136
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

137
Tree	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Distance : 4

138
Tree	{ return escapeJavaStyleString ( str , super(); , super(); , str ) ; }
Code	{ return escapeJavaStyleString ( str , super(); , super(); , str ) ; }
Distance : 4

139
Tree	{ return escapeJavaStyleString ( str , return; , super(); , str ) ; }
Code	{ return escapeJavaStyleString ( str , return; , super(); , str ) ; }
Distance : 4

140
Tree	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Distance : 6

141
Tree	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Distance : 6

142
Tree	{ return escapeJavaStyleString ( str , continue; , super(); , str ) ; }
Code	{ return escapeJavaStyleString ( str , continue; , super(); , str ) ; }
Distance : 4

143
Tree	{ return str . escapeJavaStyleString ( str , super(); , super(); ) ; }
Code	{ return str . escapeJavaStyleString ( str , super(); , super(); ) ; }
Distance : 4

144
Tree	{ return str . escapeJavaStyleString ( str , return; , super(); ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , super(); ) ; }
Distance : 4

145
Tree	{ return str . escapeJavaStyleString ( str , continue; , super(); ) ; }
Code	{ return str . escapeJavaStyleString ( str , continue; , super(); ) ; }
Distance : 4

146
Tree	{ this ( str , str , str , null ) ; } short
Code	{ this ( str , str , str , null ) ; } short
Distance : 7

147
Tree	{ super . escapeJavaStyleString ( str ) ; return return ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return ; }
Distance : 7

148
Tree	{ return escapeJavaStyleString ( str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , continue; ) ; }
Distance : 3

149
Tree	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Distance : 6

150
Tree	{ return escapeJavaStyleString ( str , str , str , str , return ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , return ) ; }
Distance : 6

151
Tree	{ escapeJavaStyleString ( str ) ; return false ; } CharSequence
Code	{ escapeJavaStyleString ( str ) ; return false ; } CharSequence
Distance : 6

152
Tree	{ this ( str , str , str , null ) ; } MutableInt
Code	{ this ( str , str , str , null ) ; } MutableInt
Distance : 7

153
Tree	{ return escapeJavaStyleString ( str , null ) ; } -
Code	{ return escapeJavaStyleString ( str , null ) ; } -
Distance : 4

154
Tree	{ return this . escapeJavaStyleString ( str ) ; } Date
Code	{ return this . escapeJavaStyleString ( str ) ; } Date
Distance : 7

155
Tree	{ return this . escapeJavaStyleString ( str ) ; } [
Code	{ return this . escapeJavaStyleString ( str ) ; } [
Distance : 7

156
Tree	{ return escapeJavaStyleString ( str , false ) ; } ]
Code	{ return escapeJavaStyleString ( str , false ) ; } ]
Distance : 3

157
Tree	{ return this . escapeJavaStyleString ( str ) ; } buffer
Code	{ return this . escapeJavaStyleString ( str ) ; } buffer
Distance : 7

158
Tree	{ return this . escapeJavaStyleString ( str ) ; } toString
Code	{ return this . escapeJavaStyleString ( str ) ; } toString
Distance : 7

159
Tree	{ return this . escapeJavaStyleString ( str ) ; } length
Code	{ return this . escapeJavaStyleString ( str ) ; } length
Distance : 7

160
Tree	{ return escapeJavaStyleString ( this , str ) ; } toString
Code	{ return escapeJavaStyleString ( this , str ) ; } toString
Distance : 5

161
Tree	{ return this . escapeJavaStyleString ( str ) ; } mutNum
Code	{ return this . escapeJavaStyleString ( str ) ; } mutNum
Distance : 7

162
Tree	{ return this . escapeJavaStyleString ( str ) ; } !=
Code	{ return this . escapeJavaStyleString ( str ) ; } !=
Distance : 7

163
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } obj
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } obj
Distance : 7

164
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } T
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } T
Distance : 7

165
Tree	{ return this . escapeJavaStyleString ( str ) ; } ex
Code	{ return this . escapeJavaStyleString ( str ) ; } ex
Distance : 7

166
Tree	{ return escapeJavaStyleString ( OPTION.semiColonRequired , null ) ; }
Code	{ return escapeJavaStyleString ( OPTION.semiColonRequired , null ) ; }
Distance : 4

167
Tree	{ return escapeJavaStyleString ( isEmpty , null ) ; }
Code	{ return escapeJavaStyleString ( isEmpty , null ) ; }
Distance : 4

168
Tree	{ return escapeJavaStyleString ( CharUtils.NUL , null ) ; }
Code	{ return escapeJavaStyleString ( CharUtils.NUL , null ) ; }
Distance : 4

169
Tree	{ return escapeJavaStyleString ( <= , null ) ; }
Code	{ return escapeJavaStyleString ( <= , null ) ; }
Distance : 4

170
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Distance : 2

171
Tree	{ escapeJavaStyleString ( str ) ; throw }
Code	{ escapeJavaStyleString ( str ) ; throw }
Distance : 6

172
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } !=
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } !=
Distance : 7

173
Tree	{ escapeJavaStyleString ( str ) ; return }
Code	{ escapeJavaStyleString ( str ) ; return }
Distance : 6

174
Tree	{ return escapeJavaStyleString ( str , str , false ) ; }
Code	{ return escapeJavaStyleString ( str , str , false ) ; }
Distance : 1

175
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } ]
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } ]
Distance : 7

176
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } CharSequence
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } CharSequence
Distance : 7

177
Tree	{ this ( str , str , str , null ) ; } obj
Code	{ this ( str , str , str , null ) ; } obj
Distance : 7

178
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } pattern
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } pattern
Distance : 7

179
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.MILLISECONDS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.MILLISECONDS ) ; }
Distance : 2

180
Tree	{ this ( str , str , str , null ) ; } -
Code	{ this ( str , str , str , null ) ; } -
Distance : 7

181
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 2

182
Tree	{ return escapeJavaStyleString ( str , str , hashCode ) ; }
Code	{ return escapeJavaStyleString ( str , str , hashCode ) ; }
Distance : 2

183
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 3

184
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } cs
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } cs
Distance : 8

185
Tree	{ return escapeJavaStyleString ( this , str ) ; } mutNum
Code	{ return escapeJavaStyleString ( this , str ) ; } mutNum
Distance : 5

186
Tree	{ return escapeJavaStyleString ( this , str ) ; } !=
Code	{ return escapeJavaStyleString ( this , str ) ; } !=
Distance : 5

187
Tree	{ return escapeJavaStyleString ( this , str ) ; } length
Code	{ return escapeJavaStyleString ( this , str ) ; } length
Distance : 5

188
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } Date
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } Date
Distance : 5

189
Tree	{ return cex . escapeJavaStyleString ( str ) ; }
Code	{ return cex . escapeJavaStyleString ( str ) ; }
Distance : 6

190
Tree	{ return escapeJavaStyleString ( str , null ) ; } MutableInt
Code	{ return escapeJavaStyleString ( str , null ) ; } MutableInt
Distance : 4

191
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } short
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } short
Distance : 8

192
Tree	{ return escapeJavaStyleString ( str , Boolean.FALSE ) ; }
Code	{ return escapeJavaStyleString ( str , Boolean.FALSE ) ; }
Distance : 3

193
Tree	{ return escapeJavaStyleString ( str , Integer.MAX_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , Integer.MAX_VALUE ) ; }
Distance : 3

194
Tree	{ return escapeJavaStyleString ( str , false ) ; } ex
Code	{ return escapeJavaStyleString ( str , false ) ; } ex
Distance : 3

195
Tree	{ return escapeJavaStyleString ( str , null ) ; } obj
Code	{ return escapeJavaStyleString ( str , null ) ; } obj
Distance : 4

196
Tree	{ return escapeJavaStyleString ( str , Boolean.TYPE ) ; }
Code	{ return escapeJavaStyleString ( str , Boolean.TYPE ) ; }
Distance : 3

197
Tree	{ return escapeJavaStyleString ( str , false ) ; } ]
Code	{ return escapeJavaStyleString ( str , false ) ; } ]
Distance : 3

198
Tree	{ return escapeJavaStyleString ( str , false ) ; } !=
Code	{ return escapeJavaStyleString ( str , false ) ; } !=
Distance : 3

199
Tree	{ return escapeJavaStyleString ( str , false ) ; } T
Code	{ return escapeJavaStyleString ( str , false ) ; } T
Distance : 3

200
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } -
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } -
Distance : 8

201
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } obj
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } obj
Distance : 8

202
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } toString
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } toString
Distance : 7

203
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } Calendar
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } Calendar
Distance : 7

204
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } ex
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } ex
Distance : 7

205
Tree	{ return escapeJavaStyleString ( str , false ) ; } T
Code	{ return escapeJavaStyleString ( str , false ) ; } T
Distance : 3

206
Tree	{ return this . escapeJavaStyleString ( str ) ; } StringUtils
Code	{ return this . escapeJavaStyleString ( str ) ; } StringUtils
Distance : 7

207
Tree	{ return escapeJavaStyleString ( str , null ) ; } cs
Code	{ return escapeJavaStyleString ( str , null ) ; } cs
Distance : 4

208
Tree	{ return escapeJavaStyleString ( this , str ) ; } ex
Code	{ return escapeJavaStyleString ( this , str ) ; } ex
Distance : 5

209
Tree	{ return escapeJavaStyleString ( str , null ) ; } short
Code	{ return escapeJavaStyleString ( str , null ) ; } short
Distance : 4

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
-------------------------------------------------------------------------------
Child code is: 
if ( element != null ) { type = element . getClass () ; } else { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/35/parent/src_main_java_org_apache_commons_lang3_ArrayUtils.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 440
Wrong
========================================================================
False

0
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

1
Tree	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Distance : 10

2
Tree	if ( element != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 6

3
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = element . getClass () ; }
Distance : 6

4
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = element . getClass () ; }
Distance : 6

5
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 6

6
Tree	if ( element != null ) { type = element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = getClass ; }
Distance : 6

7
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

8
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 6

9
Tree	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Distance : 10

10
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Locale.ENGLISH ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Locale.ENGLISH ; }
Distance : 6

11
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Distance : 8

12
Tree	if ( element != null ) { type = element . getClass () ; } else { java.lang.Class = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { java.lang.Class = element . getClass () ; }
Distance : 6

13
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = bounds.length ; }
Distance : 8

14
Tree	if ( element != null ) { type = element . getClass () ; } else { addToken = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { addToken = element . getClass () ; }
Distance : 6

15
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = Locale.ENGLISH ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = Locale.ENGLISH ; }
Distance : 8

16
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type += element ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type += element ; }
Distance : 8

17
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = CharUtils.NUL ; }
Distance : 8

18
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = bounds.length ; }
Distance : 11

19
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = false ; }
Distance : 6

20
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = StringUtils.EMPTY . getClass () ; }
Distance : 6

21
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = bounds.length ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = bounds.length ; }
Distance : 8

22
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = lhs.length . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = lhs.length . getClass () ; }
Distance : 6

23
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = getClass ; }
Distance : 8

24
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 6

25
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = Integer.MAX_VALUE ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = Integer.MAX_VALUE ; }
Distance : 8

26
Tree	if ( element != null ) { type = element . getClass () ; } else { endOfPeriod = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { endOfPeriod = element . getClass () ; }
Distance : 6

27
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = element . getClass () ; }
Distance : 6

28
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = lhs.length . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = lhs.length . getClass () ; }
Distance : 6

29
Tree	if ( element != null ) { type = false ; } else { simpleQuote = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { simpleQuote = element . getClass () ; }
Distance : 10

30
Tree	if ( element != null ) { type = ( element ) type ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Distance : 10

31
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = getClass ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = getClass ; }
Distance : 8

32
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 5

33
Tree	if ( element != null ) { type = ( element ) type ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = bounds.length ; }
Distance : 10

34
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = stub ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = stub ; }
Distance : 8

35
Tree	if ( element != null ) { Float.MAX_VALUE = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { Float.MAX_VALUE = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

36
Tree	if ( element != null ) { type = element . getClass () ; } else { java.lang.Class = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { java.lang.Class = element . getClass () ; }
Distance : 6

37
Tree	if ( element != null ) { type = element . getClass () ; } else { type = TimeZoneNumberRule.INSTANCE_COLON != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = TimeZoneNumberRule.INSTANCE_COLON != null ; }
Distance : 6

38
Tree	if ( element != null ) { type = other.value ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = other.value ; } else { type = element . getClass () ; }
Distance : 10

39
Tree	if ( element != null ) { type = StringUtils.EMPTY ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = StringUtils.EMPTY ; } else { type = element . getClass () ; }
Distance : 10

40
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type / type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type / type ; }
Distance : 6

41
Tree	if ( element != null ) { type = element . getClass () ; } else { type += element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type += element . getClass () ; }
Distance : 6

42
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type ++ element ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type ++ element ; }
Distance : 8

43
Tree	if ( element != null ) { type = element . getClass () ; } else { addToken = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { addToken = getClass () ; }
Distance : 6

44
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Float.MAX_VALUE != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Float.MAX_VALUE != null ; }
Distance : 6

45
Tree	if ( element != super(); ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != super(); ) { type = false ; } else { type = element . getClass () ; }
Distance : 11

46
Tree	if ( element != null ) { type = element . getClass () ; } else { type = removeAccentsSUN != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = removeAccentsSUN != null ; }
Distance : 6

47
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = element . getClass () ; }
Distance : 6

48
Tree	if ( element != null ) { type = element . getClass () ; } else { addToken = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { addToken = false ; }
Distance : 6

49
Tree	if ( element != null ) { type = element . getClass () ; } else { type != element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type != element ; }
Distance : 6

50
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = getClass ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = getClass ; }
Distance : 8

51
Tree	if ( element != null ) { type = StringUtils.EMPTY ; } else { continue = element . getClass () ; }
Code	if ( element != null ) { type = StringUtils.EMPTY ; } else { continue = element . getClass () ; }
Distance : 10

52
Tree	if ( element != null ) { type = false ; } else { fail = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { fail = element . getClass () ; }
Distance : 10

53
Tree	if ( type != null ) { this . type = element . getClass () ; } else { type = null ; }
Code	if ( type != null ) { this . type = element . getClass () ; } else { type = null ; }
Distance : 9

54
Tree	if ( element != null ) { type = CharUtils.NUL ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = CharUtils.NUL ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 10

55
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = -= . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = -= . getClass () ; }
Distance : 6

56
Tree	if ( element != null ) { type = else ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = else ; } else { type = element . getClass () ; }
Distance : 10

57
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Locale.ENGLISH != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Locale.ENGLISH != null ; }
Distance : 6

58
Tree	if ( type != null ) { this . type = element . getClass () ; } else { type = false ; }
Code	if ( type != null ) { this . type = element . getClass () ; } else { type = false ; }
Distance : 9

59
Tree	if ( element != null ) { element = type . getClass () ; } else { type = false ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type = false ; }
Distance : 8

60
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = TimeZoneNumberRule.INSTANCE_COLON . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = TimeZoneNumberRule.INSTANCE_COLON . getClass () ; }
Distance : 6

61
Tree	if ( element != null ) { assertNull = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { assertNull = false ; } else { type = element . getClass () ; }
Distance : 11

62
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = removeAccentsSUN ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = removeAccentsSUN ; }
Distance : 8

63
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type += element ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type += element ; }
Distance : 8

64
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Locale.ENGLISH ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Locale.ENGLISH ; }
Distance : 6

65
Tree	if ( element != null ) { type = element . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type -= element ; }
Distance : 6

66
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = CharUtils.NUL ; }
Distance : 8

67
Tree	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = getClass () ; }
Distance : 6

68
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Integer.MAX_VALUE ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Integer.MAX_VALUE ; }
Distance : 6

69
Tree	if ( element != null ) { type = ( element ) type ; } else { type = Locale.ENGLISH ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = Locale.ENGLISH ; }
Distance : 10

70
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = return; ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = return; ; }
Distance : 8

71
Tree	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL != null ; }
Distance : 6

72
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = stub ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = stub ; }
Distance : 8

73
Tree	if ( element != null ) { type = element . getClass () ; } else { type += type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type += type ; }
Distance : 6

74
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = Locale.ENGLISH ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = Locale.ENGLISH ; }
Distance : 8

75
Tree	if ( element != null ) { type = element . getClass () ; } else { type instanceof element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type instanceof element ; }
Distance : 6

76
Tree	if ( element != null ) { getClass = element . getClass () ; } else { type = getClass != null ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { type = getClass != null ; }
Distance : 7

77
Tree	if ( type != null ) { type = element . getClass () ; } else { type = this . type ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = this . type ; }
Distance : 7

78
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = getClass () ; }
Distance : 6

79
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = CharUtils.NUL ; }
Distance : 8

80
Tree	if ( element != null ) { type = element . getClass () ; } else { addToken = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { addToken = element . getClass () ; }
Distance : 6

81
Tree	if ( element != null ) { type = false ; } else { System.err = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { System.err = element . getClass () ; }
Distance : 10

82
Tree	if ( element != null ) { type = type . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = type . class ; }
Distance : 7

83
Tree	if ( element != null ) { next = element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { next = element . getClass () ; } else { type = getClass ; }
Distance : 7

84
Tree	if ( element != null ) { this . type = element . getClass () ; } else { element = null ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { element = null ; }
Distance : 8

85
Tree	if ( element != null ) { type = element . getClass () ; } else { element = element * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = element * element ; }
Distance : 6

86
Tree	if ( element != null ) { element = element . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = type . class ; }
Distance : 7

87
Tree	if ( element != null ) { nextFloat = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { nextFloat = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

88
Tree	if ( element != null ) { clazz = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { clazz = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

89
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = true ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = true ; }
Distance : 8

90
Tree	if ( element != null ) { type = lhs.length ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = lhs.length ; } else { type = element . getClass () ; }
Distance : 10

91
Tree	if ( element != null ) { this . type = element . getClass () ; } else { element = false ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { element = false ; }
Distance : 8

92
Tree	if ( element != null ) { type = element . getClass () ; } else { element = element . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = element . class ; }
Distance : 6

93
Tree	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length ; }
Distance : 6

94
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type / element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type / element ; }
Distance : 6

95
Tree	if ( element != null ) { type = null ; } else { element = element . getClass () ; }
Code	if ( element != null ) { type = null ; } else { element = element . getClass () ; }
Distance : 10

96
Tree	if ( element != null ) { type = element . getClass () ; } else { element = this . type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = this . type ; }
Distance : 6

97
Tree	if ( element != null ) { type = element . getClass () ; } else { type = stub ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = stub ; }
Distance : 6

98
Tree	if ( type != null ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 7

99
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = getClass () ; }
Distance : 6

100
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = StringUtils.EMPTY . getClass () ; }
Distance : 6

101
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = listenerInterface ; }
Distance : 11

102
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Integer.MAX_VALUE != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Integer.MAX_VALUE != null ; }
Distance : 6

103
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element / element ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element / element ; }
Distance : 7

104
Tree	if ( element != null ) { element = type . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type = element . class ; }
Distance : 8

105
Tree	if ( element != null ) { type = element . getClass () ; } else { endOfPeriod = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { endOfPeriod = getClass () ; }
Distance : 6

106
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = Float.MAX_VALUE ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = Float.MAX_VALUE ; }
Distance : 8

107
Tree	if ( element != null ) { type = false ; } else { System.out = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { System.out = element . getClass () ; }
Distance : 10

108
Tree	if ( element != null ) { type = CharUtils.NUL ; } else { simpleQuote = element . getClass () ; }
Code	if ( element != null ) { type = CharUtils.NUL ; } else { simpleQuote = element . getClass () ; }
Distance : 10

109
Tree	if ( element != null ) { this . type = type . getClass () ; } else { type != element ; }
Code	if ( element != null ) { this . type = type . getClass () ; } else { type != element ; }
Distance : 9

110
Tree	if ( type != null ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 6

111
Tree	if ( element != null ) { type = ( element ) type ; } else { type = toArray ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = toArray ; }
Distance : 10

112
Tree	if ( element != null ) { type = element . getClass () ; } else { type = removeAccentsSUN ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = removeAccentsSUN ; }
Distance : 6

113
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = false ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = false ; }
Distance : 7

114
Tree	if ( element != null ) { fail = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { fail = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

115
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = StringUtils.EMPTY . getClass () ; }
Distance : 6

116
Tree	if ( element != null ) { type = element . getClass () ; } else { type ++ element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type ++ element ; }
Distance : 6

117
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = Float.MAX_VALUE ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = Float.MAX_VALUE ; }
Distance : 8

118
Tree	if ( element != null ) { nextFloat = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { nextFloat = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

119
Tree	if ( element != null ) { this . type = type . getClass () ; } else { type = null ; }
Code	if ( element != null ) { this . type = type . getClass () ; } else { type = null ; }
Distance : 9

120
Tree	if ( element != null ) { type = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ; } else { type = element . getClass () ; }
Distance : 10

121
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = getClass () ; }
Distance : 6

122
Tree	if ( element != null ) { next = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { next = false ; } else { type = element . getClass () ; }
Distance : 11

123
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element * element ; }
Distance : 6

124
Tree	if ( element != null ) { element = element . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = element . class ; }
Distance : 7

125
Tree	if ( element != null ) { type = element . getClass () ; } else { type = getClass != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = getClass != null ; }
Distance : 6

126
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element . class ; }
Distance : 7

127
Tree	if ( element != null ) { element = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { element = false ; } else { type = element . getClass () ; }
Distance : 11

128
Tree	if ( element != null ) { this . type = type . getClass () ; } else { type = false ; }
Code	if ( element != null ) { this . type = type . getClass () ; } else { type = false ; }
Distance : 9

129
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type ++ type ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type ++ type ; }
Distance : 8

130
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Distance : 6

131
Tree	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface != null ; }
Distance : 6

132
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element / type ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element / type ; }
Distance : 7

133
Tree	if ( element != null ) { this . element = type . getClass () ; } else { type = null ; }
Code	if ( element != null ) { this . element = type . getClass () ; } else { type = null ; }
Distance : 10

134
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = lhs.length . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = lhs.length . getClass () ; }
Distance : 6

135
Tree	if ( element != null ) { type = false ; } else { simpleQuote = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { simpleQuote = element . getClass () ; }
Distance : 10

136
Tree	if ( element != null ) { type = ( element ) type ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = listenerInterface ; }
Distance : 10

137
Tree	if ( element != null ) { type = cloned.chars ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = cloned.chars ; } else { type = element . getClass () ; }
Distance : 10

138
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = null ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = null ; }
Distance : 8

139
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = StringUtils.EMPTY . getClass () ; }
Distance : 6

140
Tree	if ( element != null ) { type = element . getClass () ; } else { System.out = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { System.out = element . getClass () ; }
Distance : 6

141
Tree	if ( element != null ) { clazz = element . getClass () ; } else { type += element ; }
Code	if ( element != null ) { clazz = element . getClass () ; } else { type += element ; }
Distance : 7

142
Tree	if ( element != null ) { type = element . getClass () ; } else { System.out = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { System.out = getClass () ; }
Distance : 6

143
Tree	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = element . getClass () ; }
Distance : 6

144
Tree	if ( element != null ) { type = element . getClass () ; } else { type = stub ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = stub ; }
Distance : 6

145
Tree	if ( element != null ) { getClass = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

146
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = getClass ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = getClass ; }
Distance : 8

147
Tree	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface ; }
Distance : 6

148
Tree	if ( element != null ) { getClass = element . getClass () ; } else { type += element ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { type += element ; }
Distance : 7

149
Tree	if ( element != null ) { type = false ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 10

150
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type -= element ; }
Distance : 8

151
Tree	if ( element != null ) { next = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { next = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 7

152
Tree	if ( element != null ) { getClass = element . getClass () ; } else { Boolean.TRUE = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { Boolean.TRUE = StringUtils.EMPTY . getClass () ; }
Distance : 7

153
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = removeAccentsSUN ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = removeAccentsSUN ; }
Distance : 8

154
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = getClass ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = getClass ; }
Distance : 11

155
Tree	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL ; }
Distance : 6

156
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 5

157
Tree	if ( element != null ) { type = null ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = null ; } else { type = element . getClass () ; }
Distance : 10

158
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Integer.MAX_VALUE != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Integer.MAX_VALUE != null ; }
Distance : 6

159
Tree	if ( element != null ) { type = false ; } else { java.lang.Class = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { java.lang.Class = element . getClass () ; }
Distance : 10

160
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = removeAccentsSUN ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = removeAccentsSUN ; }
Distance : 11

161
Tree	if ( element != null ) { type = element . getClass () ; } else { type != element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type != element ; }
Distance : 6

162
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

163
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element / type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element / type ; }
Distance : 6

164
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = getClass () ; }
Distance : 6

165
Tree	if ( element != null ) { next = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { next = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

166
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = Locale.ENGLISH ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = Locale.ENGLISH ; }
Distance : 8

167
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = StringUtils.EMPTY . getClass () ; }
Distance : 6

168
Tree	if ( element != null ) { type = element . getClass () ; } else { java.lang.Class = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { java.lang.Class = getClass () ; }
Distance : 6

169
Tree	if ( element != null ) { type = element . getClass () ; } else { type += element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type += element ; }
Distance : 6

170
Tree	if ( element != null ) { type = element . getClass () ; } else { element = element + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = element + STRING_CONSTANT ; }
Distance : 5

171
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = removeAccentsSUN ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = removeAccentsSUN ; }
Distance : 8

172
Tree	if ( element != null ) { getClass = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Distance : 7

173
Tree	if ( element != null ) { type = false ; } else { checkBuiltInFormat = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { checkBuiltInFormat = element . getClass () ; }
Distance : 10

174
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type ++ element ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type ++ element ; }
Distance : 8

175
Tree	if ( element != null ) { Float.MAX_VALUE = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { Float.MAX_VALUE = false ; } else { type = element . getClass () ; }
Distance : 11

176
Tree	if ( element != null ) { type = ( element ) type ; } else { type = removeAccentsSUN ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = removeAccentsSUN ; }
Distance : 10

177
Tree	if ( element != null ) { type = element . getClass () ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Distance : 6

178
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = stub ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = stub ; }
Distance : 11

179
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Distance : 6

180
Tree	if ( element != null ) { next = element . getClass () ; } else { type += element ; }
Code	if ( element != null ) { next = element . getClass () ; } else { type += element ; }
Distance : 7

181
Tree	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length != null ; }
Distance : 6

182
Tree	if ( element != null ) { type = element . getClass () ; } else { System.out = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { System.out = element . getClass () ; }
Distance : 6

183
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = cloned.chars . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = cloned.chars . getClass () ; }
Distance : 6

184
Tree	if ( element != null ) { simpleQuote = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { simpleQuote = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

185
Tree	if ( element != null ) { simpleQuote = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { simpleQuote = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

186
Tree	if ( element != null ) { type = continue; ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = continue; ; } else { type = element . getClass () ; }
Distance : 10

187
Tree	if ( element != null ) { type = element . getClass () ; } else { type = stub != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = stub != null ; }
Distance : 6

188
Tree	if ( element != null ) { type = null ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = null ; } else { type = type . getClass () ; }
Distance : 10

189
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = Float.MAX_VALUE ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = Float.MAX_VALUE ; }
Distance : 8

190
Tree	if ( element != null ) { type = StringUtils.EMPTY ; } else { simpleQuote = element . getClass () ; }
Code	if ( element != null ) { type = StringUtils.EMPTY ; } else { simpleQuote = element . getClass () ; }
Distance : 10

191
Tree	if ( element != null ) { type = false ; } else { continue = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { continue = element . getClass () ; }
Distance : 10

192
Tree	if ( element != null ) { type = false ; } else { getNumerator = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { getNumerator = element . getClass () ; }
Distance : 10

193
Tree	if ( element != null ) { type = false ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 10

194
Tree	if ( element != null ) { type = SplitState.SPLIT ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = SplitState.SPLIT ; } else { type = element . getClass () ; }
Distance : 10

195
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = lhs.length . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = lhs.length . getClass () ; }
Distance : 6

196
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = stub ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = stub ; }
Distance : 8

197
Tree	if ( element != null ) { type = element . getClass () ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Distance : 6

198
Tree	if ( element != null ) { type = CharUtils.NUL ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = CharUtils.NUL ; } else { type = element . getClass () ; }
Distance : 10

199
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Distance : 8

200
Tree	if ( element != null ) { simpleQuote = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { simpleQuote = false ; } else { type = element . getClass () ; }
Distance : 11

201
Tree	if ( element != null ) { element = element . getClass () ; } else { type = element / element ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = element / element ; }
Distance : 7

202
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = CharUtils.NUL ; }
Distance : 8

203
Tree	if ( element != null ) { type = element . getClass () ; } else { System.err = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { System.err = element . getClass () ; }
Distance : 6

204
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = false ; }
Distance : 6

205
Tree	if ( element != null ) { type = element . getClass () ; } else { java.lang.Class = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { java.lang.Class = getClass () ; }
Distance : 6

206
Tree	if ( element != null ) { this . element = type . getClass () ; } else { type = false ; }
Code	if ( element != null ) { this . element = type . getClass () ; } else { type = false ; }
Distance : 10

207
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Locale.ENGLISH != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Locale.ENGLISH != null ; }
Distance : 6

208
Tree	if ( element != null ) { type = element . getClass () ; } else { element = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = false ; }
Distance : 6

209
Tree	if ( element != null ) { next = element . getClass () ; } else { type ++ element ; }
Code	if ( element != null ) { next = element . getClass () ; } else { type ++ element ; }
Distance : 7

210
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = bounds.length ; }
Distance : 8

211
Tree	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface ; }
Distance : 6

212
Tree	if ( element != null ) { type = element . getClass () ; } else { type ++ element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type ++ element ; }
Distance : 6

213
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Distance : 7

214
Tree	if ( element != null ) { type = element . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = this . type ; }
Distance : 6

215
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = FastDateParser.JAPANESE_IMPERIAL . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = FastDateParser.JAPANESE_IMPERIAL . getClass () ; }
Distance : 6

216
Tree	if ( element != null ) { type = element . getClass () ; } else { type += type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type += type ; }
Distance : 6

217
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type -= type ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type -= type ; }
Distance : 8

218
Tree	if ( element != null ) { type = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 10

219
Tree	if ( element != null ) { type = element . getClass () ; } else { element = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = element . getClass () ; }
Distance : 6

220
Tree	if ( element != null ) { next = false ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { next = false ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 11

221
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = StringUtils.EMPTY . getClass () ; }
Distance : 6

222
Tree	if ( element != null ) { type = type . getClass () ; } else { type ++ element ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type ++ element ; }
Distance : 7

223
Tree	if ( element != null ) { type = false ; } else { continue = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { continue = element . getClass () ; }
Distance : 10

224
Tree	if ( element != null ) { getClass = false ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { getClass = false ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 11

225
Tree	if ( element != null ) { type = return; ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = return; ; } else { type = element . getClass () ; }
Distance : 10

226
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = bounds.length ; }
Distance : 8

227
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = CharUtils.NUL ; }
Distance : 8

228
Tree	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Distance : 10

229
Tree	if ( element != null ) { type = element . getClass () ; } else { System.err = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { System.err = false ; }
Distance : 6

230
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = lhs.length . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = lhs.length . getClass () ; }
Distance : 6

231
Tree	if ( element != null ) { clazz = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { clazz = false ; } else { type = element . getClass () ; }
Distance : 11

232
Tree	if ( element != null ) { type = element . getClass () ; } else { type -= type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type -= type ; }
Distance : 6

233
Tree	if ( element != null ) { type = element . getClass () ; } else { System.err = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { System.err = element . getClass () ; }
Distance : 6

234
Tree	if ( type != null ) { type = element . getClass () ; } else { type = element * element ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = element * element ; }
Distance : 7

235
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Distance : 8

236
Tree	if ( element != null ) { type = element . getClass () ; } else { type != type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type != type ; }
Distance : 6

237
Tree	if ( element != null ) { getClass = element . getClass () ; } else { type ++ element ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { type ++ element ; }
Distance : 7

238
Tree	if ( element != null ) { clazz = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { clazz = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

239
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Distance : 8

240
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = true ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = true ; }
Distance : 6

241
Tree	if ( element != null ) { type = -= ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = -= ; } else { type = element . getClass () ; }
Distance : 10

242
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = listenerInterface ; }
Distance : 8

243
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = false ; }
Distance : 8

244
Tree	if ( element != null ) { type = element . getClass () ; } else { type = getClass != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = getClass != null ; }
Distance : 6

245
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = listenerInterface ; }
Distance : 8

246
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = Locale.ENGLISH ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = Locale.ENGLISH ; }
Distance : 8

247
Tree	if ( element != null ) { type = true ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = true ; } else { type = type . getClass () ; }
Distance : 10

248
Tree	if ( element != null ) { type = type . getClass () ; } else { type = type / element ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = type / element ; }
Distance : 7

249
Tree	if ( element != null ) { type = StringUtils.EMPTY ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = StringUtils.EMPTY ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 10

250
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Distance : 11

251
Tree	if ( element != null ) { type = element . getClass () ; } else { type = TimeZoneNumberRule.INSTANCE_COLON != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = TimeZoneNumberRule.INSTANCE_COLON != null ; }
Distance : 6

252
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = listenerInterface ; }
Distance : 8

253
Tree	if ( element != null ) { type = type . getClass () ; } else { type = true ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = true ; }
Distance : 7

254
Tree	if ( element != null ) { next = element . getClass () ; } else { type = getClass != null ; }
Code	if ( element != null ) { next = element . getClass () ; } else { type = getClass != null ; }
Distance : 7

255
Tree	if ( element != null ) { type = element . getClass () == FastDateParser.JAPANESE_IMPERIAL ; } else { type += element ; }
Code	if ( element != null ) { type = element . getClass () == FastDateParser.JAPANESE_IMPERIAL ; } else { type += element ; }
Distance : 8

256
Tree	if ( element != null ) { type = element . getClass () ; } else { type += element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type += element ; }
Distance : 6

257
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = -= . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = -= . getClass () ; }
Distance : 6

258
Tree	if ( element != null ) { toIntegerObject = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { toIntegerObject = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

259
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = lhs.length . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = lhs.length . getClass () ; }
Distance : 6

260
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = cloned.chars . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = cloned.chars . getClass () ; }
Distance : 6

261
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Integer.MAX_VALUE ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Integer.MAX_VALUE ; }
Distance : 6

262
Tree	if ( element != null ) { type = ( element ) type ; } else { type = stub ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = stub ; }
Distance : 10

263
Tree	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL != null ; }
Distance : 6

264
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = Float.MAX_VALUE ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = Float.MAX_VALUE ; }
Distance : 11

265
Tree	if ( element != null ) { type = false ; } else { endOfPeriod = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { endOfPeriod = element . getClass () ; }
Distance : 10

266
Tree	if ( element != null ) { getClass = element . getClass () ; } else { Boolean.TRUE = lhs.length . getClass () ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { Boolean.TRUE = lhs.length . getClass () ; }
Distance : 7

267
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Distance : 8

268
Tree	if ( element != null ) { fail = element . getClass () ; } else { type += element ; }
Code	if ( element != null ) { fail = element . getClass () ; } else { type += element ; }
Distance : 7

269
Tree	if ( element != null ) { type = lhs.length ; } else { continue = element . getClass () ; }
Code	if ( element != null ) { type = lhs.length ; } else { continue = element . getClass () ; }
Distance : 10

270
Tree	if ( element != null ) { type = element . getClass () ; } else { fail = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { fail = element . getClass () ; }
Distance : 6

271
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = true ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = true ; }
Distance : 6

272
Tree	if ( element != null ) { type = element . getClass () ; } else { System.err = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { System.err = getClass () ; }
Distance : 6

273
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type + STRING_CONSTANT ; }
Distance : 5

274
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = listenerInterface ; }
Distance : 8

275
Tree	if ( element != null ) { getClass = element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { type = getClass ; }
Distance : 7

276
Tree	if ( element != null ) { type = false ; } else { System.out = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { System.out = element . getClass () ; }
Distance : 10

277
Tree	if ( element != null ) { type = lhs.length ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = lhs.length ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 10

278
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type += type ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type += type ; }
Distance : 8

279
Tree	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL ; }
Distance : 6

280
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element * type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element * type ; }
Distance : 6

281
Tree	if ( type != null ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

282
Tree	if ( element != null ) { getClass = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

283
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = Locale.ENGLISH ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = Locale.ENGLISH ; }
Distance : 11

284
Tree	if ( element != null ) { assertNull = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { assertNull = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

285
Tree	if ( element != null ) { type = element . getClass () == FastDateParser.JAPANESE_IMPERIAL ; } else { type ++ element ; }
Code	if ( element != null ) { type = element . getClass () == FastDateParser.JAPANESE_IMPERIAL ; } else { type ++ element ; }
Distance : 8

286
Tree	if ( element != null ) { type = false ; } else { checkBuiltInFormat = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { checkBuiltInFormat = element . getClass () ; }
Distance : 10

287
Tree	if ( element != null ) { element = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

288
Tree	if ( element != null ) { nextFloat = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { nextFloat = false ; } else { type = element . getClass () ; }
Distance : 11

289
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = removeAccentsSUN ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = removeAccentsSUN ; }
Distance : 8

290
Tree	if ( element != null ) { this . type = type . getClass () ; } else { type ++ element ; }
Code	if ( element != null ) { this . type = type . getClass () ; } else { type ++ element ; }
Distance : 9

291
Tree	if ( element != null ) { type = type . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = type . getClass () ; }
Distance : 7

292
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = removeAccentsSUN ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = removeAccentsSUN ; }
Distance : 8

293
Tree	if ( element != null ) { fail = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { fail = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

294
Tree	if ( element != null ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 5

295
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element * type ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element * type ; }
Distance : 7

296
Tree	if ( element != null ) { type = element . getClass () ; } else { element += element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element += element . getClass () ; }
Distance : 6

297
Tree	if ( element != null ) { type = element . getClass () == CharUtils.NUL ; } else { type ++ element ; }
Code	if ( element != null ) { type = element . getClass () == CharUtils.NUL ; } else { type ++ element ; }
Distance : 8

298
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type += type ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type += type ; }
Distance : 8

299
Tree	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length ; }
Distance : 6

300
Tree	if ( element != null ) { this . type = type . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { this . type = type . getClass () ; } else { type -= element ; }
Distance : 9

301
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type * element ; }
Distance : 6

302
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = Integer.MAX_VALUE ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = Integer.MAX_VALUE ; }
Distance : 11

303
Tree	if ( element != null ) { type = element . getClass () ; } else { System.out = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { System.out = getClass () ; }
Distance : 6

304
Tree	if ( element != super(); ) { this . type = element . getClass () ; } else { type = null ; }
Code	if ( element != super(); ) { this . type = element . getClass () ; } else { type = null ; }
Distance : 9

305
Tree	if ( element != null ) { type = cloned.chars ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = cloned.chars ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 10

306
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = CharUtils.NUL ; }
Distance : 11

307
Tree	if ( element != null ) { type = element . getClass () ; } else { type = this . element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = this . element ; }
Distance : 6

308
Tree	if ( element != null ) { type = FastDateParser.JAPANESE_IMPERIAL ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = FastDateParser.JAPANESE_IMPERIAL ; } else { type = element . getClass () ; }
Distance : 10

309
Tree	if ( element != null ) { Float.MAX_VALUE = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { Float.MAX_VALUE = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

310
Tree	if ( element != null ) { assertNull = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { assertNull = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

311
Tree	if ( element != null ) { next = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { next = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

312
Tree	if ( element != null ) { type = false ; } else { System.err = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { System.err = element . getClass () ; }
Distance : 10

313
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 6

314
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type != element ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type != element ; }
Distance : 8

315
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type != element ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type != element ; }
Distance : 8

316
Tree	if ( element != super(); ) { this . type = element . getClass () ; } else { type = false ; }
Code	if ( element != super(); ) { this . type = element . getClass () ; } else { type = false ; }
Distance : 9

317
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type ++ type ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type ++ type ; }
Distance : 8

318
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = Integer.MAX_VALUE ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = Integer.MAX_VALUE ; }
Distance : 8

319
Tree	if ( element != null ) { type = type . getClass () ; } else { type += element . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type += element . getClass () ; }
Distance : 7

320
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = Integer.MAX_VALUE ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = Integer.MAX_VALUE ; }
Distance : 8

321
Tree	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = element . getClass () ; }
Distance : 6

322
Tree	if ( element != null ) { type = element . getClass () ; } else { addToken = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { addToken = getClass () ; }
Distance : 6

323
Tree	if ( element != null ) { type = type . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = this . type ; }
Distance : 7

324
Tree	if ( element != null ) { type = element . getClass () ; } else { type = stub != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = stub != null ; }
Distance : 6

325
Tree	if ( element != null ) { element = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type = element . getClass () ; }
Distance : 8

326
Tree	if ( element != null ) { this . type = type . getClass () ; } else { type += element ; }
Code	if ( element != null ) { this . type = type . getClass () ; } else { type += element ; }
Distance : 9

327
Tree	if ( element != null ) { element = element . getClass () ; } else { type = element * element ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = element * element ; }
Distance : 7

328
Tree	if ( element != null ) { this . element = element . getClass () ; } else { type = null ; }
Code	if ( element != null ) { this . element = element . getClass () ; } else { type = null ; }
Distance : 9

329
Tree	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length != null ; }
Distance : 6

330
Tree	if ( element != null ) { this . element = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { this . element = element . getClass () ; } else { type = false ; }
Distance : 9

331
Tree	if ( element != null ) { type = type . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 6

332
Tree	if ( element != null ) { type = element . getClass () ; } else { type ++ type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type ++ type ; }
Distance : 6

333
Tree	if ( element != null ) { element = type . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 7

334
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = Integer.MAX_VALUE ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = Integer.MAX_VALUE ; }
Distance : 8

335
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Float.MAX_VALUE ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Float.MAX_VALUE ; }
Distance : 6

336
Tree	if ( element != null ) { getClass = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 7

337
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = this . type ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = this . type ; }
Distance : 7

338
Tree	if ( type != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 7

339
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 6

340
Tree	if ( type != null ) { type = null ; } else { type = element . getClass () ; }
Code	if ( type != null ) { type = null ; } else { type = element . getClass () ; }
Distance : 11

341
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type -= element ; }
Distance : 8

342
Tree	if ( type != null ) { type = element . getClass () ; } else { type = element / element ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = element / element ; }
Distance : 7

343
Tree	if ( element != null ) { fail = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { fail = false ; } else { type = element . getClass () ; }
Distance : 11

344
Tree	if ( element != null ) { type = true ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = true ; } else { type = element . getClass () ; }
Distance : 10

345
Tree	if ( element != null ) { toIntegerObject = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { toIntegerObject = false ; } else { type = element . getClass () ; }
Distance : 11

346
Tree	if ( element != null ) { type = element . getClass () == CharUtils.NUL ; } else { type += element ; }
Code	if ( element != null ) { type = element . getClass () == CharUtils.NUL ; } else { type += element ; }
Distance : 8

347
Tree	if ( element != null ) { element = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

348
Tree	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = getClass () ; }
Distance : 6

349
Tree	if ( element != null ) { type = false ; } else { element = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { element = element . getClass () ; }
Distance : 10

350
Tree	if ( element != null ) { type = element . getClass () ; } else { type = true ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = true ; }
Distance : 6

351
Tree	if ( element != null ) { element = null ; } else { type = element . getClass () ; }
Code	if ( element != null ) { element = null ; } else { type = element . getClass () ; }
Distance : 11

352
Tree	if ( element != null ) { type = super(); ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = super(); ; } else { type = element . getClass () ; }
Distance : 10

353
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = Integer.MAX_VALUE ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = Integer.MAX_VALUE ; }
Distance : 8

354
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type * type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type * type ; }
Distance : 6

355
Tree	if ( element != null ) { type = false ; } else { java.lang.Class = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { java.lang.Class = element . getClass () ; }
Distance : 10

356
Tree	if ( element != null ) { type = ( element ) type ; } else { type = Integer.MAX_VALUE ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = Integer.MAX_VALUE ; }
Distance : 10

357
Tree	if ( element != null ) { type = type . getClass () ; } else { type += type . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type += type . getClass () ; }
Distance : 7

358
Tree	if ( element != null ) { type = type . getClass () ; } else { type -= type ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type -= type ; }
Distance : 7

359
Tree	if ( element != null ) { element = null ; } else { type = type . getClass () ; }
Code	if ( element != null ) { element = null ; } else { type = type . getClass () ; }
Distance : 11

360
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

361
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = super(); ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = super(); ; }
Distance : 8

362
Tree	if ( element != null ) { element = element . getClass () ; } else { type = type + STRING_CONSTANT ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = type + STRING_CONSTANT ; }
Distance : 6

363
Tree	if ( element != null ) { getClass = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { getClass = false ; } else { type = element . getClass () ; }
Distance : 11

364
Tree	if ( element != null ) { this . element = element . getClass () ; } else { type -= type ; }
Code	if ( element != null ) { this . element = element . getClass () ; } else { type -= type ; }
Distance : 9

365
Tree	if ( type != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

366
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = false ; }
Distance : 6

367
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = listenerInterface ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = listenerInterface ; }
Distance : 8

368
Tree	if ( element != null ) { type = type . getClass () ; } else { type = type * element ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = type * element ; }
Distance : 7

369
Tree	if ( element != null ) { type = type . getClass () ; } else { type += element ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type += element ; }
Distance : 7

370
Tree	if ( element != null ) { type = element . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type -= element ; }
Distance : 6

371
Tree	if ( type != null ) { type = element . getClass () ; } else { type += element . getClass () ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type += element . getClass () ; }
Distance : 7

372
Tree	if ( element != null ) { type = element . getClass () ; } else { element = element / element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = element / element ; }
Distance : 6

373
Tree	if ( element != null ) { type = type . getClass () == StringUtils.EMPTY ; } else { type += element ; }
Code	if ( element != null ) { type = type . getClass () == StringUtils.EMPTY ; } else { type += element ; }
Distance : 9

374
Tree	if ( type != null ) { this . type = element . getClass () ; } else { type -= element ; }
Code	if ( type != null ) { this . type = element . getClass () ; } else { type -= element ; }
Distance : 9

375
Tree	if ( element != null ) { type = type . getClass () ; } else { type = type + STRING_CONSTANT ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = type + STRING_CONSTANT ; }
Distance : 6

376
Tree	if ( element != null ) { type = ( element ) type ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = CharUtils.NUL ; }
Distance : 10

377
Tree	if ( type != null ) { type = element . getClass () ; } else { type -= element ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type -= element ; }
Distance : 7

378
Tree	if ( element != null ) { this . element = element . getClass () ; } else { type = true ; }
Code	if ( element != null ) { this . element = element . getClass () ; } else { type = true ; }
Distance : 9

379
Tree	if ( element != null ) { element = type . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 7

380
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = getClass ; }
Distance : 8

381
Tree	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = false ; }
Distance : 6

382
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = stub ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = stub ; }
Distance : 8

383
Tree	if ( element != null ) { type = element . getClass () ; } else { System.err = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { System.err = getClass () ; }
Distance : 6

384
Tree	if ( element != null ) { next = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Code	if ( element != null ) { next = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Distance : 7

385
Tree	if ( element != null ) { element = element . getClass () ; } else { type -= type ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type -= type ; }
Distance : 7

386
Tree	if ( element != null ) { type = ( element ) type ; } else { type = getClass ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = getClass ; }
Distance : 10

387
Tree	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface != null ; }
Distance : 6

388
Tree	if ( element != null ) { this . type = type . getClass () ; } else { type = true ; }
Code	if ( element != null ) { this . type = type . getClass () ; } else { type = true ; }
Distance : 9

389
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = bounds.length ; }
Distance : 8

390
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = Float.MAX_VALUE ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = Float.MAX_VALUE ; }
Distance : 8

391
Tree	if ( element != null ) { type = element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = getClass ; }
Distance : 6

392
Tree	if ( element != continue; ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != continue; ) { type = false ; } else { type = element . getClass () ; }
Distance : 11

393
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element * element ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element * element ; }
Distance : 7

394
Tree	if ( element != null ) { element = type . getClass () ; } else { type += element . getClass () ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type += element . getClass () ; }
Distance : 8

395
Tree	if ( element != null ) { element = element . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = this . type ; }
Distance : 7

396
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = toArray ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = toArray ; }
Distance : 8

397
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

398
Tree	if ( element != null ) { type = element . getClass () ; } else { System.out = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { System.out = false ; }
Distance : 6

399
Tree	if ( element != null ) { element = element . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type -= element ; }
Distance : 7

400
Tree	if ( element != null ) { type = element . getClass () ; } else { type += type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type += type . getClass () ; }
Distance : 6

401
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element / element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element / element ; }
Distance : 6

402
Tree	if ( element != null ) { this . type = element . getClass () ; } else { element -= element ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { element -= element ; }
Distance : 8

403
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 6

404
Tree	if ( element != super(); ) { type = null ; } else { type = element . getClass () ; }
Code	if ( element != super(); ) { type = null ; } else { type = element . getClass () ; }
Distance : 11

405
Tree	if ( element != null ) { type = type . getClass () ; } else { type = this . element ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = this . element ; }
Distance : 7

406
Tree	if ( element != null ) { type = lhs.length ; } else { simpleQuote = element . getClass () ; }
Code	if ( element != null ) { type = lhs.length ; } else { simpleQuote = element . getClass () ; }
Distance : 10

407
Tree	if ( element != continue; ) { type = element . getClass () ; } else { type = this . type ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { type = this . type ; }
Distance : 7

408
Tree	if ( element != null ) { type = element . getClass () ; } else { element -= element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element -= element ; }
Distance : 6

409
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = Locale.ENGLISH ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = Locale.ENGLISH ; }
Distance : 8

410
Tree	if ( element != null ) { type = element . getClass () ; } else { java.lang.Class = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { java.lang.Class = false ; }
Distance : 6

411
Tree	if ( element != null ) { this . element = type . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { this . element = type . getClass () ; } else { type -= element ; }
Distance : 10

412
Tree	if ( element != null ) { this . type = type . getClass () ; } else { type -= type ; }
Code	if ( element != null ) { this . type = type . getClass () ; } else { type -= type ; }
Distance : 9

413
Tree	if ( element != null ) { element = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = type . getClass () ; }
Distance : 7

414
Tree	if ( element != null ) { type = type . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = false ; }
Distance : 7

415
Tree	if ( element != null ) { toIntegerObject = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { toIntegerObject = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

416
Tree	if ( element != null ) { type = false ; } else { cloned.chars = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { cloned.chars = element . getClass () ; }
Distance : 10

417
Tree	if ( element != null ) { type = element . getClass () ; } else { fail = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { fail = getClass () ; }
Distance : 6

418
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = stub ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = stub ; }
Distance : 8

419
Tree	if ( element != null ) { element = element . getClass () ; } else { type += type . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type += type . getClass () ; }
Distance : 7

420
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type += element . getClass () ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type += element . getClass () ; }
Distance : 7

421
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type != type ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type != type ; }
Distance : 8

422
Tree	if ( element != null ) { element = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = false ; }
Distance : 7

423
Tree	if ( element != null ) { element = type . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type = this . type ; }
Distance : 8

424
Tree	if ( type != null ) { type = false ; } else { type = element . getClass () ; }
Code	if ( type != null ) { type = false ; } else { type = element . getClass () ; }
Distance : 11

425
Tree	if ( element != continue; ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 6

426
Tree	if ( element != null ) { element = element . getClass () ; } else { type += element . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type += element . getClass () ; }
Distance : 7

427
Tree	if ( element != null ) { element = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 6

428
Tree	if ( element != null ) { element = type . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type -= element ; }
Distance : 8

429
Tree	if ( element != null ) { type = type . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type -= element ; }
Distance : 7

430
Tree	if ( element != null ) { element = false ; } else { type = type . getClass () ; }
Code	if ( element != null ) { element = false ; } else { type = type . getClass () ; }
Distance : 11

431
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = continue; ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = continue; ; }
Distance : 8

432
Tree	if ( Object != null ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 6

433
Tree	if ( element != super(); ) { this . type = element . getClass () ; } else { type -= element ; }
Code	if ( element != super(); ) { this . type = element . getClass () ; } else { type -= element ; }
Distance : 9

434
Tree	if ( element != null ) { type = element . getClass () ; } else { element = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 5

435
Tree	if ( element != continue; ) { type = element . getClass () ; } else { type = false ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { type = false ; }
Distance : 7

436
Tree	if ( element != null ) { this . element = element . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { this . element = element . getClass () ; } else { type -= element ; }
Distance : 9

437
Tree	if ( type != null ) { type = type . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( type != null ) { type = type . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 7

438
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type -= element ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type -= element ; }
Distance : 7

439
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 7

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
return m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Child code is: 
return m != null && m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (800{val=m}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/34/parent/src_main_java_org_apache_commons_lang3_builder_ToStringStyle.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 340
Wrong
========================================================================
False

0
Tree	return new StringBuffer ( value , false ) ;
Code	return new StringBuffer ( value , false ) ;
Distance : 9

1
Tree	return new ExtendedMessageFormat ( value , false ) ;
Code	return new ExtendedMessageFormat ( value , false ) ;
Distance : 9

2
Tree	return m ;
Code	return m ;
Distance : 9

3
Tree	return new StringBuffer ( value ) ;
Code	return new StringBuffer ( value ) ;
Distance : 7

4
Tree	return m + NUMBER_CONSTANT ;
Code	return m + NUMBER_CONSTANT ;
Distance : 9

5
Tree	return new ImmutablePair ( value , false ) ;
Code	return new ImmutablePair ( value , false ) ;
Distance : 9

6
Tree	return m . containsKey ( value ) ; isEquals
Code	return m . containsKey ( value ) ; isEquals
Distance : 5

7
Tree	return m . containsKey ( value ) ; {}
Code	return m . containsKey ( value ) ; {}
Distance : 5

8
Tree	return m . containsKey ( value ) ; obj
Code	return m . containsKey ( value ) ; obj
Distance : 5

9
Tree	return new GenericArrayTypeImpl ( value , NUMBER_CONSTANT ) ;
Code	return new GenericArrayTypeImpl ( value , NUMBER_CONSTANT ) ;
Distance : 9

10
Tree	return m . value ( m ) ;
Code	return m . value ( m ) ;
Distance : 6

11
Tree	return m ( m ) ;
Code	return m ( m ) ;
Distance : 7

12
Tree	return m ( m , m ) ;
Code	return m ( m , m ) ;
Distance : 7

13
Tree	return m . containsKey ( value ) ; MutableInt
Code	return m . containsKey ( value ) ; MutableInt
Distance : 5

14
Tree	return value . containsKey ( STRING_CONSTANT , m ) ;
Code	return value . containsKey ( STRING_CONSTANT , m ) ;
Distance : 8

15
Tree	return value . containsKey ( value ) - NUMBER_CONSTANT ;
Code	return value . containsKey ( value ) - NUMBER_CONSTANT ;
Distance : 7

16
Tree	return new UnsupportedOperationException ( value , NUMBER_CONSTANT ) ;
Code	return new UnsupportedOperationException ( value , NUMBER_CONSTANT ) ;
Distance : 9

17
Tree	return m . containsKey ( value ) . containsKey () ; obj
Code	return m . containsKey ( value ) . containsKey () ; obj
Distance : 8

18
Tree	return m . containsKey ( value ) . containsKey () ; {}
Code	return m . containsKey ( value ) . containsKey () ; {}
Distance : 8

19
Tree	return value . containsKey ( NUMBER_CONSTANT , value ) ;
Code	return value . containsKey ( NUMBER_CONSTANT , value ) ;
Distance : 7

20
Tree	return m ( value , value , false ) ;
Code	return m ( value , value , false ) ;
Distance : 8

21
Tree	return value . containsKey ( value , false ) ;
Code	return value . containsKey ( value , false ) ;
Distance : 7

22
Tree	return value . containsKey ( m , value ) ;
Code	return value . containsKey ( m , value ) ;
Distance : 7

23
Tree	return m ( value , m ) ; MutableInt
Code	return m ( value , m ) ; MutableInt
Distance : 8

24
Tree	return m ( value ) ; T
Code	return m ( value ) ; T
Distance : 7

25
Tree	return this . m . containsKey ( value ) ; cs
Code	return this . m . containsKey ( value ) ; cs
Distance : 5

26
Tree	return new ByteArrayInputStream ( value ) ;
Code	return new ByteArrayInputStream ( value ) ;
Distance : 7

27
Tree	return this . m . containsKey () . value ( value ) ;
Code	return this . m . containsKey () . value ( value ) ;
Distance : 7

28
Tree	return m . containsKey ( m , m ) ;
Code	return m . containsKey ( m , m ) ;
Distance : 7

29
Tree	return m . containsKey ( NUMBER_CONSTANT , m ) ;
Code	return m . containsKey ( NUMBER_CONSTANT , m ) ;
Distance : 7

30
Tree	return value . containsKey ( value ) . containsKey () ;
Code	return value . containsKey ( value ) . containsKey () ;
Distance : 8

31
Tree	return m ( value , m ) ; obj
Code	return m ( value , m ) ; obj
Distance : 8

32
Tree	return new UnsupportedOperationException ( value , m ) ;
Code	return new UnsupportedOperationException ( value , m ) ;
Distance : 9

33
Tree	return m . containsKey ( value ) ; {}
Code	return m . containsKey ( value ) ; {}
Distance : 5

34
Tree	return m ( value ) ; toString
Code	return m ( value ) ; toString
Distance : 7

35
Tree	return m ( value ) ; Calendar
Code	return m ( value ) ; Calendar
Distance : 7

36
Tree	return m . containsKey ( value ) . containsKey () ;
Code	return m . containsKey ( value ) . containsKey () ;
Distance : 7

37
Tree	return m ( value ) ; !=
Code	return m ( value ) ; !=
Distance : 7

38
Tree	return m ( value ) ; CharSequence
Code	return m ( value ) ; CharSequence
Distance : 7

39
Tree	return new GenericArrayTypeImpl ( value , m ) ;
Code	return new GenericArrayTypeImpl ( value , m ) ;
Distance : 9

40
Tree	return value . containsKey () . value () . value ( m ) ;
Code	return value . containsKey () . value () . value ( m ) ;
Distance : 9

41
Tree	return value . containsKey ( m ) . containsKey ( value ) ;
Code	return value . containsKey ( m ) . containsKey ( value ) ;
Distance : 5

42
Tree	return value . containsKey ( value ) . containsKey ( value ) ;
Code	return value . containsKey ( value ) . containsKey ( value ) ;
Distance : 6

43
Tree	return m + NUMBER_CONSTANT ; Calendar
Code	return m + NUMBER_CONSTANT ; Calendar
Distance : 10

44
Tree	return m + NUMBER_CONSTANT ; ex
Code	return m + NUMBER_CONSTANT ; ex
Distance : 10

45
Tree	return m + NUMBER_CONSTANT ; ]
Code	return m + NUMBER_CONSTANT ; ]
Distance : 10

46
Tree	return m + NUMBER_CONSTANT ; !=
Code	return m + NUMBER_CONSTANT ; !=
Distance : 10

47
Tree	return m . containsKey () . value () . value ( value ) ; isEquals
Code	return m . containsKey () . value () . value ( value ) ; isEquals
Distance : 8

48
Tree	return this . m . containsKey () . value ( m ) ;
Code	return this . m . containsKey () . value ( m ) ;
Distance : 8

49
Tree	return m + NUMBER_CONSTANT ; toString
Code	return m + NUMBER_CONSTANT ; toString
Distance : 10

50
Tree	return value . containsKey () . value ( value ) ;
Code	return value . containsKey () . value ( value ) ;
Distance : 6

51
Tree	return null ; obj
Code	return null ; obj
Distance : 10

52
Tree	return null ; -
Code	return null ; -
Distance : 10

53
Tree	return m . containsKey () . value () . value ( value ) ; obj
Code	return m . containsKey () . value () . value ( value ) ; obj
Distance : 8

54
Tree	return m . containsKey () . value () . value ( value ) ; {}
Code	return m . containsKey () . value () . value ( value ) ; {}
Distance : 8

55
Tree	return m . containsKey ( value ) . containsKey () ; byte
Code	return m . containsKey ( value ) . containsKey () ; byte
Distance : 8

56
Tree	return m . containsKey () ; T
Code	return m . containsKey () ; T
Distance : 8

57
Tree	return null ; MutableInt
Code	return null ; MutableInt
Distance : 10

58
Tree	return value . containsKey ( m ) - NUMBER_CONSTANT ;
Code	return value . containsKey ( m ) - NUMBER_CONSTANT ;
Distance : 8

59
Tree	return m . containsKey ( m ) . containsKey () ;
Code	return m . containsKey ( m ) . containsKey () ;
Distance : 7

60
Tree	return m . containsKey () . value ( m ) ;
Code	return m . containsKey () . value ( m ) ;
Distance : 6

61
Tree	return value . containsKey ( m , false ) ;
Code	return value . containsKey ( m , false ) ;
Distance : 8

62
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; byte
Code	return m . containsKey ( STRING_CONSTANT , m ) ; byte
Distance : 8

63
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; cs
Code	return m . containsKey ( STRING_CONSTANT , m ) ; cs
Distance : 8

64
Tree	return m ( m , m , true ) ;
Code	return m ( m , m , true ) ;
Distance : 7

65
Tree	return value + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return value + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

66
Tree	return value . m ( m ) ;
Code	return value . m ( m ) ;
Distance : 7

67
Tree	return return () . containsKey ( m ) ;
Code	return return () . containsKey ( m ) ;
Distance : 6

68
Tree	return new ClassNotFoundSerialization ( value ) ;
Code	return new ClassNotFoundSerialization ( value ) ;
Distance : 7

69
Tree	return m . containsKey () . value () . value ( value ) ;
Code	return m . containsKey () . value () . value ( value ) ;
Distance : 7

70
Tree	return value . containsKey ( m ) ;
Code	return value . containsKey ( m ) ;
Distance : 6

71
Tree	return new UnicodeUnescaper ( value , m ) ;
Code	return new UnicodeUnescaper ( value , m ) ;
Distance : 9

72
Tree	return m . containsKey () . value ( value ) ; byte
Code	return m . containsKey () . value ( value ) ; byte
Distance : 6

73
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; {}
Code	return m . containsKey ( STRING_CONSTANT , m ) ; {}
Distance : 8

74
Tree	return m . containsKey ( value . value ( m ) ) ;
Code	return m . containsKey ( value . value ( m ) ) ;
Distance : 7

75
Tree	return m . containsKey ( m ) . containsKey ( value ) ;
Code	return m . containsKey ( m ) . containsKey ( value ) ;
Distance : 4

76
Tree	return m . containsKey () . value ( value ) ; {}
Code	return m . containsKey () . value ( value ) ; {}
Distance : 6

77
Tree	return m . containsKey () . containsKey ( value ) ; cs
Code	return m . containsKey () . containsKey ( value ) ; cs
Distance : 5

78
Tree	return this . m ; T
Code	return this . m ; T
Distance : 10

79
Tree	return m . containsKey () . value ( value ) ; obj
Code	return m . containsKey () . value ( value ) ; obj
Distance : 6

80
Tree	return m . containsKey () ; CharSequence
Code	return m . containsKey () ; CharSequence
Distance : 8

81
Tree	return m . containsKey ( NUMBER_CONSTANT , value ) ; obj
Code	return m . containsKey ( NUMBER_CONSTANT , value ) ; obj
Distance : 7

82
Tree	return m . containsKey ( NUMBER_CONSTANT , value ) ; {}
Code	return m . containsKey ( NUMBER_CONSTANT , value ) ; {}
Distance : 7

83
Tree	return m . containsKey ( NUMBER_CONSTANT , value ) ; MutableInt
Code	return m . containsKey ( NUMBER_CONSTANT , value ) ; MutableInt
Distance : 7

84
Tree	return null ;
Code	return null ;
Distance : 9

85
Tree	return m ; toString
Code	return m ; toString
Distance : 10

86
Tree	return m . containsKey ( new Random ( value , false ) ) ;
Code	return m . containsKey ( new Random ( value , false ) ) ;
Distance : 9

87
Tree	return m . containsKey ( value ) ; cs
Code	return m . containsKey ( value ) ; cs
Distance : 5

88
Tree	return m . containsKey ( value ) . containsKey ( value ) ; short
Code	return m . containsKey ( value ) . containsKey ( value ) ; short
Distance : 6

89
Tree	return m . containsKey ( value ) . containsKey ( value ) ; style
Code	return m . containsKey ( value ) . containsKey ( value ) ; style
Distance : 6

90
Tree	return m . containsKey ( NUMBER_CONSTANT , value ) ; isEquals
Code	return m . containsKey ( NUMBER_CONSTANT , value ) ; isEquals
Distance : 7

91
Tree	return m ; CharSequence
Code	return m ; CharSequence
Distance : 10

92
Tree	return m ; pattern
Code	return m ; pattern
Distance : 10

93
Tree	return m . containsKey () ; pattern
Code	return m . containsKey () ; pattern
Distance : 8

94
Tree	return m . containsKey () ; toString
Code	return m . containsKey () ; toString
Distance : 8

95
Tree	return m . containsKey ( new Locale ( value , false ) ) ;
Code	return m . containsKey ( new Locale ( value , false ) ) ;
Distance : 9

96
Tree	return m . containsKey ( value , new IDKey ( value ) ) ;
Code	return m . containsKey ( value , new IDKey ( value ) ) ;
Distance : 8

97
Tree	return m ; !=
Code	return m ; !=
Distance : 10

98
Tree	return m ; T
Code	return m ; T
Distance : 10

99
Tree	return m . containsKey () ; Calendar
Code	return m . containsKey () ; Calendar
Distance : 8

100
Tree	return m . containsKey ( value ) ; MutableInt
Code	return m . containsKey ( value ) ; MutableInt
Distance : 5

101
Tree	return this . m . containsKey ( value , toUpperCase ) ;
Code	return this . m . containsKey ( value , toUpperCase ) ;
Distance : 6

102
Tree	return m . containsKey ( new Type ( value , false ) ) ;
Code	return m . containsKey ( new Type ( value , false ) ) ;
Distance : 9

103
Tree	return this . m . value ( value , Locale.ENGLISH ) ;
Code	return this . m . value ( value , Locale.ENGLISH ) ;
Distance : 7

104
Tree	return m . containsKey ( value , new DefaultExceptionContext ( value ) ) ;
Code	return m . containsKey ( value , new DefaultExceptionContext ( value ) ) ;
Distance : 8

105
Tree	return new UnsupportedOperationException ( value , false ) ;
Code	return new UnsupportedOperationException ( value , false ) ;
Distance : 9

106
Tree	return new GenericArrayTypeImpl ( value , false ) ;
Code	return new GenericArrayTypeImpl ( value , false ) ;
Distance : 9

107
Tree	return m . m ( value ) ;
Code	return m . m ( value ) ;
Distance : 5

108
Tree	return new StringBuffer ( value , NUMBER_CONSTANT ) ;
Code	return new StringBuffer ( value , NUMBER_CONSTANT ) ;
Distance : 9

109
Tree	return new ImmutablePair ( value ) ;
Code	return new ImmutablePair ( value ) ;
Distance : 7

110
Tree	return new MapStrLookup ( value , false ) ;
Code	return new MapStrLookup ( value , false ) ;
Distance : 9

111
Tree	return new UnicodeUnescaper ( value , false ) ;
Code	return new UnicodeUnescaper ( value , false ) ;
Distance : 9

112
Tree	return m . containsKey () . value ( value ) ; MutableInt
Code	return m . containsKey () . value ( value ) ; MutableInt
Distance : 6

113
Tree	return this . m ;
Code	return this . m ;
Distance : 9

114
Tree	return NUMBER_CONSTANT / value ; ex
Code	return NUMBER_CONSTANT / value ; ex
Distance : 10

115
Tree	return this . value . containsKey ( value ) ;
Code	return this . value . containsKey ( value ) ;
Distance : 5

116
Tree	return m . containsKey ( m ) ;
Code	return m . containsKey ( m ) ;
Distance : 5

117
Tree	return m . containsKey ( value , value ) ;
Code	return m . containsKey ( value , value ) ;
Distance : 6

118
Tree	return NUMBER_CONSTANT / value ; !=
Code	return NUMBER_CONSTANT / value ; !=
Distance : 10

119
Tree	return m ( value , m , false ) ; style
Code	return m ( value , m , false ) ; style
Distance : 8

120
Tree	return m ( value , m , false ) ; short
Code	return m ( value , m , false ) ; short
Distance : 8

121
Tree	return new GenericArrayTypeImpl ( value ) ;
Code	return new GenericArrayTypeImpl ( value ) ;
Distance : 7

122
Tree	return this . m ; toString
Code	return this . m ; toString
Distance : 10

123
Tree	return this . m ; !=
Code	return this . m ; !=
Distance : 10

124
Tree	return m . containsKey () . value ( value ) ;
Code	return m . containsKey () . value ( value ) ;
Distance : 5

125
Tree	return this . m . containsKey ( m ) ;
Code	return this . m . containsKey ( m ) ;
Distance : 5

126
Tree	return m () . containsKey ( value ) ;
Code	return m () . containsKey ( value ) ;
Distance : 4

127
Tree	return value . containsKey ( m , m ) ;
Code	return value . containsKey ( m , m ) ;
Distance : 8

128
Tree	return this . m ; ex
Code	return this . m ; ex
Distance : 10

129
Tree	return m . containsKey () ; ]
Code	return m . containsKey () ; ]
Distance : 8

130
Tree	return m . containsKey ( value , new Type ( value ) ) ;
Code	return m . containsKey ( value , new Type ( value ) ) ;
Distance : 8

131
Tree	return new UnsupportedOperationException ( value ) ;
Code	return new UnsupportedOperationException ( value ) ;
Distance : 7

132
Tree	return NUMBER_CONSTANT / value ;
Code	return NUMBER_CONSTANT / value ;
Distance : 9

133
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ; cs
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ; cs
Distance : 7

134
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ; isEquals
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ; isEquals
Distance : 7

135
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ; MutableInt
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ; MutableInt
Distance : 7

136
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ; {}
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ; {}
Distance : 7

137
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ; obj
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ; obj
Distance : 7

138
Tree	return this . m ; CharSequence
Code	return this . m ; CharSequence
Distance : 10

139
Tree	return new UnicodeUnescaper ( value ) ;
Code	return new UnicodeUnescaper ( value ) ;
Distance : 7

140
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ; byte
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ; byte
Distance : 7

141
Tree	return value . containsKey ( NUMBER_CONSTANT , m ) ;
Code	return value . containsKey ( NUMBER_CONSTANT , m ) ;
Distance : 8

142
Tree	return new ImmutablePair ( value , false ) . containsKey ( value ) ;
Code	return new ImmutablePair ( value , false ) . containsKey ( value ) ;
Distance : 7

143
Tree	return super(); ;
Code	return super(); ;
Distance : 10

144
Tree	return m . containsKey ( new StringBuilder ( value , false ) ) ;
Code	return m . containsKey ( new StringBuilder ( value , false ) ) ;
Distance : 9

145
Tree	return new ImmutablePair ( value , m ) ;
Code	return new ImmutablePair ( value , m ) ;
Distance : 9

146
Tree	return new ExtendedMessageFormat ( value ) ;
Code	return new ExtendedMessageFormat ( value ) ;
Distance : 7

147
Tree	return new StringBuffer ( value , m ) ;
Code	return new StringBuffer ( value , m ) ;
Distance : 9

148
Tree	return new ExtendedMessageFormat ( value , m ) ;
Code	return new ExtendedMessageFormat ( value , m ) ;
Distance : 9

149
Tree	return new MapStrLookup ( value ) ;
Code	return new MapStrLookup ( value ) ;
Distance : 7

150
Tree	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ; MutableInt
Code	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ; MutableInt
Distance : 8

151
Tree	return m ( value ) ; pattern
Code	return m ( value ) ; pattern
Distance : 7

152
Tree	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ; {}
Code	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ; {}
Distance : 8

153
Tree	return m . containsKey ( m , true ) ;
Code	return m . containsKey ( m , true ) ;
Distance : 7

154
Tree	return new isOSNameMatch ( value , false ) ;
Code	return new isOSNameMatch ( value , false ) ;
Distance : 9

155
Tree	return m . containsKey ( value , m ) ; style
Code	return m . containsKey ( value , m ) ; style
Distance : 7

156
Tree	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ; obj
Code	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ; obj
Distance : 8

157
Tree	return new ExtendedMessageFormat ( value , NUMBER_CONSTANT ) ;
Code	return new ExtendedMessageFormat ( value , NUMBER_CONSTANT ) ;
Distance : 9

158
Tree	return null ; cs
Code	return null ; cs
Distance : 10

159
Tree	return NUMBER_CONSTANT / value ; toString
Code	return NUMBER_CONSTANT / value ; toString
Distance : 10

160
Tree	return new UnicodeUnescaper ( value , NUMBER_CONSTANT ) ;
Code	return new UnicodeUnescaper ( value , NUMBER_CONSTANT ) ;
Distance : 9

161
Tree	return m + NUMBER_CONSTANT ; CharSequence
Code	return m + NUMBER_CONSTANT ; CharSequence
Distance : 10

162
Tree	return this . m . containsKey ( value ) ; byte
Code	return this . m . containsKey ( value ) ; byte
Distance : 5

163
Tree	return m . containsKey ( value ) ;
Code	return m . containsKey ( value ) ;
Distance : 4

164
Tree	return value . containsKey ( value , m ) ;
Code	return value . containsKey ( value , m ) ;
Distance : 7

165
Tree	return m . containsKey ( value ) . containsKey () ; cs
Code	return m . containsKey ( value ) . containsKey () ; cs
Distance : 8

166
Tree	return m . containsKey ( value ) . containsKey () ; isEquals
Code	return m . containsKey ( value ) . containsKey () ; isEquals
Distance : 8

167
Tree	return m . containsKey ( m , false ) ;
Code	return m . containsKey ( m , false ) ;
Distance : 7

168
Tree	return value . containsKey () . value () . value ( value ) ;
Code	return value . containsKey () . value () . value ( value ) ;
Distance : 8

169
Tree	return this . m . containsKey ( value , Calendar.SECOND ) ;
Code	return this . m . containsKey ( value , Calendar.SECOND ) ;
Distance : 6

170
Tree	return m . containsKey ( value ) . containsKey ( m ) ;
Code	return m . containsKey ( value ) . containsKey ( m ) ;
Distance : 6

171
Tree	return this . value . containsKey ( m ) ;
Code	return this . value . containsKey ( m ) ;
Distance : 6

172
Tree	return new ClassNotFoundSerialization ( value , false ) ;
Code	return new ClassNotFoundSerialization ( value , false ) ;
Distance : 9

173
Tree	return m + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

174
Tree	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ; byte
Code	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ; byte
Distance : 8

175
Tree	return m + NUMBER_CONSTANT ; pattern
Code	return m + NUMBER_CONSTANT ; pattern
Distance : 10

176
Tree	return this . m . containsKey ( value ) ; obj
Code	return this . m . containsKey ( value ) ; obj
Distance : 5

177
Tree	return m . containsKey ( m ) ;
Code	return m . containsKey ( m ) ;
Distance : 5

178
Tree	return value . containsKey ( STRING_CONSTANT , value ) ;
Code	return value . containsKey ( STRING_CONSTANT , value ) ;
Distance : 7

179
Tree	return m . containsKey ( value , m ) ; short
Code	return m . containsKey ( value , m ) ; short
Distance : 7

180
Tree	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ; cs
Code	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ; cs
Distance : 8

181
Tree	return m . containsKey () . value ( value ) ; isEquals
Code	return m . containsKey () . value ( value ) ; isEquals
Distance : 6

182
Tree	return m ( value , value ) ;
Code	return m ( value , value ) ;
Distance : 7

183
Tree	return new ByteArrayInputStream ( value , false ) ;
Code	return new ByteArrayInputStream ( value , false ) ;
Distance : 9

184
Tree	return NUMBER_CONSTANT / value ; pattern
Code	return NUMBER_CONSTANT / value ; pattern
Distance : 10

185
Tree	return m . containsKey () ; !=
Code	return m . containsKey () ; !=
Distance : 8

186
Tree	return value . containsKey ( m ) ;
Code	return value . containsKey ( m ) ;
Distance : 6

187
Tree	return m . containsKey ( value ) ; isEquals
Code	return m . containsKey ( value ) ; isEquals
Distance : 5

188
Tree	return new isOSNameMatch ( value ) ;
Code	return new isOSNameMatch ( value ) ;
Distance : 7

189
Tree	return this . m . containsKey ( value ) ; {}
Code	return this . m . containsKey ( value ) ; {}
Distance : 5

190
Tree	return value . containsKey ( value ) ;
Code	return value . containsKey ( value ) ;
Distance : 5

191
Tree	return m . containsKey ( value , new Object ( value ) ) ;
Code	return m . containsKey ( value , new Object ( value ) ) ;
Distance : 8

192
Tree	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ; isEquals
Code	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ; isEquals
Distance : 8

193
Tree	return value . containsKey () ;
Code	return value . containsKey () ;
Distance : 8

194
Tree	return m . containsKey ( value . value ( value ) ) ; style
Code	return m . containsKey ( value . value ( value ) ) ; style
Distance : 7

195
Tree	return m ; ex
Code	return m ; ex
Distance : 10

196
Tree	return this . m . value ( value ) ; MutableInt
Code	return this . m . value ( value ) ; MutableInt
Distance : 6

197
Tree	return m ( value , m ) ; byte
Code	return m ( value , m ) ; byte
Distance : 8

198
Tree	return value . containsKey ( value . value ( m ) ) ;
Code	return value . containsKey ( value . value ( m ) ) ;
Distance : 8

199
Tree	return m . containsKey ( value ) . containsKey ( value ) ;
Code	return m . containsKey ( value ) . containsKey ( value ) ;
Distance : 5

200
Tree	return value . containsKey () . value ( m ) ;
Code	return value . containsKey () . value ( m ) ;
Distance : 7

201
Tree	return new MapStrLookup ( value , NUMBER_CONSTANT ) ;
Code	return new MapStrLookup ( value , NUMBER_CONSTANT ) ;
Distance : 9

202
Tree	return this . m . containsKey ( value , m ) ;
Code	return this . m . containsKey ( value , m ) ;
Distance : 6

203
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; obj
Code	return m . containsKey ( STRING_CONSTANT , m ) ; obj
Distance : 8

204
Tree	return this . value . containsKey () . value ( value ) ;
Code	return this . value . containsKey () . value ( value ) ;
Distance : 7

205
Tree	return m ( value , m , true ) ;
Code	return m ( value , m , true ) ;
Distance : 7

206
Tree	return m . containsKey () . value () . value ( value ) ; MutableInt
Code	return m . containsKey () . value () . value ( value ) ; MutableInt
Distance : 8

207
Tree	return m ( value , m ) ; {}
Code	return m ( value , m ) ; {}
Distance : 8

208
Tree	return m . containsKey ( value . value ( value ) ) ; short
Code	return m . containsKey ( value . value ( value ) ) ; short
Distance : 7

209
Tree	return new ExtendedMessageFormat ( value , false ) . containsKey ( value ) ;
Code	return new ExtendedMessageFormat ( value , false ) . containsKey ( value ) ;
Distance : 7

210
Tree	return m . containsKey ( m , value ) ;
Code	return m . containsKey ( m , value ) ;
Distance : 6

211
Tree	return m . containsKey ( value ) . containsKey () ; MutableInt
Code	return m . containsKey ( value ) . containsKey () ; MutableInt
Distance : 8

212
Tree	return return ;
Code	return return ;
Distance : 10

213
Tree	return m . containsKey ( m ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( m ) - NUMBER_CONSTANT ;
Distance : 7

214
Tree	return m ; Calendar
Code	return m ; Calendar
Distance : 10

215
Tree	return value . containsKey ( m ) . containsKey () ;
Code	return value . containsKey ( m ) . containsKey () ;
Distance : 8

216
Tree	return new ImmutablePair ( value , NUMBER_CONSTANT ) ;
Code	return new ImmutablePair ( value , NUMBER_CONSTANT ) ;
Distance : 9

217
Tree	return m . containsKey ( value . value ( value ) ) ;
Code	return m . containsKey ( value . value ( value ) ) ;
Distance : 6

218
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; MutableInt
Code	return m . containsKey ( STRING_CONSTANT , m ) ; MutableInt
Distance : 8

219
Tree	return value . value ( value ) ;
Code	return value . value ( value ) ;
Distance : 6

220
Tree	return m . containsKey ( value ) ; cs
Code	return m . containsKey ( value ) ; cs
Distance : 5

221
Tree	return m . containsKey () . value () . value ( value ) ; cs
Code	return m . containsKey () . value () . value ( value ) ; cs
Distance : 8

222
Tree	return this . m . containsKey ( value ) ; isEquals
Code	return this . m . containsKey ( value ) ; isEquals
Distance : 5

223
Tree	return m ( value , m ) ; cs
Code	return m ( value , m ) ; cs
Distance : 8

224
Tree	return m + NUMBER_CONSTANT ; T
Code	return m + NUMBER_CONSTANT ; T
Distance : 10

225
Tree	return m . m ( value ) ; style
Code	return m . m ( value ) ; style
Distance : 6

226
Tree	return this . m ; ]
Code	return this . m ; ]
Distance : 10

227
Tree	return m . containsKey () . value () . value ( value ) ; byte
Code	return m . containsKey () . value () . value ( value ) ; byte
Distance : 8

228
Tree	return m . containsKey ( value ) ; byte
Code	return m . containsKey ( value ) ; byte
Distance : 5

229
Tree	return this . m . containsKey () . value ( value ) ; MutableInt
Code	return this . m . containsKey () . value ( value ) ; MutableInt
Distance : 8

230
Tree	return m ( value , m ) ; isEquals
Code	return m ( value , m ) ; isEquals
Distance : 8

231
Tree	return m . containsKey ( value , new StringBuilder ( value ) ) ;
Code	return m . containsKey ( value , new StringBuilder ( value ) ) ;
Distance : 8

232
Tree	return m ( m , value , true ) ;
Code	return m ( m , value , true ) ;
Distance : 7

233
Tree	return m . containsKey ( new Object ( value , false ) ) ;
Code	return m . containsKey ( new Object ( value , false ) ) ;
Distance : 9

234
Tree	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

235
Tree	return this . m . containsKey ( value , DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE ) ;
Code	return this . m . containsKey ( value , DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE ) ;
Distance : 6

236
Tree	return new StringBuffer ( value , false ) . containsKey ( value ) ;
Code	return new StringBuffer ( value , false ) . containsKey ( value ) ;
Distance : 7

237
Tree	return m ( value ) ; ]
Code	return m ( value ) ; ]
Distance : 7

238
Tree	return m . containsKey ( value , new TestSuite ( value ) ) ;
Code	return m . containsKey ( value , new TestSuite ( value ) ) ;
Distance : 8

239
Tree	return new isOSNameMatch ( value , NUMBER_CONSTANT ) ;
Code	return new isOSNameMatch ( value , NUMBER_CONSTANT ) ;
Distance : 9

240
Tree	return NUMBER_CONSTANT / value ; ]
Code	return NUMBER_CONSTANT / value ; ]
Distance : 10

241
Tree	return new isOSNameMatch ( value , m ) ;
Code	return new isOSNameMatch ( value , m ) ;
Distance : 9

242
Tree	return m . m ( value ) ; short
Code	return m . m ( value ) ; short
Distance : 6

243
Tree	return m . containsKey ( new ByteArrayInputStream ( value , false ) ) ;
Code	return m . containsKey ( new ByteArrayInputStream ( value , false ) ) ;
Distance : 9

244
Tree	return m ( value , m , false ) ;
Code	return m ( value , m , false ) ;
Distance : 7

245
Tree	return m . containsKey ( STRING_CONSTANT , m ) ;
Code	return m . containsKey ( STRING_CONSTANT , m ) ;
Distance : 7

246
Tree	return new ClassNotFoundSerialization ( value , NUMBER_CONSTANT ) ;
Code	return new ClassNotFoundSerialization ( value , NUMBER_CONSTANT ) ;
Distance : 9

247
Tree	return m . containsKey ( value , false ) ;
Code	return m . containsKey ( value , false ) ;
Distance : 6

248
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ;
Distance : 6

249
Tree	return new ClassNotFoundSerialization ( value , m ) ;
Code	return new ClassNotFoundSerialization ( value , m ) ;
Distance : 9

250
Tree	return m . m ( m ) ;
Code	return m . m ( m ) ;
Distance : 6

251
Tree	return m . containsKey ( value , new Boolean ( value ) ) ;
Code	return m . containsKey ( value , new Boolean ( value ) ) ;
Distance : 8

252
Tree	return new ByteArrayInputStream ( value , NUMBER_CONSTANT ) ;
Code	return new ByteArrayInputStream ( value , NUMBER_CONSTANT ) ;
Distance : 9

253
Tree	return new ByteArrayInputStream ( value , m ) ;
Code	return new ByteArrayInputStream ( value , m ) ;
Distance : 9

254
Tree	return m ( m , value ) ;
Code	return m ( m , value ) ;
Distance : 6

255
Tree	return m . containsKey ( value , new Random ( value ) ) ;
Code	return m . containsKey ( value , new Random ( value ) ) ;
Distance : 8

256
Tree	return m . containsKey ( value ) ;
Code	return m . containsKey ( value ) ;
Distance : 4

257
Tree	return value . value ( m ) ;
Code	return value . value ( m ) ;
Distance : 7

258
Tree	return NUMBER_CONSTANT / m ;
Code	return NUMBER_CONSTANT / m ;
Distance : 9

259
Tree	return m . containsKey ( NUMBER_CONSTANT , value ) ;
Code	return m . containsKey ( NUMBER_CONSTANT , value ) ;
Distance : 6

260
Tree	return this . value ;
Code	return this . value ;
Distance : 8

261
Tree	return value + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return value + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

262
Tree	return m . containsKey ( m ) . containsKey ( m ) ;
Code	return m . containsKey ( m ) . containsKey ( m ) ;
Distance : 5

263
Tree	return this . m . value ( value ) ;
Code	return this . m . value ( value ) ;
Distance : 5

264
Tree	return value . containsKey ( value . value ( value ) ) ;
Code	return value . containsKey ( value . value ( value ) ) ;
Distance : 7

265
Tree	return m ( value ) ;
Code	return m ( value ) ;
Distance : 6

266
Tree	return this . value . containsKey () . value ( m ) ;
Code	return this . value . containsKey () . value ( m ) ;
Distance : 8

267
Tree	return m ( value , m ) ;
Code	return m ( value , m ) ;
Distance : 7

268
Tree	return m . containsKey ( value , new ToStringBuilder ( value ) ) ;
Code	return m . containsKey ( value , new ToStringBuilder ( value ) ) ;
Distance : 8

269
Tree	return m . containsKey ( value , m ) ;
Code	return m . containsKey ( value , m ) ;
Distance : 6

270
Tree	return value . containsKey ( m , true ) ;
Code	return value . containsKey ( m , true ) ;
Distance : 8

271
Tree	return new UnicodeUnescaper ( value , false ) . containsKey ( value ) ;
Code	return new UnicodeUnescaper ( value , false ) . containsKey ( value ) ;
Distance : 7

272
Tree	return value . containsKey ( value ) . return ( m ) ;
Code	return value . containsKey ( value ) . return ( m ) ;
Distance : 8

273
Tree	return value . containsKey ( m . value ( value ) ) ;
Code	return value . containsKey ( m . value ( value ) ) ;
Distance : 6

274
Tree	return value . containsKey ( value , true ) ;
Code	return value . containsKey ( value , true ) ;
Distance : 7

275
Tree	return m . value ( value ) ;
Code	return m . value ( value ) ;
Distance : 5

276
Tree	return m . containsKey ( value , new Double ( value ) ) ;
Code	return m . containsKey ( value , new Double ( value ) ) ;
Distance : 8

277
Tree	return value . containsKey ( value ) ;
Code	return value . containsKey ( value ) ;
Distance : 5

278
Tree	return m . containsKey () ;
Code	return m . containsKey () ;
Distance : 7

279
Tree	return m . containsKey ( m . value ( m ) ) ;
Code	return m . containsKey ( m . value ( m ) ) ;
Distance : 6

280
Tree	return m . containsKey ( new IDKey ( value , false ) ) ;
Code	return m . containsKey ( new IDKey ( value , false ) ) ;
Distance : 9

281
Tree	return new MapStrLookup ( value , m ) ;
Code	return new MapStrLookup ( value , m ) ;
Distance : 9

282
Tree	return value . containsKey ( m ) . containsKey ( m ) ;
Code	return value . containsKey ( m ) . containsKey ( m ) ;
Distance : 6

283
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; isEquals
Code	return m . containsKey ( STRING_CONSTANT , m ) ; isEquals
Distance : 8

284
Tree	return NUMBER_CONSTANT / value ; CharSequence
Code	return NUMBER_CONSTANT / value ; CharSequence
Distance : 10

285
Tree	return return ( m , m , false ) ;
Code	return return ( m , m , false ) ;
Distance : 8

286
Tree	return m . containsKey () . value () . value ( m ) ;
Code	return m . containsKey () . value () . value ( m ) ;
Distance : 8

287
Tree	return null ; short
Code	return null ; short
Distance : 10

288
Tree	return m . containsKey ( value ) ; byte
Code	return m . containsKey ( value ) ; byte
Distance : 5

289
Tree	return this . m ; Calendar
Code	return this . m ; Calendar
Distance : 10

290
Tree	return this . m . containsKey () . value ( value ) ; byte
Code	return this . m . containsKey () . value ( value ) ; byte
Distance : 8

291
Tree	return m . containsKey ( m . value ( value ) ) ;
Code	return m . containsKey ( m . value ( value ) ) ;
Distance : 5

292
Tree	return m ( m , value , false ) ;
Code	return m ( m , value , false ) ;
Distance : 7

293
Tree	return m . containsKey ( value ) ; obj
Code	return m . containsKey ( value ) ; obj
Distance : 5

294
Tree	return this . m . containsKey ( value , DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE ) ;
Code	return this . m . containsKey ( value , DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE ) ;
Distance : 6

295
Tree	return this . m . containsKey ( value , isPublic ) ;
Code	return this . m . containsKey ( value , isPublic ) ;
Distance : 6

296
Tree	return m . containsKey ( new BigDecimal ( value , false ) ) ;
Code	return m . containsKey ( new BigDecimal ( value , false ) ) ;
Distance : 9

297
Tree	return continue; ;
Code	return continue; ;
Distance : 10

298
Tree	return m . containsKey ( new WeakHashMap ( value , false ) ) ;
Code	return m . containsKey ( new WeakHashMap ( value , false ) ) ;
Distance : 9

299
Tree	return value ;
Code	return value ;
Distance : 9

300
Tree	return this . m . containsKey ( value , Integer.MIN_VALUE ) ;
Code	return this . m . containsKey ( value , Integer.MIN_VALUE ) ;
Distance : 6

301
Tree	return new MapStrLookup ( value , false ) . containsKey ( value ) ;
Code	return new MapStrLookup ( value , false ) . containsKey ( value ) ;
Distance : 7

302
Tree	return this . m ; pattern
Code	return this . m ; pattern
Distance : 10

303
Tree	return m . containsKey ( new ClassNotFoundSerialization ( value , false ) ) ;
Code	return m . containsKey ( new ClassNotFoundSerialization ( value , false ) ) ;
Distance : 9

304
Tree	return new GenericArrayTypeImpl ( value , false ) . containsKey ( value ) ;
Code	return new GenericArrayTypeImpl ( value , false ) . containsKey ( value ) ;
Distance : 7

305
Tree	return return; ;
Code	return return; ;
Distance : 10

306
Tree	return new isOSNameMatch ( value , false ) . containsKey ( value ) ;
Code	return new isOSNameMatch ( value , false ) . containsKey ( value ) ;
Distance : 7

307
Tree	return NUMBER_CONSTANT / value ; Calendar
Code	return NUMBER_CONSTANT / value ; Calendar
Distance : 10

308
Tree	return new UnsupportedOperationException ( value , false ) . containsKey ( value ) ;
Code	return new UnsupportedOperationException ( value , false ) . containsKey ( value ) ;
Distance : 7

309
Tree	return value + NUMBER_CONSTANT ;
Code	return value + NUMBER_CONSTANT ;
Distance : 10

310
Tree	return m () . containsKey ( value ) ; CharSequence
Code	return m () . containsKey ( value ) ; CharSequence
Distance : 5

311
Tree	return new ClassNotFoundSerialization ( value , false ) . containsKey ( value ) ;
Code	return new ClassNotFoundSerialization ( value , false ) . containsKey ( value ) ;
Distance : 7

312
Tree	return value . m ( value ) ;
Code	return value . m ( value ) ;
Distance : 6

313
Tree	return m () . ( ( value ) ; !=
Code	return m () . ( ( value ) ; !=
Distance : 6

314
Tree	return . () . ( ( value ) ; ]
Code	return . () . ( ( value ) ; ]
Distance : 7

315
Tree	return m () . value ( value ) ; ex
Code	return m () . value ( value ) ; ex
Distance : 6

316
Tree	return m () . containsKey ( value ) ; Calendar
Code	return m () . containsKey ( value ) ; Calendar
Distance : 5

317
Tree	return m ( value , value , true ) ;
Code	return m ( value , value , true ) ;
Distance : 8

318
Tree	return m () . value ( value ) ; toString
Code	return m () . value ( value ) ; toString
Distance : 6

319
Tree	return this . m . containsKey ( value , osVersionPrefix ) ;
Code	return this . m . containsKey ( value , osVersionPrefix ) ;
Distance : 6

320
Tree	return new ByteArrayInputStream ( value , false ) . containsKey ( value ) ;
Code	return new ByteArrayInputStream ( value , false ) . containsKey ( value ) ;
Distance : 7

321
Tree	return this . m . containsKey () . value ( value ) ; cs
Code	return this . m . containsKey () . value ( value ) ; cs
Distance : 8

322
Tree	return m . containsKey ( value , false ) ; style
Code	return m . containsKey ( value , false ) ; style
Distance : 7

323
Tree	return m . containsKey ( value , false ) ; short
Code	return m . containsKey ( value , false ) ; short
Distance : 7

324
Tree	return m . containsKey ( STRING_CONSTANT , value ) ;
Code	return m . containsKey ( STRING_CONSTANT , value ) ;
Distance : 6

325
Tree	return value . containsKey ( value , value ) ;
Code	return value . containsKey ( value , value ) ;
Distance : 7

326
Tree	return this . m . containsKey ( value , typeArguments.length ) ;
Code	return this . m . containsKey ( value , typeArguments.length ) ;
Distance : 6

327
Tree	return m . containsKey () ; ex
Code	return m . containsKey () ; ex
Distance : 8

328
Tree	return m () . containsKey ( value ) ; pattern
Code	return m () . containsKey ( value ) ; pattern
Distance : 5

329
Tree	return m . containsKey ( value , true ) ;
Code	return m . containsKey ( value , true ) ;
Distance : 6

330
Tree	return value . containsKey ( m . value ( m ) ) ;
Code	return value . containsKey ( m . value ( m ) ) ;
Distance : 7

331
Tree	return this . m . containsKey () . value ( value ) ; isEquals
Code	return this . m . containsKey () . value ( value ) ; isEquals
Distance : 8

332
Tree	return this . m . containsKey () . value ( value ) ; {}
Code	return this . m . containsKey () . value ( value ) ; {}
Distance : 8

333
Tree	return m ; ]
Code	return m ; ]
Distance : 10

334
Tree	return this . m . containsKey () . value ( value ) ; obj
Code	return this . m . containsKey () . value ( value ) ; obj
Distance : 8

335
Tree	return m ( value ) ; ex
Code	return m ( value ) ; ex
Distance : 7

336
Tree	return NUMBER_CONSTANT / value ; T
Code	return NUMBER_CONSTANT / value ; T
Distance : 10

337
Tree	return m () . value ( value ) ; T
Code	return m () . value ( value ) ; T
Distance : 6

338
Tree	return m . containsKey ( NUMBER_CONSTANT , value ) ; byte
Code	return m . containsKey ( NUMBER_CONSTANT , value ) ; byte
Distance : 7

339
Tree	return m . containsKey ( NUMBER_CONSTANT , value ) ; cs
Code	return m . containsKey ( NUMBER_CONSTANT , value ) ; cs
Distance : 7

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
CharSequence cs
-------------------------------------------------------------------------------
Child code is: 
String cs
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=CharSequence})) (800{val=cs})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=String})) (800{val=cs})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/30/parent/src_main_java_org_apache_commons_lang3_StringUtils.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 170
Correct
========================================================================
True

0
Tree	final CharSequence cs
Code	final CharSequence cs
Distance : 2

1
Tree	; cs
Code	; cs
Distance : 1

2
Tree	CharSequence [] cs
Code	CharSequence [] cs
Distance : 2

3
Tree	String cs
Code	String cs
Distance : 0

4
Tree	cs cs
Code	cs cs
Distance : 1

5
Tree	final
Code	final
Distance : 2

6
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

7
Tree	cs cs
Code	cs cs
Distance : 1

8
Tree	short
Code	short
Distance : 2

9
Tree	public cs . . . cs
Code	public cs . . . cs
Distance : 5

10
Tree	public cs < cs > cs
Code	public cs < cs > cs
Distance : 5

11
Tree	int
Code	int
Distance : 2

12
Tree	cs < cs , cs > cs
Code	cs < cs , cs > cs
Distance : 6

13
Tree	final byte cs
Code	final byte cs
Distance : 2

14
Tree	long . . . cs
Code	long . . . cs
Distance : 4

15
Tree	char cs
Code	char cs
Distance : 1

16
Tree	final int . . . cs
Code	final int . . . cs
Distance : 5

17
Tree	String [] cs
Code	String [] cs
Distance : 1

18
Tree	final long . . . cs
Code	final long . . . cs
Distance : 5

19
Tree	CharSequence cs Calendar
Code	CharSequence cs Calendar
Distance : 2

20
Tree	double cs
Code	double cs
Distance : 1

21
Tree	!=
Code	!=
Distance : 2

22
Tree	short cs
Code	short cs
Distance : 1

23
Tree	int cs
Code	int cs
Distance : 1

24
Tree	synchronized cs < cs > cs
Code	synchronized cs < cs > cs
Distance : 5

25
Tree	-
Code	-
Distance : 2

26
Tree	byte cs
Code	byte cs
Distance : 1

27
Tree	void cs
Code	void cs
Distance : 1

28
Tree	final cs < cs > cs
Code	final cs < cs > cs
Distance : 5

29
Tree	static CharSequence cs
Code	static CharSequence cs
Distance : 2

30
Tree	Collection
Code	Collection
Distance : 2

31
Tree	final float . . . cs
Code	final float . . . cs
Distance : 5

32
Tree	final boolean . . . cs
Code	final boolean . . . cs
Distance : 5

33
Tree	protected CharSequence cs
Code	protected CharSequence cs
Distance : 2

34
Tree	float cs
Code	float cs
Distance : 1

35
Tree	final byte . . . cs
Code	final byte . . . cs
Distance : 5

36
Tree	final boolean cs
Code	final boolean cs
Distance : 2

37
Tree	<
Code	<
Distance : 2

38
Tree	final void . . . cs
Code	final void . . . cs
Distance : 5

39
Tree	boolean . . . cs
Code	boolean . . . cs
Distance : 4

40
Tree	final void cs
Code	final void cs
Distance : 2

41
Tree	byte . . . cs
Code	byte . . . cs
Distance : 4

42
Tree	final cs . . . cs
Code	final cs . . . cs
Distance : 5

43
Tree	boolean cs
Code	boolean cs
Distance : 1

44
Tree	String
Code	String
Distance : 1

45
Tree	final short cs
Code	final short cs
Distance : 2

46
Tree	final char cs
Code	final char cs
Distance : 2

47
Tree	cs < cs , cs > cs [
Code	cs < cs , cs > cs [
Distance : 7

48
Tree	cs < cs , cs > cs length
Code	cs < cs , cs > cs length
Distance : 7

49
Tree	cs < cs , cs > cs Date
Code	cs < cs , cs > cs Date
Distance : 7

50
Tree	set.length cs
Code	set.length cs
Distance : 1

51
Tree	cs cs StringUtils
Code	cs cs StringUtils
Distance : 2

52
Tree	cs cs length
Code	cs cs length
Distance : 2

53
Tree	cs < cs , cs > cs StringUtils
Code	cs < cs , cs > cs StringUtils
Distance : 7

54
Tree	final cs < cs > cs short
Code	final cs < cs > cs short
Distance : 6

55
Tree	final cs < cs > cs StringBuilder
Code	final cs < cs > cs StringBuilder
Distance : 6

56
Tree	cs < cs , cs > cs buffer
Code	cs < cs , cs > cs buffer
Distance : 7

57
Tree	CharSequence cs ]
Code	CharSequence cs ]
Distance : 2

58
Tree	CharSequence cs !=
Code	CharSequence cs !=
Distance : 2

59
Tree	CharSequence cs ex
Code	CharSequence cs ex
Distance : 2

60
Tree	CharSequence cs Calendar
Code	CharSequence cs Calendar
Distance : 2

61
Tree	CharSequence cs toString
Code	CharSequence cs toString
Distance : 2

62
Tree	CharSequence cs pattern
Code	CharSequence cs pattern
Distance : 2

63
Tree	CharSequence [] cs pattern
Code	CharSequence [] cs pattern
Distance : 3

64
Tree	int . . . cs style
Code	int . . . cs style
Distance : 5

65
Tree	final float cs
Code	final float cs
Distance : 2

66
Tree	CharSequence [] cs ]
Code	CharSequence [] cs ]
Distance : 3

67
Tree	CharSequence [] cs toString
Code	CharSequence [] cs toString
Distance : 3

68
Tree	cs cs toString
Code	cs cs toString
Distance : 2

69
Tree	sz cs
Code	sz cs
Distance : 1

70
Tree	final String cs
Code	final String cs
Distance : 1

71
Tree	cs . . . cs
Code	cs . . . cs
Distance : 4

72
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

73
Tree	CharSequence [] cs T
Code	CharSequence [] cs T
Distance : 3

74
Tree	CharSequence [] cs !=
Code	CharSequence [] cs !=
Distance : 3

75
Tree	CharSequence [] cs Calendar
Code	CharSequence [] cs Calendar
Distance : 3

76
Tree	cs . . . cs ex
Code	cs . . . cs ex
Distance : 5

77
Tree	@ String String cs
Code	@ String String cs
Distance : 2

78
Tree	noOfItems cs
Code	noOfItems cs
Distance : 1

79
Tree	cs < cs > cs length
Code	cs < cs > cs length
Distance : 5

80
Tree	cs . . . cs length
Code	cs . . . cs length
Distance : 5

81
Tree	cs < cs , cs > cs mutNum
Code	cs < cs , cs > cs mutNum
Distance : 7

82
Tree	cs < cs > cs mutNum
Code	cs < cs > cs mutNum
Distance : 5

83
Tree	* cs
Code	* cs
Distance : 1

84
Tree	startIndex cs
Code	startIndex cs
Distance : 1

85
Tree	cs < cs > cs !=
Code	cs < cs > cs !=
Distance : 5

86
Tree	cs . . . cs toString
Code	cs . . . cs toString
Distance : 5

87
Tree	int cs style
Code	int cs style
Distance : 2

88
Tree	threshold cs
Code	threshold cs
Distance : 1

89
Tree	String cs
Code	String cs
Distance : 0

90
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

91
Tree	cs . . . cs StringUtils
Code	cs . . . cs StringUtils
Distance : 5

92
Tree	int . . . cs
Code	int . . . cs
Distance : 4

93
Tree	cs . . . cs buffer
Code	cs . . . cs buffer
Distance : 5

94
Tree	final long cs
Code	final long cs
Distance : 2

95
Tree	cs . . . cs [
Code	cs . . . cs [
Distance : 5

96
Tree	final cs . . . cs short
Code	final cs . . . cs short
Distance : 6

97
Tree	final int cs
Code	final int cs
Distance : 2

98
Tree	cs . . . cs Date
Code	cs . . . cs Date
Distance : 5

99
Tree	cs cs !=
Code	cs cs !=
Distance : 2

100
Tree	cs cs mutNum
Code	cs cs mutNum
Distance : 2

101
Tree	cs cs ex
Code	cs cs ex
Distance : 2

102
Tree	final cs . . . cs StringBuilder
Code	final cs . . . cs StringBuilder
Distance : 6

103
Tree	private cs < cs > cs
Code	private cs < cs > cs
Distance : 5

104
Tree	protected cs . . . cs
Code	protected cs . . . cs
Distance : 5

105
Tree	protected String cs
Code	protected String cs
Distance : 1

106
Tree	final char . . . cs
Code	final char . . . cs
Distance : 5

107
Tree	@ CharSequence CharSequence cs
Code	@ CharSequence CharSequence cs
Distance : 3

108
Tree	protected cs < cs > cs
Code	protected cs < cs > cs
Distance : 5

109
Tree	
Code	
Distance : 2

110
Tree	static String cs
Code	static String cs
Distance : 1

111
Tree	CharSequence cs . . . cs
Code	CharSequence cs . . . cs
Distance : 5

112
Tree	cs < cs > cs toString
Code	cs < cs > cs toString
Distance : 5

113
Tree	short . . . cs
Code	short . . . cs
Distance : 4

114
Tree	CharSequence cs ex
Code	CharSequence cs ex
Distance : 2

115
Tree	cs < cs > cs StringUtils
Code	cs < cs > cs StringUtils
Distance : 5

116
Tree	synchronized cs . . . cs
Code	synchronized cs . . . cs
Distance : 5

117
Tree	CharSequence cs < cs > cs
Code	CharSequence cs < cs > cs
Distance : 5

118
Tree	double . . . cs
Code	double . . . cs
Distance : 4

119
Tree	static cs . . . cs
Code	static cs . . . cs
Distance : 5

120
Tree	static long cs
Code	static long cs
Distance : 2

121
Tree	cs < cs > cs ex
Code	cs < cs > cs ex
Distance : 5

122
Tree	public CharSequence cs
Code	public CharSequence cs
Distance : 2

123
Tree	CharSequence cs ]
Code	CharSequence cs ]
Distance : 2

124
Tree	CharSequence cs !=
Code	CharSequence cs !=
Distance : 2

125
Tree	final double cs
Code	final double cs
Distance : 2

126
Tree	CharSequence cs T
Code	CharSequence cs T
Distance : 2

127
Tree	private CharSequence cs
Code	private CharSequence cs
Distance : 2

128
Tree	CharSequence [] cs CharSequence
Code	CharSequence [] cs CharSequence
Distance : 3

129
Tree	private cs . . . cs
Code	private cs . . . cs
Distance : 5

130
Tree	cs < cs > cs
Code	cs < cs > cs
Distance : 4

131
Tree	@ String CharSequence cs
Code	@ String CharSequence cs
Distance : 2

132
Tree	private String cs
Code	private String cs
Distance : 1

133
Tree	@ CharSequence CharSequence cs byte
Code	@ CharSequence CharSequence cs byte
Distance : 4

134
Tree	cs < cs , cs > cs toString
Code	cs < cs , cs > cs toString
Distance : 7

135
Tree	cs < cs > cs buffer
Code	cs < cs > cs buffer
Distance : 5

136
Tree	static long . . . cs
Code	static long . . . cs
Distance : 5

137
Tree	CharSequence CharSequence cs
Code	CharSequence CharSequence cs
Distance : 2

138
Tree	long cs
Code	long cs
Distance : 1

139
Tree	static cs < cs > cs
Code	static cs < cs > cs
Distance : 5

140
Tree	char . . . cs
Code	char . . . cs
Distance : 4

141
Tree	@ CharSequence CharSequence cs cs
Code	@ CharSequence CharSequence cs cs
Distance : 4

142
Tree	CharSequence
Code	CharSequence
Distance : 2

143
Tree	<>
Code	<>
Distance : 2

144
Tree	final double . . . cs
Code	final double . . . cs
Distance : 5

145
Tree	@ CharSequence CharSequence cs isEquals
Code	@ CharSequence CharSequence cs isEquals
Distance : 4

146
Tree	@ CharSequence CharSequence cs MutableInt
Code	@ CharSequence CharSequence cs MutableInt
Distance : 4

147
Tree	final cs . . . cs isEquals
Code	final cs . . . cs isEquals
Distance : 6

148
Tree	cs < cs > cs [
Code	cs < cs > cs [
Distance : 5

149
Tree	CharSequence cs CharSequence
Code	CharSequence cs CharSequence
Distance : 2

150
Tree	@ CharSequence CharSequence cs obj
Code	@ CharSequence CharSequence cs obj
Distance : 4

151
Tree	CharSequence cs pattern
Code	CharSequence cs pattern
Distance : 2

152
Tree	CharSequence cs toString
Code	CharSequence cs toString
Distance : 2

153
Tree	cs < cs > cs Date
Code	cs < cs > cs Date
Distance : 5

154
Tree	@ CharSequence CharSequence cs {}
Code	@ CharSequence CharSequence cs {}
Distance : 4

155
Tree	cs . . . cs mutNum
Code	cs . . . cs mutNum
Distance : 5

156
Tree	cs . . . cs !=
Code	cs . . . cs !=
Distance : 5

157
Tree	CharSequence [] cs ex
Code	CharSequence [] cs ex
Distance : 3

158
Tree	cs < cs , cs > cs ex
Code	cs < cs , cs > cs ex
Distance : 7

159
Tree	cs cs buffer
Code	cs cs buffer
Distance : 2

160
Tree	final short . . . cs
Code	final short . . . cs
Distance : 5

161
Tree	cs < cs , cs > cs !=
Code	cs < cs , cs > cs !=
Distance : 7

162
Tree	cs cs [
Code	cs cs [
Distance : 2

163
Tree	float . . . cs
Code	float . . . cs
Distance : 4

164
Tree	CharSequence cs CharSequence
Code	CharSequence cs CharSequence
Distance : 2

165
Tree	void . . . cs
Code	void . . . cs
Distance : 4

166
Tree	@ CharSequence String cs
Code	@ CharSequence String cs
Distance : 2

167
Tree	cs cs Date
Code	cs cs Date
Distance : 2

168
Tree	CharSequence cs T
Code	CharSequence cs T
Distance : 2

169
Tree	final cs < cs > cs isEquals
Code	final cs < cs > cs isEquals
Distance : 6

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
Calendar c = new GregorianCalendar ( mTimeZone ) ;
-------------------------------------------------------------------------------
Child code is: 
Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (234{val=,}) (800{val=mLocale}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/26/parent/src_main_java_org_apache_commons_lang3_time_FastDateFormat.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 400
Correct
========================================================================
True

0
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

1
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , mTimeZone ) ;
Distance : 2

2
Tree	Calendar mTimeZone = new Calendar ( this , c ) ;
Code	Calendar mTimeZone = new Calendar ( this , c ) ;
Distance : 4

3
Tree	Calendar c = new GregorianCalendar ( mTimeZone , null ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , null ) ;
Distance : 1

4
Tree	Calendar setUp ;
Code	Calendar setUp ;
Distance : 9

5
Tree	Calendar isSameLocalTime ;
Code	Calendar isSameLocalTime ;
Distance : 9

6
Tree	GregorianCalendar c = new Calendar ( this , c ) ;
Code	GregorianCalendar c = new Calendar ( this , c ) ;
Distance : 4

7
Tree	Calendar c = new Calendar ( mTimeZone ) . getGmtTimeZone () ;
Code	Calendar c = new Calendar ( mTimeZone ) . getGmtTimeZone () ;
Distance : 5

8
Tree	Calendar c = new Calendar ( mLocale , mTimeZone ) ;
Code	Calendar c = new Calendar ( mLocale , mTimeZone ) ;
Distance : 3

9
Tree	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

10
Tree	Calendar c = new Calendar ( mLocale ) ;
Code	Calendar c = new Calendar ( mLocale ) ;
Distance : 3

11
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

12
Tree	Calendar c = new Calendar ( TimeZones.GMT_ID ) ;
Code	Calendar c = new Calendar ( TimeZones.GMT_ID ) ;
Distance : 4

13
Tree	Calendar c = new Calendar ( super(); ) ;
Code	Calendar c = new Calendar ( super(); ) ;
Distance : 4

14
Tree	Calendar c = new Calendar ( mTimeZone ) . getDefault () ;
Code	Calendar c = new Calendar ( mTimeZone ) . getDefault () ;
Distance : 5

15
Tree	Calendar c = new Calendar ( mTimeZone ) . getInstance () ;
Code	Calendar c = new Calendar ( mTimeZone ) . getInstance () ;
Distance : 5

16
Tree	Calendar c = new Calendar () ;
Code	Calendar c = new Calendar () ;
Distance : 6

17
Tree	Calendar c = new Calendar ( mTimeZone , false ) ;
Code	Calendar c = new Calendar ( mTimeZone , false ) ;
Distance : 2

18
Tree	Calendar c = new Calendar ( mTimeZone ) . unmodifiableSet () ;
Code	Calendar c = new Calendar ( mTimeZone ) . unmodifiableSet () ;
Distance : 5

19
Tree	Calendar c = new Calendar ( mTimeZone ) . setTime () ;
Code	Calendar c = new Calendar ( mTimeZone ) . setTime () ;
Distance : 5

20
Tree	Calendar c = new Calendar ( mTimeZone ) . mLocale () ;
Code	Calendar c = new Calendar ( mTimeZone ) . mLocale () ;
Distance : 4

21
Tree	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 1

22
Tree	GregorianCalendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 2

23
Tree	Calendar c = new Calendar ( c , mLocale ) ;
Code	Calendar c = new Calendar ( c , mLocale ) ;
Distance : 2

24
Tree	Calendar c = new Calendar ( mLocale , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mLocale , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

25
Tree	Calendar c = new Calendar ( mTimeZone , super(); ) ;
Code	Calendar c = new Calendar ( mTimeZone , super(); ) ;
Distance : 2

26
Tree	Calendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

27
Tree	Calendar c = new Calendar ( mTimeZone . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Distance : 6

28
Tree	Calendar c = new Calendar ( mTimeZone ) . newCalendar () ;
Code	Calendar c = new Calendar ( mTimeZone ) . newCalendar () ;
Distance : 5

29
Tree	final Calendar c = new Calendar ( mTimeZone ) ;
Code	final Calendar c = new Calendar ( mTimeZone ) ;
Distance : 4

30
Tree	Calendar c = super(); ;
Code	Calendar c = super(); ;
Distance : 7

31
Tree	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 4

32
Tree	Calendar c = NUMBER_CONSTANT ;
Code	Calendar c = NUMBER_CONSTANT ;
Distance : 7

33
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getPattern ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getPattern ( STRING_CONSTANT ) ) ;
Distance : 8

34
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getTimeZone ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getTimeZone ( STRING_CONSTANT ) ) ;
Distance : 8

35
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . createFebruaryTestDate ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . createFebruaryTestDate ( STRING_CONSTANT ) ) ;
Distance : 6

36
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getRight ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getRight ( STRING_CONSTANT ) ) ;
Distance : 8

37
Tree	Calendar c = new Calendar ( mLocale , null ) ;
Code	Calendar c = new Calendar ( mLocale , null ) ;
Distance : 3

38
Tree	Calendar c = new Calendar < mLocale > ( c , mLocale ) ;
Code	Calendar c = new Calendar < mLocale > ( c , mLocale ) ;
Distance : 5

39
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getRight ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getRight ( STRING_CONSTANT ) ) ;
Distance : 6

40
Tree	Calendar newCalendar ;
Code	Calendar newCalendar ;
Distance : 9

41
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getLocale ( STRING_CONSTANT ) ) ;
Distance : 8

42
Tree	Calendar c = new Calendar ( this , mLocale ) ;
Code	Calendar c = new Calendar ( this , mLocale ) ;
Distance : 2

43
Tree	newCalendar
Code	newCalendar
Distance : 11

44
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Distance : 8

45
Tree	Calendar [] c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

46
Tree	protected Calendar c = new Calendar ( mTimeZone ) ;
Code	protected Calendar c = new Calendar ( mTimeZone ) ;
Distance : 4

47
Tree	GregorianCalendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 3

48
Tree	Calendar c = new GregorianCalendar ( STRING_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( STRING_CONSTANT ) ;
Distance : 3

49
Tree	Calendar c = new Calendar ( mTimeZone , Locale.KOREA ) ;
Code	Calendar c = new Calendar ( mTimeZone , Locale.KOREA ) ;
Distance : 2

50
Tree	Calendar c = new Calendar ( Boolean.FALSE ) ;
Code	Calendar c = new Calendar ( Boolean.FALSE ) ;
Distance : 4

51
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 2

52
Tree	setTime
Code	setTime
Distance : 11

53
Tree	Calendar c = new Calendar ( mTimeZone ) . final () ;
Code	Calendar c = new Calendar ( mTimeZone ) . final () ;
Distance : 5

54
Tree	Calendar mTimeZone = new Calendar ( STRING_CONSTANT ) ;
Code	Calendar mTimeZone = new Calendar ( STRING_CONSTANT ) ;
Distance : 5

55
Tree	Calendar c = newStringBuilder () ;
Code	Calendar c = newStringBuilder () ;
Distance : 7

56
Tree	Calendar c = newCalendar () ;
Code	Calendar c = newCalendar () ;
Distance : 7

57
Tree	Calendar setTime ;
Code	Calendar setTime ;
Distance : 9

58
Tree	Calendar mTimeZone = new Calendar ( null ) ;
Code	Calendar mTimeZone = new Calendar ( null ) ;
Distance : 5

59
Tree	Calendar mTimeZone = new Calendar () ;
Code	Calendar mTimeZone = new Calendar () ;
Distance : 7

60
Tree	Calendar c = new Calendar ( mTimeZone , return; ) ;
Code	Calendar c = new Calendar ( mTimeZone , return; ) ;
Distance : 2

61
Tree	Calendar c = new Calendar < mTimeZone > ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar < mTimeZone > ( mTimeZone , mLocale ) ;
Distance : 4

62
Tree	Calendar mLocale = NUMBER_CONSTANT ;
Code	Calendar mLocale = NUMBER_CONSTANT ;
Distance : 8

63
Tree	Calendar c = c ;
Code	Calendar c = c ;
Distance : 7

64
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getTime ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getTime ( STRING_CONSTANT ) ) ;
Distance : 6

65
Tree	GregorianCalendar mTimeZone = NUMBER_CONSTANT ;
Code	GregorianCalendar mTimeZone = NUMBER_CONSTANT ;
Distance : 8

66
Tree	GregorianCalendar c = c . getInstance ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = c . getInstance ( mTimeZone , mLocale ) ;
Distance : 4

67
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

68
Tree	Calendar mTimeZone = new Calendar ( NUMBER_CONSTANT ) ;
Code	Calendar mTimeZone = new Calendar ( NUMBER_CONSTANT ) ;
Distance : 5

69
Tree	Calendar mLocale = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar mLocale = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

70
Tree	Calendar c = new Calendar ( mTimeZone ) . isMatch ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . isMatch ( mTimeZone ) ;
Distance : 6

71
Tree	GregorianCalendar mTimeZone = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar mTimeZone = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

72
Tree	protected Calendar c = c . getInstance ( mTimeZone ) ;
Code	protected Calendar c = c . getInstance ( mTimeZone ) ;
Distance : 6

73
Tree	Calendar mTimeZone = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Code	Calendar mTimeZone = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Distance : 4

74
Tree	Calendar mTimeZone = null ;
Code	Calendar mTimeZone = null ;
Distance : 8

75
Tree	Calendar mTimeZone = new Calendar ( NUMBER_CONSTANT , mLocale ) ;
Code	Calendar mTimeZone = new Calendar ( NUMBER_CONSTANT , mLocale ) ;
Distance : 3

76
Tree	Calendar c = mLocale . getInstance ( mTimeZone , new Calendar ( mLocale ) ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , new Calendar ( mLocale ) ) ;
Distance : 7

77
Tree	Calendar mLocale = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar mLocale = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

78
Tree	GregorianCalendar c = c ;
Code	GregorianCalendar c = c ;
Distance : 8

79
Tree	Calendar c = checkInitialize () ;
Code	Calendar c = checkInitialize () ;
Distance : 7

80
Tree	Calendar c = new Calendar ( getLeftElement , mLocale ) ;
Code	Calendar c = new Calendar ( getLeftElement , mLocale ) ;
Distance : 2

81
Tree	Calendar c = new Calendar ( mTimeZone ) . Calendar.JANUARY ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . Calendar.JANUARY ( mTimeZone ) ;
Distance : 6

82
Tree	GregorianCalendar mLocale = new Calendar ( STRING_CONSTANT ) ;
Code	GregorianCalendar mLocale = new Calendar ( STRING_CONSTANT ) ;
Distance : 6

83
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , mTimeZone ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , mTimeZone ) ;
Distance : 3

84
Tree	Calendar c = mLocale . newCalendar ( mTimeZone , mLocale ) ;
Code	Calendar c = mLocale . newCalendar ( mTimeZone , mLocale ) ;
Distance : 3

85
Tree	Calendar c = new Calendar ( c , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( c , NUMBER_CONSTANT ) ;
Distance : 3

86
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getTimeZone ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getTimeZone ( STRING_CONSTANT ) ) ;
Distance : 6

87
Tree	protected Calendar c = mLocale . getInstance ( mTimeZone ) ;
Code	protected Calendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 6

88
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Distance : 6

89
Tree	final GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	final GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 5

90
Tree	Calendar Calendar ;
Code	Calendar Calendar ;
Distance : 9

91
Tree	Calendar c = c . getInstance ( mTimeZone ) ;
Code	Calendar c = c . getInstance ( mTimeZone ) ;
Distance : 5

92
Tree	Calendar c = new Calendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

93
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getRightElement ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getRightElement ( STRING_CONSTANT ) ) ;
Distance : 8

94
Tree	Calendar c ;
Code	Calendar c ;
Distance : 8

95
Tree	final Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	final Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

96
Tree	Calendar c = new Calendar ( mTimeZone ) . unmodifiableSet ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . unmodifiableSet ( mTimeZone ) ;
Distance : 6

97
Tree	GregorianCalendar c = NUMBER_CONSTANT ;
Code	GregorianCalendar c = NUMBER_CONSTANT ;
Distance : 8

98
Tree	Calendar mTimeZone = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar mTimeZone = new Calendar ( mTimeZone , mLocale ) ;
Distance : 2

99
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 0

100
Tree	Calendar c = new Calendar < mLocale > ( mLocale , mLocale ) ;
Code	Calendar c = new Calendar < mLocale > ( mLocale , mLocale ) ;
Distance : 5

101
Tree	Calendar c = new GregorianCalendar ( new Calendar ( mTimeZone ) ) ;
Code	Calendar c = new GregorianCalendar ( new Calendar ( mTimeZone ) ) ;
Distance : 5

102
Tree	GregorianCalendar mLocale = new Calendar ( NUMBER_CONSTANT ) ;
Code	GregorianCalendar mLocale = new Calendar ( NUMBER_CONSTANT ) ;
Distance : 6

103
Tree	Calendar mLocale ;
Code	Calendar mLocale ;
Distance : 8

104
Tree	Calendar mTimeZone = NUMBER_CONSTANT ;
Code	Calendar mTimeZone = NUMBER_CONSTANT ;
Distance : 8

105
Tree	Calendar c = new Calendar ( mTimeZone ) . setTime ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . setTime ( mTimeZone ) ;
Distance : 6

106
Tree	Calendar c = new Calendar ( mTimeZone ) . isMatch () ;
Code	Calendar c = new Calendar ( mTimeZone ) . isMatch () ;
Distance : 5

107
Tree	Calendar c = chars.length ;
Code	Calendar c = chars.length ;
Distance : 7

108
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . mLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . mLocale ( STRING_CONSTANT ) ) ;
Distance : 6

109
Tree	Calendar mTimeZone = STRING_CONSTANT ;
Code	Calendar mTimeZone = STRING_CONSTANT ;
Distance : 8

110
Tree	Calendar c = new Calendar ( NEW_YORK , mLocale ) ;
Code	Calendar c = new Calendar ( NEW_YORK , mLocale ) ;
Distance : 2

111
Tree	Calendar c = new Calendar ( mTimeZone , new int [ Calendar.DAY_OF_WEEK ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new int [ Calendar.DAY_OF_WEEK ] ) ;
Distance : 6

112
Tree	Calendar c = Calendar.JANUARY ;
Code	Calendar c = Calendar.JANUARY ;
Distance : 7

113
Tree	GregorianCalendar c = new Calendar () ;
Code	GregorianCalendar c = new Calendar () ;
Distance : 7

114
Tree	Calendar mLocale = new Calendar ( mTimeZone ) ;
Code	Calendar mLocale = new Calendar ( mTimeZone ) ;
Distance : 4

115
Tree	Calendar c = new Calendar ( mTimeZone , new int [ FastDateParser.JAPANESE_IMPERIAL ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new int [ FastDateParser.JAPANESE_IMPERIAL ] ) ;
Distance : 6

116
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getTime ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getTime ( STRING_CONSTANT ) ) ;
Distance : 8

117
Tree	Calendar c = c . getInstance ( mTimeZone , mTimeZone ) ;
Code	Calendar c = c . getInstance ( mTimeZone , mTimeZone ) ;
Distance : 4

118
Tree	Calendar c = new Calendar ( mTimeZone . mLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . mLocale ( STRING_CONSTANT ) ) ;
Distance : 5

119
Tree	Calendar c = new Calendar ( mTimeZone ) . Calendar.JANUARY () ;
Code	Calendar c = new Calendar ( mTimeZone ) . Calendar.JANUARY () ;
Distance : 5

120
Tree	GregorianCalendar c ;
Code	GregorianCalendar c ;
Distance : 9

121
Tree	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 1

122
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getLocale ( STRING_CONSTANT ) ) ;
Distance : 6

123
Tree	Calendar c = new Calendar ( mLocale , false ) ;
Code	Calendar c = new Calendar ( mLocale , false ) ;
Distance : 3

124
Tree	Calendar c = new Calendar ( mTimeZone , NEW_YORK ) ;
Code	Calendar c = new Calendar ( mTimeZone , NEW_YORK ) ;
Distance : 2

125
Tree	GregorianCalendar c = new Calendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

126
Tree	Calendar c = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ;
Code	Calendar c = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ;
Distance : 7

127
Tree	Calendar c = new GregorianCalendar ( null ) ;
Code	Calendar c = new GregorianCalendar ( null ) ;
Distance : 3

128
Tree	Calendar c = new Calendar ( mTimeZone , Calendar.SUNDAY ) ;
Code	Calendar c = new Calendar ( mTimeZone , Calendar.SUNDAY ) ;
Distance : 2

129
Tree	Calendar c = new Calendar ( mTimeZone . getDefault ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getDefault ( STRING_CONSTANT ) ) ;
Distance : 6

130
Tree	mLocale
Code	mLocale
Distance : 10

131
Tree	Calendar c = new Calendar ( applyRulesToString ) ;
Code	Calendar c = new Calendar ( applyRulesToString ) ;
Distance : 4

132
Tree	Calendar c = new Calendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 6

133
Tree	Calendar c = new GregorianCalendar < mTimeZone > ( mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar < mTimeZone > ( mTimeZone , mLocale ) ;
Distance : 3

134
Tree	Calendar c = c . getInstance ( mTimeZone , new Calendar ( mLocale ) ) ;
Code	Calendar c = c . getInstance ( mTimeZone , new Calendar ( mLocale ) ) ;
Distance : 7

135
Tree	GregorianCalendar c = new Calendar ( mTimeZone , null ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , null ) ;
Distance : 3

136
Tree	Calendar c = new GregorianCalendar ( this , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( this , mLocale ) ;
Distance : 1

137
Tree	Calendar c = new Calendar ( c , true ) ;
Code	Calendar c = new Calendar ( c , true ) ;
Distance : 3

138
Tree	Calendar mLocale = new Calendar ( mTimeZone , null ) ;
Code	Calendar mLocale = new Calendar ( mTimeZone , null ) ;
Distance : 3

139
Tree	GregorianCalendar c = newCalendar () ;
Code	GregorianCalendar c = newCalendar () ;
Distance : 8

140
Tree	Calendar c = mLocale ;
Code	Calendar c = mLocale ;
Distance : 6

141
Tree	Calendar mTimeZone ;
Code	Calendar mTimeZone ;
Distance : 8

142
Tree	Calendar c = STRING_CONSTANT ; MutableInt
Code	Calendar c = STRING_CONSTANT ; MutableInt
Distance : 8

143
Tree	Calendar c = c . getInstance ( mLocale , mLocale ) ;
Code	Calendar c = c . getInstance ( mLocale , mLocale ) ;
Distance : 4

144
Tree	Calendar [] c = new Calendar ( c ) ;
Code	Calendar [] c = new Calendar ( c ) ;
Distance : 5

145
Tree	Calendar mLocale = new Calendar ( STRING_CONSTANT ) ;
Code	Calendar mLocale = new Calendar ( STRING_CONSTANT ) ;
Distance : 5

146
Tree	final
Code	final
Distance : 11

147
Tree	Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 1

148
Tree	final Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Code	final Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Distance : 6

149
Tree	Calendar mTimeZone = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar mTimeZone = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

150
Tree	Calendar c = new Calendar ( mTimeZone , new char [ Boolean.FALSE ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new char [ Boolean.FALSE ] ) ;
Distance : 6

151
Tree	L
Code	L
Distance : 11

152
Tree	Calendar [] mLocale = new Calendar ( mTimeZone ) ;
Code	Calendar [] mLocale = new Calendar ( mTimeZone ) ;
Distance : 5

153
Tree	Calendar c = new Calendar ( yMdHmsSZ ) ;
Code	Calendar c = new Calendar ( yMdHmsSZ ) ;
Distance : 4

154
Tree	Calendar c = mTimeZone ;
Code	Calendar c = mTimeZone ;
Distance : 6

155
Tree	GregorianCalendar mTimeZone = new Calendar ( STRING_CONSTANT ) ;
Code	GregorianCalendar mTimeZone = new Calendar ( STRING_CONSTANT ) ;
Distance : 6

156
Tree	Calendar c ; isEquals
Code	Calendar c ; isEquals
Distance : 9

157
Tree	GregorianCalendar mLocale = STRING_CONSTANT ;
Code	GregorianCalendar mLocale = STRING_CONSTANT ;
Distance : 9

158
Tree	Calendar mTimeZone = new Calendar ( mTimeZone ) ;
Code	Calendar mTimeZone = new Calendar ( mTimeZone ) ;
Distance : 4

159
Tree	Calendar c = new GregorianCalendar ( mLocale , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , NUMBER_CONSTANT ) ;
Distance : 2

160
Tree	Calendar c = new Calendar < c > ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar < c > ( mTimeZone , mLocale ) ;
Distance : 4

161
Tree	Calendar c = new Calendar ( mTimeZone , true ) ;
Code	Calendar c = new Calendar ( mTimeZone , true ) ;
Distance : 2

162
Tree	Calendar c = mLocale . getInstance ( mTimeZone , new Calendar ( mTimeZone ) ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , new Calendar ( mTimeZone ) ) ;
Distance : 8

163
Tree	Calendar c = new Calendar ( c ) ;
Code	Calendar c = new Calendar ( c ) ;
Distance : 4

164
Tree	Calendar c = new GregorianCalendar ( mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale ) ;
Distance : 2

165
Tree	Calendar [] c = new Calendar ( mLocale ) ;
Code	Calendar [] c = new Calendar ( mLocale ) ;
Distance : 4

166
Tree	Calendar c = new Calendar ( Calendar.JANUARY , mLocale ) ;
Code	Calendar c = new Calendar ( Calendar.JANUARY , mLocale ) ;
Distance : 2

167
Tree	Calendar c = EscapeUtils.ESCAPE_ECMASCRIPT ;
Code	Calendar c = EscapeUtils.ESCAPE_ECMASCRIPT ;
Distance : 7

168
Tree	GregorianCalendar mTimeZone = new Calendar ( null ) ;
Code	GregorianCalendar mTimeZone = new Calendar ( null ) ;
Distance : 6

169
Tree	Calendar c = new Calendar < mTimeZone > ( mLocale , mLocale ) ;
Code	Calendar c = new Calendar < mTimeZone > ( mLocale , mLocale ) ;
Distance : 5

170
Tree	Calendar c = createMessageFormat () ;
Code	Calendar c = createMessageFormat () ;
Distance : 7

171
Tree	Calendar c = new Calendar ( c ) ;
Code	Calendar c = new Calendar ( c ) ;
Distance : 4

172
Tree	GregorianCalendar mLocale = NUMBER_CONSTANT ;
Code	GregorianCalendar mLocale = NUMBER_CONSTANT ;
Distance : 9

173
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . createFebruaryTestDate ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . createFebruaryTestDate ( STRING_CONSTANT ) ) ;
Distance : 8

174
Tree	Calendar mLocale = new GregorianCalendar ( STRING_CONSTANT ) ;
Code	Calendar mLocale = new GregorianCalendar ( STRING_CONSTANT ) ;
Distance : 4

175
Tree	Calendar c = Calendar ;
Code	Calendar c = Calendar ;
Distance : 7

176
Tree	Calendar c = new GregorianCalendar () ;
Code	Calendar c = new GregorianCalendar () ;
Distance : 5

177
Tree	Calendar
Code	Calendar
Distance : 10

178
Tree	Calendar c = new Calendar ( this , c ) ;
Code	Calendar c = new Calendar ( this , c ) ;
Distance : 3

179
Tree	Calendar [] c = new Calendar ( mTimeZone ) ;
Code	Calendar [] c = new Calendar ( mTimeZone ) ;
Distance : 4

180
Tree	GregorianCalendar c = super(); ;
Code	GregorianCalendar c = super(); ;
Distance : 8

181
Tree	Calendar c = mLocale . getInstance ( mTimeZone , new GregorianCalendar ( mLocale ) ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , new GregorianCalendar ( mLocale ) ) ;
Distance : 7

182
Tree	Calendar c = new Calendar ( mTimeZone ) . getGmtTimeZone ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . getGmtTimeZone ( mTimeZone ) ;
Distance : 6

183
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , c ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , c ) ;
Distance : 3

184
Tree	Calendar c = new Calendar ( Calendar.DAY_OF_WEEK ) ;
Code	Calendar c = new Calendar ( Calendar.DAY_OF_WEEK ) ;
Distance : 4

185
Tree	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT ) ;
Distance : 5

186
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getPattern ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getPattern ( STRING_CONSTANT ) ) ;
Distance : 6

187
Tree	GregorianCalendar c = new Calendar ( mTimeZone , false ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , false ) ;
Distance : 3

188
Tree	Calendar c = new Calendar ( mTimeZone , Calendar.FEBRUARY ) ;
Code	Calendar c = new Calendar ( mTimeZone , Calendar.FEBRUARY ) ;
Distance : 2

189
Tree	Calendar c = new Calendar ( c , null ) ;
Code	Calendar c = new Calendar ( c , null ) ;
Distance : 3

190
Tree	Calendar c = c . getInstance ( mTimeZone , new Calendar ( mTimeZone ) ) ;
Code	Calendar c = c . getInstance ( mTimeZone , new Calendar ( mTimeZone ) ) ;
Distance : 8

191
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 2

192
Tree	Calendar c = new Calendar < mLocale > ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar < mLocale > ( mTimeZone , mLocale ) ;
Distance : 4

193
Tree	Calendar c = new Calendar < mTimeZone > ( c , mLocale ) ;
Code	Calendar c = new Calendar < mTimeZone > ( c , mLocale ) ;
Distance : 5

194
Tree	GregorianCalendar c = new Calendar ( this , mTimeZone ) ;
Code	GregorianCalendar c = new Calendar ( this , mTimeZone ) ;
Distance : 4

195
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 2

196
Tree	Calendar c = newCalendar ;
Code	Calendar c = newCalendar ;
Distance : 7

197
Tree	GregorianCalendar c = new Calendar ( STRING_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( STRING_CONSTANT ) ;
Distance : 5

198
Tree	Calendar c = c . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = c . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

199
Tree	Calendar c = new Calendar ( new GregorianCalendar ( mLocale ) ) ;
Code	Calendar c = new Calendar ( new GregorianCalendar ( mLocale ) ) ;
Distance : 5

200
Tree	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

201
Tree	Calendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 1

202
Tree	Calendar mTimeZone = new Calendar ( mTimeZone ) ;
Code	Calendar mTimeZone = new Calendar ( mTimeZone ) ;
Distance : 4

203
Tree	GregorianCalendar c = new Calendar ( new Calendar ( mTimeZone ) ) ;
Code	GregorianCalendar c = new Calendar ( new Calendar ( mTimeZone ) ) ;
Distance : 7

204
Tree	GregorianCalendar c = new Calendar ( null ) ;
Code	GregorianCalendar c = new Calendar ( null ) ;
Distance : 5

205
Tree	final Calendar c = new Calendar ( mLocale ) ;
Code	final Calendar c = new Calendar ( mLocale ) ;
Distance : 4

206
Tree	mTimeZone
Code	mTimeZone
Distance : 10

207
Tree	Calendar mTimeZone = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar mTimeZone = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

208
Tree	Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Code	Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Distance : 5

209
Tree	GregorianCalendar c = null ;
Code	GregorianCalendar c = null ;
Distance : 8

210
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Distance : 3

211
Tree	Calendar mLocale = new Calendar ( mTimeZone ) ;
Code	Calendar mLocale = new Calendar ( mTimeZone ) ;
Distance : 4

212
Tree	Calendar c = return; ;
Code	Calendar c = return; ;
Distance : 7

213
Tree	Calendar c = new Calendar ( new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = new Calendar ( new GregorianCalendar ( mTimeZone ) ) ;
Distance : 5

214
Tree	Calendar mLocale = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar mLocale = new Calendar ( mTimeZone , mLocale ) ;
Distance : 2

215
Tree	Calendar c = resolveVariable () ;
Code	Calendar c = resolveVariable () ;
Distance : 7

216
Tree	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , mLocale ) ;
Code	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , mLocale ) ;
Distance : 3

217
Tree	Calendar c = new Calendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

218
Tree	GregorianCalendar c = new Calendar ( c ) ;
Code	GregorianCalendar c = new Calendar ( c ) ;
Distance : 5

219
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getRightElement ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getRightElement ( STRING_CONSTANT ) ) ;
Distance : 6

220
Tree	Calendar mLocale = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar mLocale = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 3

221
Tree	GregorianCalendar c = STRING_CONSTANT ;
Code	GregorianCalendar c = STRING_CONSTANT ;
Distance : 8

222
Tree	GregorianCalendar c = new Calendar ( this , mLocale ) ;
Code	GregorianCalendar c = new Calendar ( this , mLocale ) ;
Distance : 3

223
Tree	GregorianCalendar mTimeZone = new Calendar ( NUMBER_CONSTANT ) ;
Code	GregorianCalendar mTimeZone = new Calendar ( NUMBER_CONSTANT ) ;
Distance : 6

224
Tree	Calendar c = new Calendar ( mTimeZone . final ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . final ( STRING_CONSTANT ) ) ;
Distance : 6

225
Tree	Calendar c = new Calendar ( mTimeZone , null ) ;
Code	Calendar c = new Calendar ( mTimeZone , null ) ;
Distance : 2

226
Tree	Calendar c = new Calendar ( mTimeZone ) . getInstance ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . getInstance ( mTimeZone ) ;
Distance : 6

227
Tree	GregorianCalendar c = new Calendar ( mLocale ) ;
Code	GregorianCalendar c = new Calendar ( mLocale ) ;
Distance : 4

228
Tree	Calendar c = new Calendar ( TimeZones.GMT_ID , mLocale ) ;
Code	Calendar c = new Calendar ( TimeZones.GMT_ID , mLocale ) ;
Distance : 2

229
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

230
Tree	Calendar mLocale = new Calendar ( null ) ;
Code	Calendar mLocale = new Calendar ( null ) ;
Distance : 5

231
Tree	Calendar c = NUMBER_CONSTANT ; StringBuilder
Code	Calendar c = NUMBER_CONSTANT ; StringBuilder
Distance : 8

232
Tree	Calendar c = mTimeZone . getInstance ( mLocale ) ;
Code	Calendar c = mTimeZone . getInstance ( mLocale ) ;
Distance : 5

233
Tree	Calendar c = new Calendar ( STRING_CONSTANT ) ;
Code	Calendar c = new Calendar ( STRING_CONSTANT ) ;
Distance : 4

234
Tree	Calendar c = new Calendar ( c , false ) ;
Code	Calendar c = new Calendar ( c , false ) ;
Distance : 3

235
Tree	Calendar c = new Calendar ( Boolean.FALSE , mLocale ) ;
Code	Calendar c = new Calendar ( Boolean.FALSE , mLocale ) ;
Distance : 2

236
Tree	Calendar c = new Calendar ( mTimeZone , mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone , mTimeZone ) ;
Distance : 2

237
Tree	Calendar c = mLocale . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Distance : 8

238
Tree	Calendar c = c . newCalendar ( mTimeZone ) ;
Code	Calendar c = c . newCalendar ( mTimeZone ) ;
Distance : 5

239
Tree	Calendar mTimeZone = super(); ;
Code	Calendar mTimeZone = super(); ;
Distance : 8

240
Tree	Calendar c = new Calendar ( Calendar.JANUARY ) ;
Code	Calendar c = new Calendar ( Calendar.JANUARY ) ;
Distance : 4

241
Tree	GregorianCalendar mTimeZone ;
Code	GregorianCalendar mTimeZone ;
Distance : 8

242
Tree	Calendar c ; MutableInt
Code	Calendar c ; MutableInt
Distance : 9

243
Tree	Calendar c = new Calendar ( null ) ;
Code	Calendar c = new Calendar ( null ) ;
Distance : 4

244
Tree	Calendar c = STRING_CONSTANT ; StringBuilder
Code	Calendar c = STRING_CONSTANT ; StringBuilder
Distance : 8

245
Tree	final Calendar c = new Calendar ( c ) ;
Code	final Calendar c = new Calendar ( c ) ;
Distance : 5

246
Tree	Calendar c = NUMBER_CONSTANT ; -
Code	Calendar c = NUMBER_CONSTANT ; -
Distance : 8

247
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT ) ;
Distance : 4

248
Tree	GregorianCalendar mLocale = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar mLocale = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

249
Tree	Calendar c = null ;
Code	Calendar c = null ;
Distance : 7

250
Tree	Calendar mTimeZone = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar mTimeZone = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 3

251
Tree	GregorianCalendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Distance : 4

252
Tree	GregorianCalendar mTimeZone = STRING_CONSTANT ;
Code	GregorianCalendar mTimeZone = STRING_CONSTANT ;
Distance : 8

253
Tree	private Calendar c = new Calendar ( mTimeZone ) ;
Code	private Calendar c = new Calendar ( mTimeZone ) ;
Distance : 4

254
Tree	GregorianCalendar c = mLocale ;
Code	GregorianCalendar c = mLocale ;
Distance : 7

255
Tree	protected Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Code	protected Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Distance : 6

256
Tree	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , mTimeZone ) ;
Code	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , mTimeZone ) ;
Distance : 4

257
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , mLocale ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , mLocale ) ;
Distance : 2

258
Tree	GregorianCalendar c = new Calendar ( new GregorianCalendar ( mTimeZone ) ) ;
Code	GregorianCalendar c = new Calendar ( new GregorianCalendar ( mTimeZone ) ) ;
Distance : 6

259
Tree	Calendar mLocale = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Code	Calendar mLocale = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Distance : 4

260
Tree	Calendar c = new GregorianCalendar ( mTimeZone , true ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , true ) ;
Distance : 1

261
Tree	Calendar c = new Calendar ( mTimeZone ) . mLocale ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . mLocale ( mTimeZone ) ;
Distance : 5

262
Tree	GregorianCalendar c ;
Code	GregorianCalendar c ;
Distance : 9

263
Tree	Calendar mLocale = super(); ;
Code	Calendar mLocale = super(); ;
Distance : 8

264
Tree	Calendar c = STRING_CONSTANT ;
Code	Calendar c = STRING_CONSTANT ;
Distance : 7

265
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , mLocale ) ;
Distance : 1

266
Tree	Calendar c = new GregorianCalendar ( this , c ) ;
Code	Calendar c = new GregorianCalendar ( this , c ) ;
Distance : 2

267
Tree	Calendar c = mTimeZone . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = mTimeZone . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

268
Tree	Calendar c = new Calendar ( mTimeZone , TimeUnit.MINUTES ) ;
Code	Calendar c = new Calendar ( mTimeZone , TimeUnit.MINUTES ) ;
Distance : 2

269
Tree	Calendar c = new Calendar ( NEW_YORK ) ;
Code	Calendar c = new Calendar ( NEW_YORK ) ;
Distance : 4

270
Tree	Calendar mLocale = null ;
Code	Calendar mLocale = null ;
Distance : 8

271
Tree	Calendar c = TimeZones.GMT_ID ;
Code	Calendar c = TimeZones.GMT_ID ;
Distance : 7

272
Tree	Calendar mLocale = STRING_CONSTANT ;
Code	Calendar mLocale = STRING_CONSTANT ;
Distance : 8

273
Tree	Calendar c = new Calendar ( mTimeZone . substring ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . substring ( STRING_CONSTANT ) ) ;
Distance : 6

274
Tree	Calendar c = new Calendar ( mTimeZone . getLeftElement ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getLeftElement ( STRING_CONSTANT ) ) ;
Distance : 6

275
Tree	Calendar c = new Calendar ( mTimeZone , new int [ StringUtils.EMPTY ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new int [ StringUtils.EMPTY ] ) ;
Distance : 6

276
Tree	Calendar c = new Calendar ( mTimeZone , continue; ) ;
Code	Calendar c = new Calendar ( mTimeZone , continue; ) ;
Distance : 2

277
Tree	Calendar c = new Calendar ( mTimeZone , new int [ Calendar.JANUARY ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new int [ Calendar.JANUARY ] ) ;
Distance : 6

278
Tree	Calendar mTimeZone = new GregorianCalendar ( STRING_CONSTANT ) ;
Code	Calendar mTimeZone = new GregorianCalendar ( STRING_CONSTANT ) ;
Distance : 4

279
Tree	Calendar mLocale = new Calendar ( this , c ) ;
Code	Calendar mLocale = new Calendar ( this , c ) ;
Distance : 4

280
Tree	Calendar c = new Calendar ( mTimeZone . getRightElement ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getRightElement ( STRING_CONSTANT ) ) ;
Distance : 6

281
Tree	Calendar c = new Calendar ( mTimeZone , c ) ;
Code	Calendar c = new Calendar ( mTimeZone , c ) ;
Distance : 2

282
Tree	Calendar c = new Calendar ( applyRulesToString , mLocale ) ;
Code	Calendar c = new Calendar ( applyRulesToString , mLocale ) ;
Distance : 2

283
Tree	Calendar c = continue; ;
Code	Calendar c = continue; ;
Distance : 7

284
Tree	Calendar c = new Calendar ( yMdHmsSZ , mLocale ) ;
Code	Calendar c = new Calendar ( yMdHmsSZ , mLocale ) ;
Distance : 2

285
Tree	Calendar c = new Calendar ( mTimeZone . nextDouble ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . nextDouble ( STRING_CONSTANT ) ) ;
Distance : 6

286
Tree	c
Code	c
Distance : 10

287
Tree	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 1

288
Tree	Calendar c = SystemUtils.JAVA_VERSION ;
Code	Calendar c = SystemUtils.JAVA_VERSION ;
Distance : 7

289
Tree	Calendar c = new Calendar ( mTimeZone , applyRulesToString ) ;
Code	Calendar c = new Calendar ( mTimeZone , applyRulesToString ) ;
Distance : 2

290
Tree	GregorianCalendar c = new Calendar ( mLocale ) ;
Code	GregorianCalendar c = new Calendar ( mLocale ) ;
Distance : 4

291
Tree	protected Calendar c = new Calendar ( mLocale ) ;
Code	protected Calendar c = new Calendar ( mLocale ) ;
Distance : 4

292
Tree	GregorianCalendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

293
Tree	public Calendar c = new Calendar ( mTimeZone ) ;
Code	public Calendar c = new Calendar ( mTimeZone ) ;
Distance : 4

294
Tree	Calendar c = new Calendar ( this , mTimeZone ) ;
Code	Calendar c = new Calendar ( this , mTimeZone ) ;
Distance : 3

295
Tree	Calendar c = new Calendar ( mLocale , mLocale ) ;
Code	Calendar c = new Calendar ( mLocale , mLocale ) ;
Distance : 2

296
Tree	GregorianCalendar c = new Calendar ( mTimeZone , true ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , true ) ;
Distance : 3

297
Tree	GregorianCalendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

298
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . toCharArray ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . toCharArray ( STRING_CONSTANT ) ) ;
Distance : 6

299
Tree	GregorianCalendar [] c = new Calendar ( mLocale ) ;
Code	GregorianCalendar [] c = new Calendar ( mLocale ) ;
Distance : 5

300
Tree	Calendar getGmtTimeZone ;
Code	Calendar getGmtTimeZone ;
Distance : 9

301
Tree	Calendar c = NUMBER_CONSTANT ; isEquals
Code	Calendar c = NUMBER_CONSTANT ; isEquals
Distance : 8

302
Tree	Calendar c = getInstance () ;
Code	Calendar c = getInstance () ;
Distance : 7

303
Tree	final Calendar c = c . getInstance ( mTimeZone ) ;
Code	final Calendar c = c . getInstance ( mTimeZone ) ;
Distance : 6

304
Tree	Calendar c = new Calendar ( java.util.Locale.US ) ;
Code	Calendar c = new Calendar ( java.util.Locale.US ) ;
Distance : 4

305
Tree	Calendar c = new GregorianCalendar ( new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = new GregorianCalendar ( new GregorianCalendar ( mTimeZone ) ) ;
Distance : 5

306
Tree	synchronized Calendar c = new Calendar ( mTimeZone ) ;
Code	synchronized Calendar c = new Calendar ( mTimeZone ) ;
Distance : 4

307
Tree	Calendar tz ;
Code	Calendar tz ;
Distance : 9

308
Tree	Calendar c = mLocale . getInstance ( mLocale ) ;
Code	Calendar c = mLocale . getInstance ( mLocale ) ;
Distance : 5

309
Tree	Calendar c = new Calendar ( mTimeZone ) . newCalendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . newCalendar ( mTimeZone ) ;
Distance : 6

310
Tree	FastDateParser
Code	FastDateParser
Distance : 11

311
Tree	final Calendar c = mLocale . getInstance ( mTimeZone ) ;
Code	final Calendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 6

312
Tree	Calendar c = NUMBER_CONSTANT ; MutableInt
Code	Calendar c = NUMBER_CONSTANT ; MutableInt
Distance : 8

313
Tree	Calendar c = Calendar.ZONE_OFFSET ;
Code	Calendar c = Calendar.ZONE_OFFSET ;
Distance : 7

314
Tree	Calendar c = mTimeZone . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = mTimeZone . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Distance : 8

315
Tree	Calendar mTimeZone = new GregorianCalendar () ;
Code	Calendar mTimeZone = new GregorianCalendar () ;
Distance : 6

316
Tree	Calendar c = STRING_CONSTANT ; -
Code	Calendar c = STRING_CONSTANT ; -
Distance : 8

317
Tree	Calendar c = new Calendar ( c , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( c , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

318
Tree	Calendar c = new Calendar < mTimeZone > ( mTimeZone , mTimeZone ) ;
Code	Calendar c = new Calendar < mTimeZone > ( mTimeZone , mTimeZone ) ;
Distance : 5

319
Tree	Calendar c ; StringBuilder
Code	Calendar c ; StringBuilder
Distance : 9

320
Tree	Calendar c = new Calendar ( new Calendar ( mLocale ) ) ;
Code	Calendar c = new Calendar ( new Calendar ( mLocale ) ) ;
Distance : 5

321
Tree	GregorianCalendar mLocale = new Calendar () ;
Code	GregorianCalendar mLocale = new Calendar () ;
Distance : 8

322
Tree	Calendar c = new Calendar ( mTimeZone ) . final ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . final ( mTimeZone ) ;
Distance : 6

323
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . mLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . mLocale ( STRING_CONSTANT ) ) ;
Distance : 8

324
Tree	Calendar mLocale = new Calendar () ;
Code	Calendar mLocale = new Calendar () ;
Distance : 7

325
Tree	GregorianCalendar c = mLocale . getInstance ( mTimeZone ) ;
Code	GregorianCalendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 6

326
Tree	Calendar c = mLocale . getInstance ( mTimeZone , mTimeZone ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , mTimeZone ) ;
Distance : 4

327
Tree	Calendar [] mTimeZone = new Calendar ( mLocale ) ;
Code	Calendar [] mTimeZone = new Calendar ( mLocale ) ;
Distance : 5

328
Tree	Calendar c = mTimeZone . getInstance ( mTimeZone , new Calendar ( mTimeZone ) ) ;
Code	Calendar c = mTimeZone . getInstance ( mTimeZone , new Calendar ( mTimeZone ) ) ;
Distance : 8

329
Tree	DatePrinter
Code	DatePrinter
Distance : 11

330
Tree	Calendar c = c . getInstance ( mLocale ) ;
Code	Calendar c = c . getInstance ( mLocale ) ;
Distance : 5

331
Tree	Calendar c = mLocale . getInstance ( mLocale , mLocale ) ;
Code	Calendar c = mLocale . getInstance ( mLocale , mLocale ) ;
Distance : 4

332
Tree	Calendar c = new GregorianCalendar ( mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale ) ;
Distance : 2

333
Tree	GregorianCalendar c = new GregorianCalendar ( STRING_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( STRING_CONSTANT ) ;
Distance : 4

334
Tree	Calendar c = mLocale . getInstance ( mTimeZone ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 5

335
Tree	Calendar c = new Calendar ( mLocale , true ) ;
Code	Calendar c = new Calendar ( mLocale , true ) ;
Distance : 3

336
Tree	GregorianCalendar [] c = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar [] c = new Calendar ( mTimeZone ) ;
Distance : 5

337
Tree	Calendar c = new Calendar ( mTimeZone , new int [ Boolean.FALSE ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new int [ Boolean.FALSE ] ) ;
Distance : 6

338
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 5

339
Tree	Calendar = ;
Code	Calendar = ;
Distance : 8

340
Tree	Calendar mLocale = new GregorianCalendar () ;
Code	Calendar mLocale = new GregorianCalendar () ;
Distance : 6

341
Tree	Calendar c = new Calendar ( getLeftElement ) ;
Code	Calendar c = new Calendar ( getLeftElement ) ;
Distance : 4

342
Tree	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , c ) ;
Code	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , c ) ;
Distance : 4

343
Tree	Calendar c = new Calendar ( Calendar.DAY_OF_WEEK , mLocale ) ;
Code	Calendar c = new Calendar ( Calendar.DAY_OF_WEEK , mLocale ) ;
Distance : 2

344
Tree	Calendar c = new Calendar ( mTimeZone , new char [ Calendar.DAY_OF_WEEK ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new char [ Calendar.DAY_OF_WEEK ] ) ;
Distance : 6

345
Tree	Calendar c = new Calendar ( mTimeZone , new char [ TimeZones.GMT_ID ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new char [ TimeZones.GMT_ID ] ) ;
Distance : 6

346
Tree	GregorianCalendar c = new Calendar ( c , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( c , NUMBER_CONSTANT ) ;
Distance : 4

347
Tree	Calendar c ; -
Code	Calendar c ; -
Distance : 9

348
Tree	Calendar c = Calendar () ;
Code	Calendar c = Calendar () ;
Distance : 7

349
Tree	Calendar c = assertFormats ;
Code	Calendar c = assertFormats ;
Distance : 7

350
Tree	GregorianCalendar mTimeZone = new Calendar () ;
Code	GregorianCalendar mTimeZone = new Calendar () ;
Distance : 8

351
Tree	Calendar c = new Calendar ( mTimeZone , new char [ Calendar.JANUARY ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new char [ Calendar.JANUARY ] ) ;
Distance : 6

352
Tree	Calendar c = mValues () ;
Code	Calendar c = mValues () ;
Distance : 7

353
Tree	Calendar c = new Calendar ( new Calendar ( c ) ) ;
Code	Calendar c = new Calendar ( new Calendar ( c ) ) ;
Distance : 6

354
Tree	Calendar c = new Calendar ( new GregorianCalendar ( c ) ) ;
Code	Calendar c = new Calendar ( new GregorianCalendar ( c ) ) ;
Distance : 6

355
Tree	Calendar c = new Calendar ( new Calendar ( mTimeZone ) ) ;
Code	Calendar c = new Calendar ( new Calendar ( mTimeZone ) ) ;
Distance : 6

356
Tree	Calendar [] mTimeZone = new Calendar ( mTimeZone ) ;
Code	Calendar [] mTimeZone = new Calendar ( mTimeZone ) ;
Distance : 5

357
Tree	Calendar c = new Calendar ( mTimeZone , Calendar.JANUARY ) ;
Code	Calendar c = new Calendar ( mTimeZone , Calendar.JANUARY ) ;
Distance : 2

358
Tree	Calendar c ;
Code	Calendar c ;
Distance : 8

359
Tree	Calendar mTimeZone = new GregorianCalendar ( null ) ;
Code	Calendar mTimeZone = new GregorianCalendar ( null ) ;
Distance : 4

360
Tree	Calendar c = new Calendar ( mTimeZone , TimeZones.GMT_ID ) ;
Code	Calendar c = new Calendar ( mTimeZone , TimeZones.GMT_ID ) ;
Distance : 2

361
Tree	Calendar c = new Calendar ( java.util.Locale.US , mLocale ) ;
Code	Calendar c = new Calendar ( java.util.Locale.US , mLocale ) ;
Distance : 2

362
Tree	Calendar c = new Calendar ( mTimeZone . codePointAt ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . codePointAt ( STRING_CONSTANT ) ) ;
Distance : 6

363
Tree	Calendar c = new Calendar ( mTimeZone , Boolean.FALSE ) ;
Code	Calendar c = new Calendar ( mTimeZone , Boolean.FALSE ) ;
Distance : 2

364
Tree	Calendar c = new Calendar ( mTimeZone ) . getDefault ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . getDefault ( mTimeZone ) ;
Distance : 6

365
Tree	Calendar c = new Calendar ( mTimeZone , new int [ TimeZones.GMT_ID ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new int [ TimeZones.GMT_ID ] ) ;
Distance : 6

366
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . toCharArray ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . toCharArray ( STRING_CONSTANT ) ) ;
Distance : 8

367
Tree	Calendar c = new Calendar ( mLocale , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( mLocale , NUMBER_CONSTANT ) ;
Distance : 3

368
Tree	GregorianCalendar c = new GregorianCalendar () ;
Code	GregorianCalendar c = new GregorianCalendar () ;
Distance : 6

369
Tree	Calendar c = c . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = c . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Distance : 8

370
Tree	GregorianCalendar c = new Calendar < mTimeZone > ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = new Calendar < mTimeZone > ( mTimeZone , mLocale ) ;
Distance : 5

371
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , c ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , c ) ;
Distance : 2

372
Tree	Calendar c = new Calendar ( c , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( c , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

373
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 5

374
Tree	private Calendar c = c . getInstance ( mTimeZone ) ;
Code	private Calendar c = c . getInstance ( mTimeZone ) ;
Distance : 6

375
Tree	Calendar c = getFragment () ;
Code	Calendar c = getFragment () ;
Distance : 7

376
Tree	Calendar c = STRING_CONSTANT ; isEquals
Code	Calendar c = STRING_CONSTANT ; isEquals
Distance : 8

377
Tree	private Calendar c = mLocale . getInstance ( mTimeZone ) ;
Code	private Calendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 6

378
Tree	Calendar [] mLocale = new Calendar ( mLocale ) ;
Code	Calendar [] mLocale = new Calendar ( mLocale ) ;
Distance : 5

379
Tree	Calendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

380
Tree	GregorianCalendar c = new GregorianCalendar ( null ) ;
Code	GregorianCalendar c = new GregorianCalendar ( null ) ;
Distance : 4

381
Tree	GregorianCalendar c = c . getInstance ( mTimeZone ) ;
Code	GregorianCalendar c = c . getInstance ( mTimeZone ) ;
Distance : 6

382
Tree	Calendar c = mLocale . newCalendar ( mTimeZone ) ;
Code	Calendar c = mLocale . newCalendar ( mTimeZone ) ;
Distance : 5

383
Tree	Calendar mTimeZone = new Calendar ( mTimeZone , null ) ;
Code	Calendar mTimeZone = new Calendar ( mTimeZone , null ) ;
Distance : 3

384
Tree	Calendar c = new Calendar ( continue; ) ;
Code	Calendar c = new Calendar ( continue; ) ;
Distance : 4

385
Tree	GregorianCalendar c = new Calendar ( mLocale , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( mLocale , NUMBER_CONSTANT ) ;
Distance : 4

386
Tree	GregorianCalendar c = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Distance : 4

387
Tree	final Calendar c = c . getInstance ( mLocale ) ;
Code	final Calendar c = c . getInstance ( mLocale ) ;
Distance : 6

388
Tree	final Calendar c = mLocale . getInstance ( mLocale ) ;
Code	final Calendar c = mLocale . getInstance ( mLocale ) ;
Distance : 6

389
Tree	Calendar mLocale = new Calendar ( NUMBER_CONSTANT ) ;
Code	Calendar mLocale = new Calendar ( NUMBER_CONSTANT ) ;
Distance : 5

390
Tree	Calendar mTimeZone = mLocale ;
Code	Calendar mTimeZone = mLocale ;
Distance : 7

391
Tree	GregorianCalendar mLocale ;
Code	GregorianCalendar mLocale ;
Distance : 8

392
Tree	Calendar mTimeZone = c ;
Code	Calendar mTimeZone = c ;
Distance : 8

393
Tree	Calendar mLocale = mLocale ;
Code	Calendar mLocale = mLocale ;
Distance : 7

394
Tree	Calendar mLocale = c ;
Code	Calendar mLocale = c ;
Distance : 8

395
Tree	Calendar c = c . getInstance ( mTimeZone , new GregorianCalendar ( mLocale ) ) ;
Code	Calendar c = c . getInstance ( mTimeZone , new GregorianCalendar ( mLocale ) ) ;
Distance : 7

396
Tree	GregorianCalendar c = mTimeZone ;
Code	GregorianCalendar c = mTimeZone ;
Distance : 7

397
Tree	Calendar c = new Calendar ( mLocale ) ;
Code	Calendar c = new Calendar ( mLocale ) ;
Distance : 3

398
Tree	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 4

399
Tree	GregorianCalendar c = new Calendar ( c ) ;
Code	GregorianCalendar c = new Calendar ( c ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
-------------------------------------------------------------------------------
Child code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp && ! hasDecPoint ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp})) (249{val=&&}) (38 (207{val=!}) (800{val=hasDecPoint}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/24/parent/src_main_java_org_apache_commons_lang3_math_NumberUtils.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 10
Wrong
========================================================================
False

0
Tree	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

1
Tree	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

2
Tree	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

3
Tree	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

4
Tree	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

5
Tree	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

6
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

7
Tree	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

8
Tree	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

9
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
-------------------------------------------------------------------------------
Child code is: 
cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/21/parent/src_main_java_org_apache_commons_lang3_time_DateUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 170
Correct
========================================================================
True

0
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < rhs.length
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < rhs.length
Distance : 7

1
Tree	cal1 . get ( Calendar.HOUR ) < rhs.length
Code	cal1 . get ( Calendar.HOUR ) < rhs.length
Distance : 8

2
Tree	cal1 . get ( Calendar.HOUR ) < tokens.length
Code	cal1 . get ( Calendar.HOUR ) < tokens.length
Distance : 8

3
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < DateUtils.MILLIS_PER_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < DateUtils.MILLIS_PER_DAY
Distance : 7

4
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < rhs.b
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < rhs.b
Distance : 7

5
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < tokens.length
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < tokens.length
Distance : 7

6
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Distance : 5

7
Tree	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR )
Distance : 3

8
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR )
Distance : 2

9
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR )
Distance : 4

10
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR )
Distance : 2

11
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY
Distance : 6

12
Tree	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

13
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Distance : 6

14
Tree	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

15
Tree	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Code	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Distance : 9

16
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY + [
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY + [
Distance : 6

17
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR + [
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR + [
Distance : 6

18
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR
Distance : 7

19
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR )
Distance : 9

20
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY + super
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY + super
Distance : 6

21
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + :
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + :
Distance : 6

22
Tree	cal1 . get ( Calendar.HOUR ) cal2 . cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) cal2 . cal2 Calendar.HOUR_OF_DAY
Distance : 5

23
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR + throw
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR + throw
Distance : 6

24
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 . Calendar.HOUR Calendar.HOUR_OF_DAY + [
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 . Calendar.HOUR Calendar.HOUR_OF_DAY + [
Distance : 5

25
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Distance : 6

26
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY
Distance : 7

27
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) . Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) . Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Distance : 7

28
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR
Distance : 6

29
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + throw
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + throw
Distance : 6

30
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

31
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && isOSVersionMatch
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && isOSVersionMatch
Distance : 9

32
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 . cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 . cal2 Calendar.HOUR_OF_DAY
Distance : 6

33
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < extends
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < extends
Distance : 7

34
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < serialVersionUID
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < serialVersionUID
Distance : 7

35
Tree	cal1 . get ( Calendar.HOUR ) < DateUtils.MILLIS_PER_DAY
Code	cal1 . get ( Calendar.HOUR ) < DateUtils.MILLIS_PER_DAY
Distance : 8

36
Tree	cal1 . get ( Calendar.HOUR ) < rhs.b
Code	cal1 . get ( Calendar.HOUR ) < rhs.b
Distance : 8

37
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Distance : 7

38
Tree	cal1 . get ( Calendar.HOUR ) - NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR ) - NUMBER_CONSTANT
Distance : 8

39
Tree	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY )
Code	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY )
Distance : 8

40
Tree	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR )
Code	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR )
Distance : 9

41
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < rhs.length
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < rhs.length
Distance : 4

42
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < tokens.length
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < tokens.length
Distance : 4

43
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < rhs.length
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < rhs.length
Distance : 5

44
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - rethrow
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - rethrow
Distance : 4

45
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < tokens.length
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < tokens.length
Distance : 5

46
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && super
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && super
Distance : 9

47
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < serialVersionUID
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < serialVersionUID
Distance : 4

48
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && throws
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && throws
Distance : 9

49
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < extends
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < extends
Distance : 4

50
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && ++
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && ++
Distance : 9

51
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < DateUtils.MILLIS_PER_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < DateUtils.MILLIS_PER_DAY
Distance : 4

52
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && -=
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && -=
Distance : 9

53
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && synchronized
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && synchronized
Distance : 9

54
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && serialize
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && serialize
Distance : 9

55
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - intValue
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - intValue
Distance : 4

56
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - serialize
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - serialize
Distance : 4

57
Tree	cal1 && . . get ( Calendar.HOUR_OF_DAY ) && deserialize
Code	cal1 && . . get ( Calendar.HOUR_OF_DAY ) && deserialize
Distance : 9

58
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY
Distance : 8

59
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + =
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + =
Distance : 6

60
Tree	cal1 < get . get ( Calendar.HOUR_OF_DAY ) T
Code	cal1 < get . get ( Calendar.HOUR_OF_DAY ) T
Distance : 7

61
Tree	cal1 < get . get ( Calendar.HOUR_OF_DAY ) !=
Code	cal1 < get . get ( Calendar.HOUR_OF_DAY ) !=
Distance : 7

62
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) cs
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) cs
Distance : 2

63
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) pattern
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) pattern
Distance : 9

64
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) ]
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) ]
Distance : 9

65
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) ex
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) ex
Distance : 9

66
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) Calendar
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) Calendar
Distance : 9

67
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT Calendar
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT Calendar
Distance : 7

68
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT ex
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT ex
Distance : 7

69
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) !=
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) !=
Distance : 9

70
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) CharSequence
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) CharSequence
Distance : 8

71
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) obj
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) obj
Distance : 2

72
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Distance : 2

73
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) MutableInt
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) MutableInt
Distance : 2

74
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Distance : 1

75
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) byte
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) byte
Distance : 1

76
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) cs
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) cs
Distance : 1

77
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) isEquals
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) isEquals
Distance : 1

78
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) MutableInt
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) MutableInt
Distance : 1

79
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) obj
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) obj
Distance : 1

80
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT ]
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT ]
Distance : 7

81
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT !=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT !=
Distance : 7

82
Tree	cal1 < ( . get ( Calendar.HOUR_OF_DAY ) toString
Code	cal1 < ( . get ( Calendar.HOUR_OF_DAY ) toString
Distance : 7

83
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) byte
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) byte
Distance : 2

84
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT T
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT T
Distance : 7

85
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) CharSequence
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) CharSequence
Distance : 5

86
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) isEquals
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) isEquals
Distance : 5

87
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) MutableInt
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) MutableInt
Distance : 5

88
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) {}
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) {}
Distance : 5

89
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) byte
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) byte
Distance : 5

90
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) pattern
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) pattern
Distance : 5

91
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) obj
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) obj
Distance : 5

92
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT CharSequence
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT CharSequence
Distance : 7

93
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) toString
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) toString
Distance : 5

94
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT pattern
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT pattern
Distance : 7

95
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT toString
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT toString
Distance : 7

96
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) Calendar
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) Calendar
Distance : 5

97
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) ex
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) ex
Distance : 5

98
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR
Distance : 6

99
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + [
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + [
Distance : 7

100
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + throw
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + throw
Distance : 7

101
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . . Calendar.HOUR Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . . Calendar.HOUR Calendar.HOUR_OF_DAY
Distance : 5

102
Tree	NUMBER_CONSTANT / . . get ( Calendar.HOUR_OF_DAY ) T
Code	NUMBER_CONSTANT / . . get ( Calendar.HOUR_OF_DAY ) T
Distance : 9

103
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY short
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY short
Distance : 5

104
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY style
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY style
Distance : 5

105
Tree	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY ) CharSequence
Code	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY ) CharSequence
Distance : 9

106
Tree	NUMBER_CONSTANT / . . get ( Calendar.HOUR_OF_DAY ) pattern
Code	NUMBER_CONSTANT / . . get ( Calendar.HOUR_OF_DAY ) pattern
Distance : 9

107
Tree	NUMBER_CONSTANT / . . get ( Calendar.HOUR_OF_DAY ) toString
Code	NUMBER_CONSTANT / . . get ( Calendar.HOUR_OF_DAY ) toString
Distance : 9

108
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && extends
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && extends
Distance : 9

109
Tree	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY ) Calendar
Code	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY ) Calendar
Distance : 9

110
Tree	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY ) ex
Code	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY ) ex
Distance : 9

111
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR
Distance : 7

112
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < rhs.b
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < rhs.b
Distance : 4

113
Tree	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY ) ]
Code	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY ) ]
Distance : 9

114
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 . Calendar.HOUR Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 . Calendar.HOUR Calendar.HOUR_OF_DAY
Distance : 7

115
Tree	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY ) !=
Code	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY ) !=
Distance : 9

116
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && getCause
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && getCause
Distance : 9

117
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR
Distance : 7

118
Tree	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR )
Distance : 3

119
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 ( Calendar.HOUR Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 ( Calendar.HOUR Calendar.HOUR_OF_DAY
Distance : 7

120
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - extends
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - extends
Distance : 4

121
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - ClassNotFoundException
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - ClassNotFoundException
Distance : 4

122
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - intValue
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - intValue
Distance : 5

123
Tree	long cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	long cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

124
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 cal1 Calendar.HOUR Calendar.HOUR
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 cal1 Calendar.HOUR Calendar.HOUR
Distance : 6

125
Tree	cal1 . get ( Calendar.HOUR ) cal2 . Calendar.HOUR Calendar.HOUR
Code	cal1 . get ( Calendar.HOUR ) cal2 . Calendar.HOUR Calendar.HOUR
Distance : 6

126
Tree	byte cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	byte cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

127
Tree	cal1 . get ( Calendar.HOUR ) * get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) * get ( Calendar.HOUR )
Distance : 5

128
Tree	float cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	float cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

129
Tree	double cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	double cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

130
Tree	long cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Code	long cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Distance : 9

131
Tree	byte cal1 = NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR ) ;
Code	byte cal1 = NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR ) ;
Distance : 10

132
Tree	float cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Code	float cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Distance : 9

133
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - serialize
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - serialize
Distance : 5

134
Tree	double cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Code	double cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Distance : 9

135
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - rhs.b
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - rhs.b
Distance : 4

136
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

137
Tree	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

138
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - initializer
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - initializer
Distance : 4

139
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - IllegalStateException
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - IllegalStateException
Distance : 4

140
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) ]
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) ]
Distance : 5

141
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) !=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) !=
Distance : 5

142
Tree	cal1 < ( . get ( Calendar.HOUR_OF_DAY )
Code	cal1 < ( . get ( Calendar.HOUR_OF_DAY )
Distance : 6

143
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) T
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) T
Distance : 5

144
Tree	cal1 < get . get ( Calendar.HOUR )
Code	cal1 < get . get ( Calendar.HOUR )
Distance : 7

145
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 0

146
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY )
Distance : 8

147
Tree	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

148
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Distance : 4

149
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

150
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR )
Distance : 1

151
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Distance : 5

152
Tree	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
Distance : 2

153
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) cs
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) cs
Distance : 2

154
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cs
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cs
Distance : 5

155
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) T
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) T
Distance : 9

156
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) isEquals
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) isEquals
Distance : 2

157
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) toString
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) toString
Distance : 9

158
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) < rhs.length
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) < rhs.length
Distance : 5

159
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < rhs.b
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < rhs.b
Distance : 5

160
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) byte
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) byte
Distance : 2

161
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) isEquals
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) isEquals
Distance : 2

162
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) MutableInt
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) MutableInt
Distance : 2

163
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Distance : 2

164
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) obj
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) obj
Distance : 2

165
Tree	cal1 < ( . get ( Calendar.HOUR_OF_DAY ) CharSequence
Code	cal1 < ( . get ( Calendar.HOUR_OF_DAY ) CharSequence
Distance : 7

166
Tree	cal1 < ( . get ( Calendar.HOUR_OF_DAY ) pattern
Code	cal1 < ( . get ( Calendar.HOUR_OF_DAY ) pattern
Distance : 7

167
Tree	cal1 < get . get ( Calendar.HOUR_OF_DAY ) Calendar
Code	cal1 < get . get ( Calendar.HOUR_OF_DAY ) Calendar
Distance : 7

168
Tree	cal1 < Calendar.HOUR . get ( Calendar.HOUR_OF_DAY ) ex
Code	cal1 < Calendar.HOUR . get ( Calendar.HOUR_OF_DAY ) ex
Distance : 8

169
Tree	cal1 < get . get ( Calendar.HOUR_OF_DAY ) ]
Code	cal1 < get . get ( Calendar.HOUR_OF_DAY ) ]
Distance : 7

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pos}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pt}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/6/parent/src_main_java_org_apache_commons_lang3_text_translate_CharSequenceTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 180
Wrong
========================================================================
False

0
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 1

1
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; }
Distance : 10

2
Tree	{ pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 11

3
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 2

4
Tree	{ pos += Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Distance : 3

5
Tree	{ throw pos ; }
Code	{ throw pos ; }
Distance : 15

6
Tree	{ throw input ; }
Code	{ throw input ; }
Distance : 14

7
Tree	{ throw new Character ( Character ) ; }
Code	{ throw new Character ( Character ) ; }
Distance : 11

8
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , Character ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , Character ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 10

9
Tree	{ throw new Character ( STRING_CONSTANT ) ; }
Code	{ throw new Character ( STRING_CONSTANT ) ; }
Distance : 12

10
Tree	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

11
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 2

12
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

13
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 2

14
Tree	{ throw new Character ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 10

15
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

16
Tree	{ throw new OctalUnescaper () ; }
Code	{ throw new OctalUnescaper () ; }
Distance : 15

17
Tree	{ throw new thisBuf ( Character ) ; }
Code	{ throw new thisBuf ( Character ) ; }
Distance : 12

18
Tree	{ pos += Character . charCount ( Character . charCount ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( Character , pos ) ) ; }
Distance : 3

19
Tree	{ throw new getInstance ( Character ) ; }
Code	{ throw new getInstance ( Character ) ; }
Distance : 12

20
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , input ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , input ) ; }
Distance : 8

21
Tree	{ throw pos . codePointAt ( Character [ pos ] ) ; }
Code	{ throw pos . codePointAt ( Character [ pos ] ) ; }
Distance : 11

22
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 2

23
Tree	{ throw new thisBuf () ; }
Code	{ throw new thisBuf () ; }
Distance : 15

24
Tree	{ throw new getInstance () ; }
Code	{ throw new getInstance () ; }
Distance : 15

25
Tree	{ return; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ return; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

26
Tree	{ pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 2

27
Tree	{ throw pos . charCount ( input [ pos ] ) ; }
Code	{ throw pos . charCount ( input [ pos ] ) ; }
Distance : 10

28
Tree	{ throw pos . charCount ( Method [ pos ] ) ; }
Code	{ throw pos . charCount ( Method [ pos ] ) ; }
Distance : 11

29
Tree	{ pos . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 4

30
Tree	{ throw new Character ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 10

31
Tree	{ throw new Character () ; }
Code	{ throw new Character () ; }
Distance : 14

32
Tree	{ throw pos . charCount ( StringBuilder [ pos ] ) ; }
Code	{ throw pos . charCount ( StringBuilder [ pos ] ) ; }
Distance : 11

33
Tree	{ pos += Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Distance : 3

34
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; fail }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; fail }
Distance : 3

35
Tree	{ pos . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 4

36
Tree	{ throw new NumberFormatException ( STRING_CONSTANT ) ; }
Code	{ throw new NumberFormatException ( STRING_CONSTANT ) ; }
Distance : 13

37
Tree	{ throw Character . charCount ( Character [ pos ] ) ; }
Code	{ throw Character . charCount ( Character [ pos ] ) ; }
Distance : 9

38
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

39
Tree	{ throw new UnsupportedOperationException ( Character , false ) ; }
Code	{ throw new UnsupportedOperationException ( Character , false ) ; }
Distance : 11

40
Tree	{ throw new StringBuffer ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new StringBuffer ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 12

41
Tree	{ throw pos . charCount ( Character , pos . charCount ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . charCount ( input , pos ) , Character ) ; }
Distance : 9

42
Tree	{ throw new StringBuffer ( Character , true ) ; }
Code	{ throw new StringBuffer ( Character , true ) ; }
Distance : 11

43
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; super(); }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; super(); }
Distance : 3

44
Tree	{ throw pos . charCount ( Character [ pos ] ) ; }
Code	{ throw pos . charCount ( Character [ pos ] ) ; }
Distance : 10

45
Tree	{ throw new ImmutablePair ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new ImmutablePair ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 10

46
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; for }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; for }
Distance : 3

47
Tree	{ throw new Character ( Character . charCount ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . charCount ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 11

48
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 1

49
Tree	{ super(); pos += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ super(); pos += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

50
Tree	{ pos . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 3

51
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertArrayEquals }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertArrayEquals }
Distance : 3

52
Tree	{ throw Character ; }
Code	{ throw Character ; }
Distance : 14

53
Tree	{ throw pos . charCount ( Character , Character . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , Character . codePointAt ( input , pos ) , Character ) ; }
Distance : 8

54
Tree	{ throw new Character ( Character . codePointAt ( input . codePointAt ( Character , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( input . codePointAt ( Character , pos ) ) , CHAR_CONS ) ; }
Distance : 11

55
Tree	{ pos = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

56
Tree	{ throw new ImmutablePair ( Character , true ) ; }
Code	{ throw new ImmutablePair ( Character , true ) ; }
Distance : 11

57
Tree	{ throw new Character ( Character , false ) ; }
Code	{ throw new Character ( Character , false ) ; }
Distance : 10

58
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; else }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; else }
Distance : 3

59
Tree	{ throw new StringBuffer ( Character ) ; }
Code	{ throw new StringBuffer ( Character ) ; }
Distance : 12

60
Tree	{ throw pos . charCount ( osVersionPrefix [ pos ] ) ; }
Code	{ throw pos . charCount ( osVersionPrefix [ pos ] ) ; }
Distance : 11

61
Tree	{ pos = Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos = Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

62
Tree	{ super(); pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; for }
Code	{ super(); pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; for }
Distance : 4

63
Tree	{ pos += Character . charCount ( Character . charCount ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( Character , pos ) ) ; }
Distance : 3

64
Tree	{ pos = Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Code	{ pos = Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Distance : 4

65
Tree	{ throw new NumberFormatException ( Character ) ; }
Code	{ throw new NumberFormatException ( Character ) ; }
Distance : 12

66
Tree	{ throw new UnsupportedOperationException ( STRING_CONSTANT ) ; }
Code	{ throw new UnsupportedOperationException ( STRING_CONSTANT ) ; }
Distance : 13

67
Tree	{ throw new NumberFormatException () ; }
Code	{ throw new NumberFormatException () ; }
Distance : 15

68
Tree	{ throw new Method ( STRING_CONSTANT ) ; }
Code	{ throw new Method ( STRING_CONSTANT ) ; }
Distance : 13

69
Tree	{ throw new Character ( Character . codePointAt ( input . charCount ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( input . charCount ( input ) ) , CHAR_CONS ) ; }
Distance : 11

70
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 2

71
Tree	{ throw pos . charCount ( char [ pos ] ) ; }
Code	{ throw pos . charCount ( char [ pos ] ) ; }
Distance : 11

72
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; null }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; null }
Distance : 3

73
Tree	{ throw pos . codePointAt ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . codePointAt ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 9

74
Tree	{ throw new Type ( Character ) ; }
Code	{ throw new Type ( Character ) ; }
Distance : 12

75
Tree	{ throw new ImmutablePair ( STRING_CONSTANT ) ; }
Code	{ throw new ImmutablePair ( STRING_CONSTANT ) ; }
Distance : 13

76
Tree	{ pos = Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 3

77
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; continue; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; continue; }
Distance : 3

78
Tree	{ throw new Character ( Character . codePointAt ( Character . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( Character . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 9

79
Tree	{ throw new StringBuffer ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new StringBuffer ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 10

80
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super(); }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super(); }
Distance : 2

81
Tree	{ throw new Character ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 12

82
Tree	{ throw new StringBuffer ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new StringBuffer ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 10

83
Tree	{ super(); pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

84
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; super(); }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; super(); }
Distance : 3

85
Tree	{ pos . charCount ( Character . charCount ( Character , pos ) ) ; }
Code	{ pos . charCount ( Character . charCount ( Character , pos ) ) ; }
Distance : 5

86
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; null }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; null }
Distance : 2

87
Tree	{ pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

88
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; null }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; null }
Distance : 3

89
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return }
Distance : 3

90
Tree	{ pos = Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 2

91
Tree	{ throw new Method ( Character ) ; }
Code	{ throw new Method ( Character ) ; }
Distance : 12

92
Tree	{ throw new Character ( Character . charCount ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . charCount ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 9

93
Tree	{ throw new ImmutablePair ( Character , false ) ; }
Code	{ throw new ImmutablePair ( Character , false ) ; }
Distance : 11

94
Tree	{ throw new Character ( Character . charCount ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . charCount ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 9

95
Tree	{ throw pos ; } obj
Code	{ throw pos ; } obj
Distance : 16

96
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , Character ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , Character ) , Character ) ; }
Distance : 8

97
Tree	{ pos = Character . codePointAt ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos = Character . codePointAt ( Character . codePointAt ( input , Character ) ) ; }
Distance : 3

98
Tree	{ throw new Character ( Character . codePointAt ( input . codePointAt ( Character ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( input . codePointAt ( Character ) ) , CHAR_CONS ) ; }
Distance : 11

99
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 1

100
Tree	{ throw new UnsupportedOperationException ( Character ) ; }
Code	{ throw new UnsupportedOperationException ( Character ) ; }
Distance : 12

101
Tree	{ throw pos . charCount ( Type [ pos ] ) ; }
Code	{ throw pos . charCount ( Type [ pos ] ) ; }
Distance : 11

102
Tree	{ throw new UnsupportedOperationException ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new UnsupportedOperationException ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 10

103
Tree	{ throw new StringBuffer () ; }
Code	{ throw new StringBuffer () ; }
Distance : 15

104
Tree	{ throw new UnsupportedOperationException ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new UnsupportedOperationException ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 12

105
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , pos ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , pos ) ; }
Distance : 8

106
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; super(); }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; super(); }
Distance : 3

107
Tree	{ throw new Method () ; }
Code	{ throw new Method () ; }
Distance : 15

108
Tree	{ throw pos ; } {}
Code	{ throw pos ; } {}
Distance : 16

109
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Distance : 9

110
Tree	{ throw new UnsupportedOperationException ( Character , true ) ; }
Code	{ throw new UnsupportedOperationException ( Character , true ) ; }
Distance : 11

111
Tree	{ throw new ImmutablePair ( Character . charCount ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new ImmutablePair ( Character . charCount ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 11

112
Tree	{ throw new OctalUnescaper ( STRING_CONSTANT ) ; }
Code	{ throw new OctalUnescaper ( STRING_CONSTANT ) ; }
Distance : 13

113
Tree	{ throw new Character ( Character . codePointAt ( input . charCount ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( input . charCount ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 11

114
Tree	{ throw new ImmutablePair ( Character ) ; }
Code	{ throw new ImmutablePair ( Character ) ; }
Distance : 12

115
Tree	{ throw new ImmutablePair ( Character . charCount ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new ImmutablePair ( Character . charCount ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 9

116
Tree	{ throw new ImmutablePair ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new ImmutablePair ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 10

117
Tree	{ throw new StringBuffer ( Character . charCount ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new StringBuffer ( Character . charCount ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 9

118
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; catch }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; catch }
Distance : 3

119
Tree	{ continue; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ continue; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

120
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

121
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 8

122
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 2

123
Tree	{ throw new Character ( Character . codePointAt ( Character . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( Character . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 9

124
Tree	{ pos . codePointAt ( Character . charCount ( input , pos ) ) ; }
Code	{ pos . codePointAt ( Character . charCount ( input , pos ) ) ; }
Distance : 5

125
Tree	{ throw new StringBuffer ( Character , false ) ; }
Code	{ throw new StringBuffer ( Character , false ) ; }
Distance : 11

126
Tree	{ throw new Type ( Character , true ) ; }
Code	{ throw new Type ( Character , true ) ; }
Distance : 11

127
Tree	{ pos . charCount ( Character . charCount ( input , Character ) ) ; }
Code	{ pos . charCount ( Character . charCount ( input , Character ) ) ; }
Distance : 4

128
Tree	{ throw new OctalUnescaper ( Character ) ; }
Code	{ throw new OctalUnescaper ( Character ) ; }
Distance : 12

129
Tree	{ throw new Type () ; }
Code	{ throw new Type () ; }
Distance : 15

130
Tree	{ throw pos . charCount ( style [ pos ] ) ; }
Code	{ throw pos . charCount ( style [ pos ] ) ; }
Distance : 11

131
Tree	{ pos . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 5

132
Tree	{ throw new ImmutablePair () ; }
Code	{ throw new ImmutablePair () ; }
Distance : 15

133
Tree	{ super(); pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 3

134
Tree	{ throw new Character ( Character . codePointAt ( input , pos . charCount ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( input , pos . charCount ( input ) ) , CHAR_CONS ) ; }
Distance : 12

135
Tree	{ throw pt ; }
Code	{ throw pt ; }
Distance : 14

136
Tree	{ throw new StringBuffer ( Character . charCount ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new StringBuffer ( Character . charCount ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 9

137
Tree	{ throw new Character ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) , CHAR_CONS ) ; }
Distance : 12

138
Tree	{ throw new StringBuffer ( STRING_CONSTANT ) ; }
Code	{ throw new StringBuffer ( STRING_CONSTANT ) ; }
Distance : 13

139
Tree	{ throw new UnsupportedOperationException () ; }
Code	{ throw new UnsupportedOperationException () ; }
Distance : 15

140
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 11

141
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 11

142
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; continue; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; continue; }
Distance : 2

143
Tree	{ throw new StringBuffer ( Character . charCount ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new StringBuffer ( Character . charCount ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 11

144
Tree	{ throw new thisBuf ( STRING_CONSTANT ) ; }
Code	{ throw new thisBuf ( STRING_CONSTANT ) ; }
Distance : 13

145
Tree	{ throw new UnsupportedOperationException ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new UnsupportedOperationException ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 10

146
Tree	{ throw new getInstance ( STRING_CONSTANT ) ; }
Code	{ throw new getInstance ( STRING_CONSTANT ) ; }
Distance : 13

147
Tree	{ throw new NumberFormatException ( Character , true ) ; }
Code	{ throw new NumberFormatException ( Character , true ) ; }
Distance : 11

148
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Distance : 3

149
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 1

150
Tree	{ pos = Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

151
Tree	{ throw pos ; } byte
Code	{ throw pos ; } byte
Distance : 16

152
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertEquals }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertEquals }
Distance : 3

153
Tree	{ super(); pos += Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Code	{ super(); pos += Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Distance : 4

154
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

155
Tree	{ pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

156
Tree	{ pos = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

157
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 11

158
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . codePointAt ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . codePointAt ( Character , pos ) ; }
Distance : 10

159
Tree	{ throw pos . charCount ( Character , pos . charCount ( Character , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . charCount ( Character , pos ) , Character ) ; }
Distance : 10

160
Tree	{ throw new ImmutablePair ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new ImmutablePair ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 12

161
Tree	{ super(); pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

162
Tree	{ pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 2

163
Tree	{ throw new ImmutablePair ( Character . charCount ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new ImmutablePair ( Character . charCount ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 9

164
Tree	{ throw new Character ( Character , true ) ; }
Code	{ throw new Character ( Character , true ) ; }
Distance : 10

165
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; @ }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; @ }
Distance : 3

166
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; }
Distance : 10

167
Tree	{ throw new Type ( STRING_CONSTANT ) ; }
Code	{ throw new Type ( STRING_CONSTANT ) ; }
Distance : 13

168
Tree	{ throw new ImmutablePair ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) , CHAR_CONS ) ; }
Code	{ throw new ImmutablePair ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) , CHAR_CONS ) ; }
Distance : 13

169
Tree	{ pos += Character . charCount ( Character . charCount ( input , Character ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , Character ) ) ; }
Distance : 2

170
Tree	{ pos = Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

171
Tree	{ throw pos ; } cs
Code	{ throw pos ; } cs
Distance : 16

172
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 10

173
Tree	{ pos = Character . charCount ( Character . charCount ( Character , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . charCount ( Character , pos ) ) ; }
Distance : 4

174
Tree	{ throw pos ; } isEquals
Code	{ throw pos ; } isEquals
Distance : 16

175
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , input ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , input ) ; }
Distance : 9

176
Tree	{ throw pos ; } MutableInt
Code	{ throw pos ; } MutableInt
Distance : 16

177
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , Character ) ; }
Distance : 10

178
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

179
Tree	{ pos += Character . charCount ( Character . charCount ( input , Character ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , Character ) ) ; }
Distance : 2

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
final CharSequence result = lookupMap . get ( subSeq ) ;
-------------------------------------------------------------------------------
Child code is: 
final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=subSeq}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (32 (800{val=subSeq}) (235{val=.}) (802{val=toString}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/4/parent/src_main_java_org_apache_commons_lang3_text_translate_LookupTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 310
Wrong
========================================================================
False

0
Tree	final CharSequence result = Integer.MAX_VALUE ;
Code	final CharSequence result = Integer.MAX_VALUE ;
Distance : 9

1
Tree	final CharSequence result = result . get ( subSeq , true ) ;
Code	final CharSequence result = result . get ( subSeq , true ) ;
Distance : 4

2
Tree	final CharSequence result = toString ( result ) ;
Code	final CharSequence result = toString ( result ) ;
Distance : 7

3
Tree	final CharSequence result = Calendar.ZONE_OFFSET ;
Code	final CharSequence result = Calendar.ZONE_OFFSET ;
Distance : 9

4
Tree	final CharSequence result = DateUtils.MILLIS_PER_MINUTE ;
Code	final CharSequence result = DateUtils.MILLIS_PER_MINUTE ;
Distance : 9

5
Tree	final CharSequence result = SplitState.SPLIT ;
Code	final CharSequence result = SplitState.SPLIT ;
Distance : 9

6
Tree	final CharSequence result = get ( subSeq , result , result ) ;
Code	final CharSequence result = get ( subSeq , result , result ) ;
Distance : 6

7
Tree	CharSequence result = result . get ( return; ) ;
Code	CharSequence result = result . get ( return; ) ;
Distance : 6

8
Tree	final CharSequence result = createMessageFormat ;
Code	final CharSequence result = createMessageFormat ;
Distance : 9

9
Tree	final CharSequence result = ModifyType.CEILING ;
Code	final CharSequence result = ModifyType.CEILING ;
Distance : 9

10
Tree	static CharSequence result = result . get ( subSeq , result ) ;
Code	static CharSequence result = result . get ( subSeq , result ) ;
Distance : 5

11
Tree	public CharSequence result = result . get ( subSeq ) ;
Code	public CharSequence result = result . get ( subSeq ) ;
Distance : 5

12
Tree	final CharSequence result = greatestCommonDivisor ;
Code	final CharSequence result = greatestCommonDivisor ;
Distance : 9

13
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

14
Tree	final CharSequence result = getVariableResolver ;
Code	final CharSequence result = getVariableResolver ;
Distance : 9

15
Tree	final CharSequence result = EscapeUtils.ESCAPE_ECMASCRIPT ;
Code	final CharSequence result = EscapeUtils.ESCAPE_ECMASCRIPT ;
Distance : 9

16
Tree	static CharSequence result = result . get ( subSeq ) ;
Code	static CharSequence result = result . get ( subSeq ) ;
Distance : 5

17
Tree	final CharSequence result = get ( result , result ) ;
Code	final CharSequence result = get ( result , result ) ;
Distance : 6

18
Tree	CharSequence result = result . get ( result ) ;
Code	CharSequence result = result . get ( result ) ;
Distance : 6

19
Tree	final CharSequence result = set.length ;
Code	final CharSequence result = set.length ;
Distance : 9

20
Tree	final CharSequence result = toString () ;
Code	final CharSequence result = toString () ;
Distance : 7

21
Tree	final CharSequence result = result . get ( wrapOn , result ) ;
Code	final CharSequence result = result . get ( wrapOn , result ) ;
Distance : 5

22
Tree	final CharSequence result = result . get ( bounds.length , result ) ;
Code	final CharSequence result = result . get ( bounds.length , result ) ;
Distance : 5

23
Tree	final CharSequence result = result . get ( Void.TYPE , result ) ;
Code	final CharSequence result = result . get ( Void.TYPE , result ) ;
Distance : 5

24
Tree	final CharSequence result = lookupMap ;
Code	final CharSequence result = lookupMap ;
Distance : 8

25
Tree	CharSequence result = get ( subSeq , = ) ;
Code	CharSequence result = get ( subSeq , = ) ;
Distance : 6

26
Tree	final CharSequence result = result . get ( Calendar.DAY_OF_WEEK , result ) ;
Code	final CharSequence result = result . get ( Calendar.DAY_OF_WEEK , result ) ;
Distance : 5

27
Tree	final CharSequence result = result . get () ;
Code	final CharSequence result = result . get () ;
Distance : 6

28
Tree	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT ) ;
Code	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT ) ;
Distance : 4

29
Tree	CharSequence result = get ( subSeq ) ;
Code	CharSequence result = get ( subSeq ) ;
Distance : 6

30
Tree	final CharSequence result = result . get ( null ) ;
Code	final CharSequence result = result . get ( null ) ;
Distance : 5

31
Tree	final CharSequence result = result ;
Code	final CharSequence result = result ;
Distance : 9

32
Tree	final CharSequence result = result . get ( subSeq , Long.MAX_VALUE ) ;
Code	final CharSequence result = result . get ( subSeq , Long.MAX_VALUE ) ;
Distance : 4

33
Tree	private CharSequence result = result . get ( subSeq ) ;
Code	private CharSequence result = result . get ( subSeq ) ;
Distance : 5

34
Tree	final CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Code	final CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Distance : 5

35
Tree	final CharSequence result = toString () ;
Code	final CharSequence result = toString () ;
Distance : 7

36
Tree	private CharSequence result = result ;
Code	private CharSequence result = result ;
Distance : 10

37
Tree	final CharSequence result = result . get () ;
Code	final CharSequence result = result . get () ;
Distance : 6

38
Tree	public CharSequence result = get () ;
Code	public CharSequence result = get () ;
Distance : 8

39
Tree	CharSequence result = result . get ( result , result ) ;
Code	CharSequence result = result . get ( result , result ) ;
Distance : 6

40
Tree	final CharSequence result = result . get ( items.length ) ;
Code	final CharSequence result = result . get ( items.length ) ;
Distance : 5

41
Tree	CharSequence result = get () ; MutableInt
Code	CharSequence result = get () ; MutableInt
Distance : 9

42
Tree	CharSequence result = lookupMap . toString () ;
Code	CharSequence result = lookupMap . toString () ;
Distance : 6

43
Tree	final CharSequence result = get ( subSeq , result ) ;
Code	final CharSequence result = get ( subSeq , result ) ;
Distance : 5

44
Tree	final CharSequence result = result . get ( items.length , result ) ;
Code	final CharSequence result = result . get ( items.length , result ) ;
Distance : 5

45
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

46
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

47
Tree	final CharSequence result = Integer.MAX_VALUE . get ( subSeq ) ;
Code	final CharSequence result = Integer.MAX_VALUE . get ( subSeq ) ;
Distance : 4

48
Tree	final short result = result . get ( subSeq ) ;
Code	final short result = result . get ( subSeq ) ;
Distance : 5

49
Tree	final CharSequence result = get ( result , result ) ;
Code	final CharSequence result = get ( result , result ) ;
Distance : 6

50
Tree	CharSequence result = get () ; obj
Code	CharSequence result = get () ; obj
Distance : 9

51
Tree	public CharSequence result = result . get ( subSeq , result ) ;
Code	public CharSequence result = result . get ( subSeq , result ) ;
Distance : 5

52
Tree	CharSequence result = result . toString ( STRING_CONSTANT , result ) ;
Code	CharSequence result = result . toString ( STRING_CONSTANT , result ) ;
Distance : 7

53
Tree	CharSequence result = result . get () ;
Code	CharSequence result = result . get () ;
Distance : 7

54
Tree	final CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Code	final CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Distance : 5

55
Tree	final CharSequence result = result . get ( Locale.ENGLISH ) ;
Code	final CharSequence result = result . get ( Locale.ENGLISH ) ;
Distance : 5

56
Tree	final CharSequence result = get () ;
Code	final CharSequence result = get () ;
Distance : 7

57
Tree	final CharSequence result = lookupMap . get () ;
Code	final CharSequence result = lookupMap . get () ;
Distance : 5

58
Tree	final char result = result . get ( subSeq ) ;
Code	final char result = result . get ( subSeq ) ;
Distance : 5

59
Tree	final CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 5

60
Tree	CharSequence result = get () ; {}
Code	CharSequence result = get () ; {}
Distance : 9

61
Tree	static CharSequence result = get ( subSeq , result ) ;
Code	static CharSequence result = get ( subSeq , result ) ;
Distance : 6

62
Tree	private CharSequence result = get () ;
Code	private CharSequence result = get () ;
Distance : 8

63
Tree	final CharSequence result = result . get ( wrapOn ) ;
Code	final CharSequence result = result . get ( wrapOn ) ;
Distance : 5

64
Tree	final CharSequence result = result . toString ( subSeq ) ;
Code	final CharSequence result = result . toString ( subSeq ) ;
Distance : 5

65
Tree	final CharSequence result = result . get ( subSeq , Float.MIN_VALUE ) ;
Code	final CharSequence result = result . get ( subSeq , Float.MIN_VALUE ) ;
Distance : 4

66
Tree	final CharSequence result = result . get ( continue; ) ;
Code	final CharSequence result = result . get ( continue; ) ;
Distance : 5

67
Tree	final CharSequence result = lookupMap . get ( result , result ) ;
Code	final CharSequence result = lookupMap . get ( result , result ) ;
Distance : 4

68
Tree	CharSequence result = get ( result ) ;
Code	CharSequence result = get ( result ) ;
Distance : 7

69
Tree	public CharSequence result = get ( subSeq , result ) ;
Code	public CharSequence result = get ( subSeq , result ) ;
Distance : 6

70
Tree	private CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Code	private CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Distance : 6

71
Tree	final CharSequence result = result . get ( subSeq , Double.MIN_VALUE ) ;
Code	final CharSequence result = result . get ( subSeq , Double.MIN_VALUE ) ;
Distance : 4

72
Tree	CharSequence result = get () ;
Code	CharSequence result = get () ;
Distance : 8

73
Tree	CharSequence result = result . get ( continue; ) ;
Code	CharSequence result = result . get ( continue; ) ;
Distance : 6

74
Tree	public CharSequence result = get ( subSeq ) ;
Code	public CharSequence result = get ( subSeq ) ;
Distance : 6

75
Tree	private CharSequence result = get ( subSeq ) ;
Code	private CharSequence result = get ( subSeq ) ;
Distance : 6

76
Tree	final CharSequence result = lookupMap . get ( null ) ;
Code	final CharSequence result = lookupMap . get ( null ) ;
Distance : 4

77
Tree	private CharSequence result = get ( subSeq , result ) ;
Code	private CharSequence result = get ( subSeq , result ) ;
Distance : 6

78
Tree	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 6

79
Tree	CharSequence result = toString ( subSeq ) ;
Code	CharSequence result = toString ( subSeq ) ;
Distance : 7

80
Tree	final CharSequence result = result . get ( stub ) ;
Code	final CharSequence result = result . get ( stub ) ;
Distance : 5

81
Tree	CharSequence result = result . get ( subSeq , Integer.MAX_VALUE ) ;
Code	CharSequence result = result . get ( subSeq , Integer.MAX_VALUE ) ;
Distance : 5

82
Tree	CharSequence result = result . toString () ;
Code	CharSequence result = result . toString () ;
Distance : 7

83
Tree	static CharSequence result = result . get ( subSeq ) ;
Code	static CharSequence result = result . get ( subSeq ) ;
Distance : 5

84
Tree	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 6

85
Tree	CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Code	CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Distance : 5

86
Tree	CharSequence result = result . get ( subSeq ) ;
Code	CharSequence result = result . get ( subSeq ) ;
Distance : 5

87
Tree	final CharSequence result = result . get ( subSeq , = ) ;
Code	final CharSequence result = result . get ( subSeq , = ) ;
Distance : 4

88
Tree	CharSequence result = result . get ( subSeq , result ) ;
Code	CharSequence result = result . get ( subSeq , result ) ;
Distance : 5

89
Tree	CharSequence result = lookupMap . get ( subSeq , result ) ;
Code	CharSequence result = lookupMap . get ( subSeq , result ) ;
Distance : 4

90
Tree	CharSequence result = lookupMap . toString ( STRING_CONSTANT , result ) ;
Code	CharSequence result = lookupMap . toString ( STRING_CONSTANT , result ) ;
Distance : 6

91
Tree	final CharSequence result = toString ( subSeq , result , result ) ;
Code	final CharSequence result = toString ( subSeq , result , result ) ;
Distance : 7

92
Tree	final CharSequence result = result . get ( Void.TYPE ) ;
Code	final CharSequence result = result . get ( Void.TYPE ) ;
Distance : 5

93
Tree	CharSequence result = result . get ( subSeq ) ;
Code	CharSequence result = result . get ( subSeq ) ;
Distance : 5

94
Tree	CharSequence result = get ( subSeq , result ) ;
Code	CharSequence result = get ( subSeq , result ) ;
Distance : 6

95
Tree	synchronized CharSequence result = get ( subSeq ) ;
Code	synchronized CharSequence result = get ( subSeq ) ;
Distance : 6

96
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

97
Tree	final CharSequence result = result . get ( bounds.length ) ;
Code	final CharSequence result = result . get ( bounds.length ) ;
Distance : 5

98
Tree	CharSequence result = result . get ( subSeq , Byte.TYPE ) ;
Code	CharSequence result = result . get ( subSeq , Byte.TYPE ) ;
Distance : 5

99
Tree	final CharSequence result = result . get ( null ) ;
Code	final CharSequence result = result . get ( null ) ;
Distance : 5

100
Tree	final CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Distance : 4

101
Tree	final CharSequence result = result . get ( subSeq , Integer.MAX_VALUE ) ;
Code	final CharSequence result = result . get ( subSeq , Integer.MAX_VALUE ) ;
Distance : 4

102
Tree	CharSequence result = get () ; cs
Code	CharSequence result = get () ; cs
Distance : 9

103
Tree	final CharSequence result = get ( subSeq , lookupMap , final ) ;
Code	final CharSequence result = get ( subSeq , lookupMap , final ) ;
Distance : 6

104
Tree	CharSequence result = result . toString () ;
Code	CharSequence result = result . toString () ;
Distance : 7

105
Tree	final CharSequence result = result . get ( super(); ) ;
Code	final CharSequence result = result . get ( super(); ) ;
Distance : 5

106
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

107
Tree	CharSequence result = get ( result , lookupMap ) ;
Code	CharSequence result = get ( result , lookupMap ) ;
Distance : 7

108
Tree	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 6

109
Tree	CharSequence result = lookupMap . get ( null ) ;
Code	CharSequence result = lookupMap . get ( null ) ;
Distance : 5

110
Tree	static CharSequence result = result . get () ;
Code	static CharSequence result = result . get () ;
Distance : 7

111
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

112
Tree	final CharSequence result = lookupMap . get () ;
Code	final CharSequence result = lookupMap . get () ;
Distance : 5

113
Tree	final CharSequence result = result . get ( subSeq , result ) ;
Code	final CharSequence result = result . get ( subSeq , result ) ;
Distance : 4

114
Tree	final CharSequence result = result . get ( Integer.MAX_VALUE ) ;
Code	final CharSequence result = result . get ( Integer.MAX_VALUE ) ;
Distance : 5

115
Tree	final CharSequence result = result . get ( UnicodeUnescaper.OPTION.escapePlus ) ;
Code	final CharSequence result = result . get ( UnicodeUnescaper.OPTION.escapePlus ) ;
Distance : 5

116
Tree	CharSequence result = result . toString ( subSeq , result ) ;
Code	CharSequence result = result . toString ( subSeq , result ) ;
Distance : 6

117
Tree	final CharSequence result = get ( result , lookupMap , final ) ;
Code	final CharSequence result = get ( result , lookupMap , final ) ;
Distance : 7

118
Tree	final CharSequence result = result . get ( subSeq , false ) ;
Code	final CharSequence result = result . get ( subSeq , false ) ;
Distance : 4

119
Tree	final CharSequence result = get ( result , result , result ) ;
Code	final CharSequence result = get ( result , result , result ) ;
Distance : 7

120
Tree	CharSequence result = toString ( subSeq , lookupMap ) ;
Code	CharSequence result = toString ( subSeq , lookupMap ) ;
Distance : 7

121
Tree	final CharSequence result = result . result ( subSeq ) ;
Code	final CharSequence result = result . result ( subSeq ) ;
Distance : 5

122
Tree	final int result = result . get ( subSeq ) ;
Code	final int result = result . get ( subSeq ) ;
Distance : 5

123
Tree	CharSequence result = lookupMap . get ( result ) ;
Code	CharSequence result = lookupMap . get ( result ) ;
Distance : 5

124
Tree	protected CharSequence result = get () ;
Code	protected CharSequence result = get () ;
Distance : 8

125
Tree	final CharSequence result = result . toString ( NUMBER_CONSTANT , result ) ;
Code	final CharSequence result = result . toString ( NUMBER_CONSTANT , result ) ;
Distance : 6

126
Tree	final CharSequence result = get () ;
Code	final CharSequence result = get () ;
Distance : 7

127
Tree	CharSequence result = result . get ( subSeq , Double.MIN_VALUE ) ;
Code	CharSequence result = result . get ( subSeq , Double.MIN_VALUE ) ;
Distance : 5

128
Tree	CharSequence result = lookupMap . get ( super(); ) ;
Code	CharSequence result = lookupMap . get ( super(); ) ;
Distance : 5

129
Tree	final CharSequence result = toString ( subSeq ) ;
Code	final CharSequence result = toString ( subSeq ) ;
Distance : 6

130
Tree	final char result = lookupMap . get ( subSeq ) ;
Code	final char result = lookupMap . get ( subSeq ) ;
Distance : 4

131
Tree	static CharSequence result = lookupMap ;
Code	static CharSequence result = lookupMap ;
Distance : 9

132
Tree	CharSequence result = get () ; byte
Code	CharSequence result = get () ; byte
Distance : 9

133
Tree	CharSequence result = result . get ( subSeq , result ) ;
Code	CharSequence result = result . get ( subSeq , result ) ;
Distance : 5

134
Tree	final CharSequence result = result . get ( subSeq , true ) ;
Code	final CharSequence result = result . get ( subSeq , true ) ;
Distance : 4

135
Tree	CharSequence result = lookupMap . get ( result , result ) ;
Code	CharSequence result = lookupMap . get ( result , result ) ;
Distance : 5

136
Tree	CharSequence result = result . get () ; style
Code	CharSequence result = result . get () ; style
Distance : 8

137
Tree	public CharSequence result = result . get ( subSeq ) ;
Code	public CharSequence result = result . get ( subSeq ) ;
Distance : 5

138
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

139
Tree	CharSequence result = lookupMap . get ( subSeq , result ) ;
Code	CharSequence result = lookupMap . get ( subSeq , result ) ;
Distance : 4

140
Tree	CharSequence result = result . get ( super(); ) ;
Code	CharSequence result = result . get ( super(); ) ;
Distance : 6

141
Tree	CharSequence result = lookupMap . get ( null ) ;
Code	CharSequence result = lookupMap . get ( null ) ;
Distance : 5

142
Tree	final CharSequence result = get () ;
Code	final CharSequence result = get () ;
Distance : 7

143
Tree	CharSequence result = result . get ( subSeq , Float.MIN_VALUE ) ;
Code	CharSequence result = result . get ( subSeq , Float.MIN_VALUE ) ;
Distance : 5

144
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

145
Tree	final CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 5

146
Tree	final void result = result . get ( subSeq ) ;
Code	final void result = result . get ( subSeq ) ;
Distance : 5

147
Tree	static CharSequence result = lookupMap . get ( NUMBER_CONSTANT ) ;
Code	static CharSequence result = lookupMap . get ( NUMBER_CONSTANT ) ;
Distance : 5

148
Tree	private CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Code	private CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Distance : 6

149
Tree	CharSequence result = lookupMap . get ( subSeq ) ;
Code	CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

150
Tree	final int result = lookupMap . get ( subSeq ) ;
Code	final int result = lookupMap . get ( subSeq ) ;
Distance : 4

151
Tree	CharSequence result = result . get ( subSeq , Long.MAX_VALUE ) ;
Code	CharSequence result = result . get ( subSeq , Long.MAX_VALUE ) ;
Distance : 5

152
Tree	final CharSequence result = result . toString ( subSeq ) ;
Code	final CharSequence result = result . toString ( subSeq ) ;
Distance : 5

153
Tree	final CharSequence result = result . get ( return; ) ;
Code	final CharSequence result = result . get ( return; ) ;
Distance : 5

154
Tree	static CharSequence result = result ;
Code	static CharSequence result = result ;
Distance : 10

155
Tree	CharSequence result = result . get ( null ) ;
Code	CharSequence result = result . get ( null ) ;
Distance : 6

156
Tree	final CharSequence result = result . get ( subSeq , result ) ;
Code	final CharSequence result = result . get ( subSeq , result ) ;
Distance : 4

157
Tree	final CharSequence result = lookupMap ;
Code	final CharSequence result = lookupMap ;
Distance : 8

158
Tree	final CharSequence result = getVariableResolver . get ( subSeq ) ;
Code	final CharSequence result = getVariableResolver . get ( subSeq ) ;
Distance : 4

159
Tree	final CharSequence result = get ( subSeq , result , get ) ;
Code	final CharSequence result = get ( subSeq , result , get ) ;
Distance : 6

160
Tree	final CharSequence result = ModifyType.CEILING . get ( subSeq ) ;
Code	final CharSequence result = ModifyType.CEILING . get ( subSeq ) ;
Distance : 4

161
Tree	final CharSequence result = result . get ( Calendar.DAY_OF_WEEK ) ;
Code	final CharSequence result = result . get ( Calendar.DAY_OF_WEEK ) ;
Distance : 5

162
Tree	public CharSequence result = result ;
Code	public CharSequence result = result ;
Distance : 10

163
Tree	static CharSequence result = lookupMap . get () ;
Code	static CharSequence result = lookupMap . get () ;
Distance : 6

164
Tree	static CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Code	static CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Distance : 6

165
Tree	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT , result ) ;
Code	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT , result ) ;
Distance : 4

166
Tree	final CharSequence result = result . get ( currentIdx ) ;
Code	final CharSequence result = result . get ( currentIdx ) ;
Distance : 5

167
Tree	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 6

168
Tree	final CharSequence result = get ( subSeq , lookupMap ) ;
Code	final CharSequence result = get ( subSeq , lookupMap ) ;
Distance : 5

169
Tree	final CharSequence result = createMessageFormat . get ( subSeq ) ;
Code	final CharSequence result = createMessageFormat . get ( subSeq ) ;
Distance : 4

170
Tree	final CharSequence result = result . result ( result ) ;
Code	final CharSequence result = result . result ( result ) ;
Distance : 6

171
Tree	= CharSequence result = result ;
Code	= CharSequence result = result ;
Distance : 10

172
Tree	private CharSequence result = result . get ( subSeq ) ;
Code	private CharSequence result = result . get ( subSeq ) ;
Distance : 5

173
Tree	. CharSequence result = result . get () ;
Code	. CharSequence result = result . get () ;
Distance : 7

174
Tree	final CharSequence result = get ( subSeq ) ;
Code	final CharSequence result = get ( subSeq ) ;
Distance : 5

175
Tree	final CharSequence result = lookupMap . get ( subSeq , = ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , = ) ;
Distance : 3

176
Tree	static CharSequence result = get () ;
Code	static CharSequence result = get () ;
Distance : 8

177
Tree	CharSequence result = get ( result , result ) ;
Code	CharSequence result = get ( result , result ) ;
Distance : 7

178
Tree	CharSequence result = get () ; isEquals
Code	CharSequence result = get () ; isEquals
Distance : 9

179
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

180
Tree	final CharSequence result = lookupMap . get ( result , false ) ;
Code	final CharSequence result = lookupMap . get ( result , false ) ;
Distance : 4

181
Tree	final CharSequence result = lookupMap . get ( result , true ) ;
Code	final CharSequence result = lookupMap . get ( result , true ) ;
Distance : 4

182
Tree	CharSequence result = result . toString ( null ) ;
Code	CharSequence result = result . toString ( null ) ;
Distance : 7

183
Tree	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT , result ) ;
Code	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT , result ) ;
Distance : 4

184
Tree	final CharSequence result = SplitState.SPLIT . get ( subSeq ) ;
Code	final CharSequence result = SplitState.SPLIT . get ( subSeq ) ;
Distance : 4

185
Tree	CharSequence result = result . get ( subSeq , set.length ) ;
Code	CharSequence result = result . get ( subSeq , set.length ) ;
Distance : 5

186
Tree	CharSequence result = toString ( subSeq ) ;
Code	CharSequence result = toString ( subSeq ) ;
Distance : 7

187
Tree	CharSequence result = lookupMap . result ( subSeq ) ;
Code	CharSequence result = lookupMap . result ( subSeq ) ;
Distance : 5

188
Tree	final CharSequence result = DateUtils.MILLIS_PER_MINUTE . get ( subSeq ) ;
Code	final CharSequence result = DateUtils.MILLIS_PER_MINUTE . get ( subSeq ) ;
Distance : 4

189
Tree	final CharSequence result = toString ( subSeq , result ) ;
Code	final CharSequence result = toString ( subSeq , result ) ;
Distance : 6

190
Tree	final CharSequence result = lookupMap . get ( subSeq , result ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , result ) ;
Distance : 3

191
Tree	CharSequence result = get ( result , result ) ;
Code	CharSequence result = get ( result , result ) ;
Distance : 7

192
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

193
Tree	public CharSequence result = lookupMap ;
Code	public CharSequence result = lookupMap ;
Distance : 9

194
Tree	CharSequence result = toString () ;
Code	CharSequence result = toString () ;
Distance : 8

195
Tree	= CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Code	= CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Distance : 6

196
Tree	final CharSequence result = Calendar.ZONE_OFFSET . get ( subSeq ) ;
Code	final CharSequence result = Calendar.ZONE_OFFSET . get ( subSeq ) ;
Distance : 4

197
Tree	CharSequence result = lookupMap . get () ;
Code	CharSequence result = lookupMap . get () ;
Distance : 6

198
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

199
Tree	CharSequence result = result . get ( subSeq , result ) ;
Code	CharSequence result = result . get ( subSeq , result ) ;
Distance : 5

200
Tree	final long result = result . get ( subSeq ) ;
Code	final long result = result . get ( subSeq ) ;
Distance : 5

201
Tree	CharSequence result = lookupMap . get ( result ) ;
Code	CharSequence result = lookupMap . get ( result ) ;
Distance : 5

202
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

203
Tree	CharSequence result = toString ( result ) ;
Code	CharSequence result = toString ( result ) ;
Distance : 8

204
Tree	CharSequence result = result . get ( subSeq , CharUtils.NUL ) ;
Code	CharSequence result = result . get ( subSeq , CharUtils.NUL ) ;
Distance : 5

205
Tree	final double result = result . get ( subSeq ) ;
Code	final double result = result . get ( subSeq ) ;
Distance : 5

206
Tree	static CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Code	static CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Distance : 6

207
Tree	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT ) ;
Code	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT ) ;
Distance : 4

208
Tree	synchronized CharSequence result = get () ;
Code	synchronized CharSequence result = get () ;
Distance : 8

209
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

210
Tree	CharSequence result = toString ( result , result ) ;
Code	CharSequence result = toString ( result , result ) ;
Distance : 8

211
Tree	final CharSequence result = get ( subSeq ) ;
Code	final CharSequence result = get ( subSeq ) ;
Distance : 5

212
Tree	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT , result ) ;
Code	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT , result ) ;
Distance : 4

213
Tree	static CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	static CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 6

214
Tree	public CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Code	public CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Distance : 6

215
Tree	final CharSequence result = lookupMap . result ( subSeq ) ;
Code	final CharSequence result = lookupMap . result ( subSeq ) ;
Distance : 4

216
Tree	CharSequence result = get ( result ) ;
Code	CharSequence result = get ( result ) ;
Distance : 7

217
Tree	CharSequence result = toString () ;
Code	CharSequence result = toString () ;
Distance : 8

218
Tree	final CharSequence result = toString ( subSeq , lookupMap ) ;
Code	final CharSequence result = toString ( subSeq , lookupMap ) ;
Distance : 6

219
Tree	final CharSequence result = result . get ( Locale.ENGLISH , result ) ;
Code	final CharSequence result = result . get ( Locale.ENGLISH , result ) ;
Distance : 5

220
Tree	CharSequence result = result . get ( result , = ) ;
Code	CharSequence result = result . get ( result , = ) ;
Distance : 6

221
Tree	CharSequence result = result . result ( subSeq ) ;
Code	CharSequence result = result . result ( subSeq ) ;
Distance : 6

222
Tree	CharSequence result = get ( subSeq ) ; short
Code	CharSequence result = get ( subSeq ) ; short
Distance : 7

223
Tree	final CharSequence result = get ( result , result , get ) ;
Code	final CharSequence result = get ( result , result , get ) ;
Distance : 7

224
Tree	final CharSequence result = toString ( subSeq , result , = ) ;
Code	final CharSequence result = toString ( subSeq , result , = ) ;
Distance : 7

225
Tree	final CharSequence result = get ( subSeq , lookupMap , result ) ;
Code	final CharSequence result = get ( subSeq , lookupMap , result ) ;
Distance : 6

226
Tree	CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Code	CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Distance : 5

227
Tree	CharSequence result = lookupMap . toString () ;
Code	CharSequence result = lookupMap . toString () ;
Distance : 6

228
Tree	CharSequence result = result . get ( subSeq ) ;
Code	CharSequence result = result . get ( subSeq ) ;
Distance : 5

229
Tree	final CharSequence result = get ( subSeq , result , final ) ;
Code	final CharSequence result = get ( subSeq , result , final ) ;
Distance : 6

230
Tree	CharSequence result = result . result ( result ) ;
Code	CharSequence result = result . result ( result ) ;
Distance : 7

231
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

232
Tree	CharSequence result = lookupMap . get ( subSeq ) ;
Code	CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

233
Tree	CharSequence result = result . get ( result ) ;
Code	CharSequence result = result . get ( result ) ;
Distance : 6

234
Tree	CharSequence result = toString ( subSeq , result ) ;
Code	CharSequence result = toString ( subSeq , result ) ;
Distance : 7

235
Tree	final CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Distance : 4

236
Tree	CharSequence result = get ( subSeq ) ; style
Code	CharSequence result = get ( subSeq ) ; style
Distance : 7

237
Tree	CharSequence result = lookupMap . get ( subSeq ) ;
Code	CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

238
Tree	final CharSequence result = result . toString ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = result . toString ( STRING_CONSTANT , result ) ;
Distance : 6

239
Tree	CharSequence result = lookupMap . get ( subSeq , lookupMap ) ;
Code	CharSequence result = lookupMap . get ( subSeq , lookupMap ) ;
Distance : 4

240
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

241
Tree	CharSequence result = lookupMap . get ( result ) ;
Code	CharSequence result = lookupMap . get ( result ) ;
Distance : 5

242
Tree	CharSequence result = result . get ( result ) ;
Code	CharSequence result = result . get ( result ) ;
Distance : 6

243
Tree	static CharSequence result = result . get ( subSeq ) ;
Code	static CharSequence result = result . get ( subSeq ) ;
Distance : 5

244
Tree	CharSequence result = lookupMap . get () ;
Code	CharSequence result = lookupMap . get () ;
Distance : 6

245
Tree	static CharSequence result = get ( subSeq ) ;
Code	static CharSequence result = get ( subSeq ) ;
Distance : 6

246
Tree	final CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 5

247
Tree	final CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Code	final CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Distance : 5

248
Tree	public CharSequence result = result . get ( subSeq ) ;
Code	public CharSequence result = result . get ( subSeq ) ;
Distance : 5

249
Tree	CharSequence result = result . toString ( subSeq ) ;
Code	CharSequence result = result . toString ( subSeq ) ;
Distance : 6

250
Tree	CharSequence result = result . get () ; short
Code	CharSequence result = result . get () ; short
Distance : 8

251
Tree	final CharSequence result = get ( subSeq ) ;
Code	final CharSequence result = get ( subSeq ) ;
Distance : 5

252
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

253
Tree	final CharSequence result = result . get ( stub , result ) ;
Code	final CharSequence result = result . get ( stub , result ) ;
Distance : 5

254
Tree	final CharSequence result = result . get ( Integer.MAX_VALUE , result ) ;
Code	final CharSequence result = result . get ( Integer.MAX_VALUE , result ) ;
Distance : 5

255
Tree	final CharSequence result = result . toString () ;
Code	final CharSequence result = result . toString () ;
Distance : 6

256
Tree	CharSequence result = get ( subSeq , lookupMap ) ;
Code	CharSequence result = get ( subSeq , lookupMap ) ;
Distance : 6

257
Tree	final CharSequence result = result . get ( UnicodeUnescaper.OPTION.escapePlus , result ) ;
Code	final CharSequence result = result . get ( UnicodeUnescaper.OPTION.escapePlus , result ) ;
Distance : 5

258
Tree	final CharSequence result = result . get ( currentIdx , result ) ;
Code	final CharSequence result = result . get ( currentIdx , result ) ;
Distance : 5

259
Tree	final CharSequence result = EscapeUtils.ESCAPE_ECMASCRIPT . get ( subSeq ) ;
Code	final CharSequence result = EscapeUtils.ESCAPE_ECMASCRIPT . get ( subSeq ) ;
Distance : 4

260
Tree	CharSequence result = result . get ( null ) ;
Code	CharSequence result = result . get ( null ) ;
Distance : 6

261
Tree	CharSequence result = lookupMap . get ( return; ) ;
Code	CharSequence result = lookupMap . get ( return; ) ;
Distance : 5

262
Tree	final CharSequence result = set.length . get ( subSeq ) ;
Code	final CharSequence result = set.length . get ( subSeq ) ;
Distance : 4

263
Tree	final CharSequence result = result . get ( subSeq , Double.MAX_VALUE ) ;
Code	final CharSequence result = result . get ( subSeq , Double.MAX_VALUE ) ;
Distance : 4

264
Tree	final CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Distance : 4

265
Tree	final CharSequence result = get ( subSeq , result ) ;
Code	final CharSequence result = get ( subSeq , result ) ;
Distance : 5

266
Tree	public CharSequence result = result . get () ;
Code	public CharSequence result = result . get () ;
Distance : 7

267
Tree	private CharSequence result = result . get () ;
Code	private CharSequence result = result . get () ;
Distance : 7

268
Tree	CharSequence result = get ( subSeq ) ;
Code	CharSequence result = get ( subSeq ) ;
Distance : 6

269
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

270
Tree	CharSequence result = result . get ( subSeq , Float.MAX_VALUE ) ;
Code	CharSequence result = result . get ( subSeq , Float.MAX_VALUE ) ;
Distance : 5

271
Tree	final CharSequence result = result . get ( result , . ) ;
Code	final CharSequence result = result . get ( result , . ) ;
Distance : 5

272
Tree	final CharSequence result = greatestCommonDivisor . get ( subSeq ) ;
Code	final CharSequence result = greatestCommonDivisor . get ( subSeq ) ;
Distance : 4

273
Tree	final CharSequence result = result . get ( subSeq , CharUtils.NUL ) ;
Code	final CharSequence result = result . get ( subSeq , CharUtils.NUL ) ;
Distance : 4

274
Tree	final CharSequence result = result . get ( result , false ) ;
Code	final CharSequence result = result . get ( result , false ) ;
Distance : 5

275
Tree	static CharSequence result = result . get ( null ) ;
Code	static CharSequence result = result . get ( null ) ;
Distance : 6

276
Tree	CharSequence result = get ( subSeq , result ) ;
Code	CharSequence result = get ( subSeq , result ) ;
Distance : 6

277
Tree	final CharSequence result = lookupMap . get ( subSeq , Integer.MAX_VALUE ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , Integer.MAX_VALUE ) ;
Distance : 3

278
Tree	CharSequence result = result . get ( subSeq ) ;
Code	CharSequence result = result . get ( subSeq ) ;
Distance : 5

279
Tree	final CharSequence result = lookupMap . get ( super(); ) ;
Code	final CharSequence result = lookupMap . get ( super(); ) ;
Distance : 4

280
Tree	public CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Code	public CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Distance : 6

281
Tree	public CharSequence result = result . get ( null ) ;
Code	public CharSequence result = result . get ( null ) ;
Distance : 6

282
Tree	public CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	public CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 6

283
Tree	CharSequence result = lookupMap . get ( subSeq ) ;
Code	CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

284
Tree	CharSequence result = result . get () ;
Code	CharSequence result = result . get () ;
Distance : 7

285
Tree	final CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Code	final CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Distance : 5

286
Tree	CharSequence result = lookupMap . toString ( subSeq ) ;
Code	CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

287
Tree	final CharSequence result = result . get ( subSeq , false ) ;
Code	final CharSequence result = result . get ( subSeq , false ) ;
Distance : 4

288
Tree	CharSequence result = lookupMap . result ( result ) ;
Code	CharSequence result = lookupMap . result ( result ) ;
Distance : 6

289
Tree	private CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	private CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 6

290
Tree	final byte result = result . get ( subSeq ) ;
Code	final byte result = result . get ( subSeq ) ;
Distance : 5

291
Tree	final CharSequence result = result . toString ( NUMBER_CONSTANT ) ;
Code	final CharSequence result = result . toString ( NUMBER_CONSTANT ) ;
Distance : 6

292
Tree	CharSequence result = get () ;
Code	CharSequence result = get () ;
Distance : 8

293
Tree	CharSequence result = result . get ( subSeq , Double.MAX_VALUE ) ;
Code	CharSequence result = result . get ( subSeq , Double.MAX_VALUE ) ;
Distance : 5

294
Tree	CharSequence result = lookupMap . get ( subSeq , Integer.MAX_VALUE ) ;
Code	CharSequence result = lookupMap . get ( subSeq , Integer.MAX_VALUE ) ;
Distance : 4

295
Tree	final CharSequence result = result . get ( result , result ) ;
Code	final CharSequence result = result . get ( result , result ) ;
Distance : 5

296
Tree	final CharSequence result = result . get ( result , true ) ;
Code	final CharSequence result = result . get ( result , true ) ;
Distance : 5

297
Tree	final short result = lookupMap . get ( subSeq ) ;
Code	final short result = lookupMap . get ( subSeq ) ;
Distance : 4

298
Tree	CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Code	CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Distance : 5

299
Tree	CharSequence result = toString ( result ) ;
Code	CharSequence result = toString ( result ) ;
Distance : 8

300
Tree	CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Code	CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Distance : 5

301
Tree	final CharSequence result = result . get ( subSeq , Byte.TYPE ) ;
Code	final CharSequence result = result . get ( subSeq , Byte.TYPE ) ;
Distance : 4

302
Tree	final CharSequence result = result . get ( subSeq , set.length ) ;
Code	final CharSequence result = result . get ( subSeq , set.length ) ;
Distance : 4

303
Tree	private CharSequence result = result . get ( null ) ;
Code	private CharSequence result = result . get ( null ) ;
Distance : 6

304
Tree	final CharSequence result = result . get ( subSeq , Float.MAX_VALUE ) ;
Code	final CharSequence result = result . get ( subSeq , Float.MAX_VALUE ) ;
Distance : 4

305
Tree	final CharSequence result = result ;
Code	final CharSequence result = result ;
Distance : 9

306
Tree	final CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Code	final CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Distance : 5

307
Tree	final CharSequence result = lookupMap . get ( subSeq , false ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , false ) ;
Distance : 3

308
Tree	final CharSequence result = lookupMap . get ( subSeq , true ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , true ) ;
Distance : 3

309
Tree	final CharSequence result = get ( result ) ;
Code	final CharSequence result = get ( result ) ;
Distance : 6

========================================================================


